file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-90DT.fnc

000001  000001  #platform "uLCD-90DT"
000002  000001  #platform "uLCD-90DT"
000003  000008  */
000004  000009      #constant ULCD_90DT
000005  000009      #constant ULCD_90DT
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : 
000130  000158  //     : bit 15 Leading spaces (1=space before signed number, 0=No space)
000131  000159  //     : bit 14 sign bit (0=signed, 1=unsigned)
000132  000160  //     : bit 13 Blanking (1=Leading zero blanking, 0=Show Zeros)
000133  000161  //     : bit 12 Leading zeros (1=Zeros included, 0=Zeros suppressed)
000134  000162  //     : bits 11-8 Displayed digit quantity
000135  000163  //     : bits 7-5 Reserved
000136  000164  //     : bits 4-0 Number base (usually 2,10 or 16)
000137  000165        
000138  000166        
000139  000167  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000140  000168        
000141  000169        
000142  000170  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000143  000171  // Syntax: putstr(pointer);
000144  000172  // Usage : putstr("HELLO\n");
000145  000173  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000146  000174  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000147  000175  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000148  000176  //       : The output of putstr can be redirected to the communications port, the media, or memory
000149  000177  //       : using the to(...); function.
000150  000178  //       : A string constant is automatically terminated with a zero.
000151  000179  //       : A string in a data statement is not automatically terminated with a zero.
000152  000180  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000153  000181  //       : element packs 1 or 2 characters.
000154  000182        
000155  000183        
000156  000184  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000157  000185  // Syntax: strlen("varAddress);
000158  000186  // Usage : strlen("HELLO\n");
000159  000187  // Notes : gives the length of a string that is packed into regular var array
000160  000188  //       : Use str_Length(ptr)  for string pointer mode
000161  000189        
000162  000190        
000163  000191  func charwidth("char"), 1;
000164  000192  // Syntax  : charwidth(char);
000165  000193  // Usage   : wid := charwidth('W');
000166  000194  // Notes   : calculates width of a character in pixel units.
000167  000195  //         : 'char' may be a constant or variable.
000168  000196  // Returns : Width of character in pixel units.
000169  000197        
000170  000198        
000171  000199  func charheight("char"), 1;
000172  000200  // Syntax  : charheight(char);
000173  000201  // Usage   : ht := charheight('0x41');
000174  000202  // Notes   : Calculates height of a character in pixel units.
000175  000203  //         : 'char' may be a constant or variable.
000176  000204  // Returns : Height of character in pixel units.
000177  000205        
000178  000206        
000179  000207  func strwidth("pointer"), 1;
000180  000208  // Syntax  : strwidth(ptr);
000181  000209  // Usage   : x := strwidth("HELLO");
000182  000210  // Notes   : returns width of a string in pixel units.
000183  000211  //         : 'pointer' may be a constant or pointer to word aligned variable
000184  000212  // Returns : Width of string in pixel units, can be multi line.
000185  000213        
000186  000214        
000187  000215  func strheight(), 1;
000188  000216  // Syntax  : strheight();
000189  000217  // Usage   : h := strheight();
000190  000218  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000191  000219  //         : pointer may be a constant or pointer to word aligned variable
000192  000220  // Returns : Height of string in pixel units, can be multi line.
000193  000221        
000194  000222        
000195  000223  func unicode_page("charbeg","charend","charoffset"), 1;
000196  000224  // Syntax: unicode_page("charbeg","charend","charoffset");
000197  000225  // Usage : eg:  F_Traditional_0x20_0xFF
000198  000226  // Notes : After selecting a unicode image control with txt_FontID,
000199  000227  //       : this function is called to set the required font within the
000200  000228  //       : unicode set. The file "Unicode.inc" contains wrappers for
000201  000229  //       : this function, and it is not normally called directly.
000202  000230  //       : Returns count of characters in the set.
000203  000231  //       : Refer to "Unicode.inc" for further information.
000204  000232        
000205  000233        
000206  000234  //------------------------------------------------------------------//
000207  000235  //          Text Related Functions                                  //
000208  000236  //------------------------------------------------------------------//
000209  000237        
000210  000238  func txt_MoveCursor("line", "column"), 0;
000211  000239  // Syntax: txt_SetCursor(line, column);
000212  000240  // Usage : txt_SetCursor(arg1, arg2);
000213  000241  // Notes : Moves the text Cursor to a new screen position set by
000214  000242  //       : line,column parameters.
000215  000243        
000216  000244  func txt_Set("function", "value"), 0;
000217  000245  // Syntax: txt_Set(function, value);
000218  000246  // Usage : txt_Set(arg1, arg2);
000219  000247  // Returns : Original value before the change
000220  000248  // Notes : Sets various text related parameters used by other functions
000221  000249  //       : This allows the features to be set programatically with a
000222  000250  //       : single function call.It is strongly recommended to use the
000223  000251  //       : pre-defined constants rather than the mode numbers.
000224  000252  //       : NB:- It is often required to be able to set text
000225  000253  //       : functions with a single function call for graphics engine
000226  000254  //       : related functions, however, there is a complete set of single parameter
000227  000255  //       : shortcut functions that have exactly the same function as
000228  000256  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000229  000257  //       :
000230  000258  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000231  000259  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000232  000260  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000233  000261  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000234  000262  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000235  000263  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000236  000264  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000237  000265  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000238  000266  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000239  000267  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000240  000268  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000241  000269  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000242  000270  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000243  000271  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000244  000272  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000245  000273  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000246  000274  //       :
000247  000275  //       : txt_Set(TEXT_COLOUR, colour);
000248  000276  //       : mode = TEXT_COLOUR (function 0)
000249  000277  //       : txt_Set(TEXT_COLOUR, value);
000250  000278  //       : value = 0 to 0xFFFF, Black to White
000251  000279  //       : Sets the Text colour for the display
000252  000280  //       : Default = LIME.
000253  000281  //       :
000254  000282  //       : mode = TEXT_HIGHLIGHT (function 1)
000255  000283  //       : txt_Set(TEXT_HIGHLIGHT, value);
000256  000284  //       : value = 0 to 0xFFFF, Black to White
000257  000285  //       : Sets the Text background colour for the display. Effective
000258  000286  //       : when text mode is Opaque.
000259  000287  //       : Default = BLACK.
000260  000288  //       :
000261  000289  //       : mode = FONT_ID (function 2)
000262  000290  //       : txt_Set(FONT_ID, value);
000263  000291  //       : value = FONT1 to FONT11 for internal fonts
000264  000292  //       : else this value is the name of a font included
000265  000293  //       : in a users program in a data statement.
000266  000294  //       : Default = FONT SIZE 3.
000267  000295  //       :
000268  000296  //       : mode = TEXT_WIDTH  (function 3)
000269  000297  //       : txt_Set(TEXT_WIDTH, value);
000270  000298  //       : value = 1 to 16
000271  000299  //       : Sets the Text Width multiplier
000272  000300  //       : text will be printed magnified horizontally
000273  000301  //       : by this factor, Default = 1.
000274  000302  //       :
000275  000303  //       : mode = TEXT_HEIGHT  (function 4)
000276  000304  //       : txt_Set(TEXT_HEIGHT, value);
000277  000305  //       : value = 1 to 16
000278  000306  //       : Sets the Text Height multiplier
000279  000307  //       : text will be printed magnified vertically
000280  000308  //       : by this factor, Default = 1.
000281  000309  //       :
000282  000310  //       : mode = TEXT_XGAP  (function 5)
000283  000311  //       : txt_Set(TEXT_XGAP, value);
000284  000312  //       : value = 1 to 32
000285  000313  //       : Sets the horizontal gap between characters
000286  000314  //       : The gap is in pixel units, Default = 0
000287  000315  //       :
000288  000316  //       : mode = TEXT_YGAP  (function 6)
000289  000317  //       : txt_Set(TEXT_YGAP, value);
000290  000318  //       : value = 1 to 32
000291  000319  //       : Sets the vertical gap below characters
000292  000320  //       : The gap is in pixel units, Default = 0
000293  000321  //       :
000294  000322  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000295  000323  //       : txt_Set(TEXT_PRINTDELAY, value);
000296  000324  //       : value = 0 to 255
000297  000325  //       : Sets the delay time (in ms) during character
000298  000326  //       : printing to give a 'teletype' like effect.
000299  000327  //       : Often used to attract attention to a string
000300  000328  //       : being printed which can often be missed if
000301  000329  //       : just suddenly appearing or changing.
000302  000330  //       : Default = 0 ms.
000303  000331  //       :
000304  000332  //       : mode = TEXT_OPACITY (function 8)
000305  000333  //       : txt_Set(TEXT_OPACITY, value);
000306  000334  //       : value = TRANSPARENT (0) = Text Trasparent
000307  000335  //       : value = OPAQUE (1) = Text Opaque
000308  000336  //       : Sets the Opacity/Transparency of the text
000309  000337  //       : Default = 0 or TRANSPARENT
000310  000338  //       :
000311  000339  //       : mode = TEXT_BOLD (function 9)
000312  000340  //       : txt_Set(TEXT_BOLD, value);
000313  000341  //       : value = dont care
000314  000342  //       : Sets Bold Text mode for the next string or char
000315  000343  //       : The feature automatically resets after printing
000316  000344  //       : using putstr or print has completed
000317  000345  //       :
000318  000346  //       : mode = TEXT_ITALIC (function10)
000319  000347  //       : txt_Set(TEXT_ITALIC, value);
000320  000348  //       : value = dont care
000321  000349  //       : Sets Italic Text mode for the next string or char
000322  000350  //       : The feature automatically resets after printing
000323  000351  //       : using putstr or print has completed
000324  000352        
000325  000353  //       : mode = TEXT_INVERSE (function 11)
000326  000354  //       : txt_Set(TEXT_INVERSE, value);
000327  000355  //       : value = dont care
000328  000356  //       : Sets Inverse Text mode for the next string or char
000329  000357  //       : The feature automatically resets after printing
000330  000358  //       : using putstr or print has completed
000331  000359  //       :
000332  000360  //       : mode = TEXT_UNDERLINED (function 12)
000333  000361  //       : txt_Set(TEXT_UNDERLINED, value);
000334  000362  //       : value = dont care
000335  000363  //       : Sets Underlined Text mode for the next string or char
000336  000364  //       : The feature automatically resets after printing
000337  000365  //       : using putstr or print has completed
000338  000366  //       :
000339  000367  //       : mode = TEXT_ATTRIBUTES (function 13)
000340  000368  //       : txt_Set(TEXT_ATTRIBUTES, value);
000341  000369  //       : value = bits are defined as:
000342  000370  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000343  000371  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000344  000372  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000345  000373  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000346  000374  //       : Allows a combination of text attributes to be defined together
000347  000375  //       : by 'or'ing the bits together.
000348  000376  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000349  000377  //       : The feature automatically resets after printing
000350  000378  //       : using putstr or print has completed.
000351  000379  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000352  000380  //       :
000353  000381  //       : mode = TEXT_WRAP (function 14)
000354  000382  //       : txt_Set(TEXT_WRAP , value);
000355  000383  //       : Sets the position where text wrap will occur
000356  000384  //       : The feature automatically resets when screen
000357  000385  //       : mode is changed. If the value is set to 0,
000358  000386  //       : text wrap is turned off.
000359  000387  //       : of the current screen. Default value is 0
000360  000388  // Notes : The value is in pixel units.
000361  000389  //       :
000362  000390  //       : mode = TEXT_ANGLE (function 15)
000363  000391  //       : txt_Set(TEXT_ANGLE , value);
000364  000392  //       : Sets the angle of plotted fonts
000365  000393  // Notes : The angle is in degrees.
000366  000394  //       :
000367  000395        
000368  000396  //------------------------------------------------------------------------------
000369  000397  //txt_Set() related constants
000370  000398  //------------------------------------------------------------------------------
000371  000399  #CONST
000372  000418  #END
000373  000419        
000374  000420  //------------------------------------------------------------------------------
000375  000421  //txt_Set() related arguments
000376  000422  //------------------------------------------------------------------------------
000377  000423  #CONST
000378  000449  #END
000379  000450        
000380  000451        
000381  000452  //=====================================================//
000382  000453  // Single parameter short-cuts                         //
000383  000454  // for the txt_Set functions                           //
000384  000455  // These functions return the existing value before    //
000385  000456  // the change is made.                                 //
000386  000457  //=====================================================//
000387  000458  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000388  000459  func txt_BGcolour("colour"), 1;             // 1  text background colour
000389  000460  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000390  000461  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000391  000462  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000392  000463  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000393  000464  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000394  000465  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000395  000466  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000396  000467  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000397  000468  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000398  000469  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000399  000470  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000400  000471  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000401  000472  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000402  000473  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000403  000474        
000404  000475        
000405  000476        
000406  000477  //------------------------------------------------------------------//
000407  000478  // Memory Access Functions                                          //
000408  000479  //------------------------------------------------------------------//
000409  000480                                                  //
000410  000481  func peekW("address"), 1;                       // read a word from system memory
000411  000482  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000412  000483  // refer to address map of internal variables   //
000413  000484        
000414  000485        
000415  000486  //------------------------------------------------------------------//
000416  000487  //        CTYPE Function Prototypes
000417  000488  //------------------------------------------------------------------//
000418  000489        
000419  000490  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000420  000491  // Syntax: isdigit("char");
000421  000492  // Usage : Var := isdigit(ch);
000422  000493  // Notes : char specifies the ascii character for the test
000423  000494  //     : 0 : char is not an ascii digit.
000424  000495  //     : 1 : char is an ascii digit..
000425  000496  //     : Valid range is "0123456789"
000426  000497        
000427  000498  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000428  000499  // Syntax: isxdigit("char");
000429  000500  // Usage : Var := isxdigit(ch);
000430  000501  // Notes : char specifies the ascii character for the test
000431  000502  //     : 0 : char is not an ascii hexadecimal digit.
000432  000503  //     : 1 : char is an ascii hexadecimal digit..
000433  000504  //     : Valid range is "0123456789ABCDEF"
000434  000505        
000435  000506  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000436  000507  // Syntax: isupper("char");
000437  000508  // Usage : Var := isupper(ch);
000438  000509  // Notes : char specifies the ascii character for the test
000439  000510  //     : 0 : char is not an ascii upper-case letter.
000440  000511  //     : 1 : char is an ascii upper-case letter.
000441  000512  //     : Valid range is "ABCD....WXYZ"
000442  000513        
000443  000514  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000444  000515  // Syntax: islower("char");
000445  000516  // Usage : Var := islower(ch);
000446  000517  // Notes : char specifies the ascii character for the test
000447  000518  //     : 0 : char is not an ascii lower-case letter.
000448  000519  //     : 1 : char is an ascii lower-case letter.
000449  000520  //     : Valid range is "abcd....wxyz"
000450  000521        
000451  000522  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000452  000523  // Syntax: isalpha("char");
000453  000524  // Usage : Var := isalpha(ch);
000454  000525  // Notes : char specifies the ascii character for the test
000455  000526  //     : 0 : char is not an ascii lower or upper case letter.
000456  000527  //     : 1 : char is an ascii lower or upper case letter.
000457  000528  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000458  000529        
000459  000530  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000460  000531  // Syntax: isalnum("char");
000461  000532  // Usage : Var := isalnum(ch);
000462  000533  // Notes : char specifies the ascii character for the test
000463  000534  //     : 0 : char is not an ascii alphanumeric character.
000464  000535  //     : 1 : char is an ascii alphanumeric character.
000465  000536  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000466  000537        
000467  000538  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000468  000539  // Syntax: isprint("char");
000469  000540  // Usage : Var := isprint(ch);
000470  000541  // Notes : char specifies the ascii character for the test
000471  000542  //     : 0 : char is not a printable ascii character.
000472  000543  //     : 1 : char is a printable ascii character.
000473  000544  //     : Valid range is "0x20...0x7F"
000474  000545        
000475  000546  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000476  000547  // Syntax: isspace("char");
000477  000548  // Usage : Var := isspace(ch);
000478  000549  // Notes : char specifies the ascii character for the test
000479  000550  //     : 0 : char is not a space type character.
000480  000551  //     : 1 : char is a space type character.
000481  000552  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000482  000553        
000483  000554  //unformatted
000484  000555  func iswhite("char"), 1;    //
000485  000556  // Syntax: iswhite("char");
000486  000557  // Usage : Var := iswhite(ch);
000487  000558  // Notes : char specifies the ascii character for the test
000488  000559  //     : 0 : char is not a space or tab character.
000489  000560  //     : 1 : char is not a space or tab character.
000490  000561  //     : Valid range is space or tab
000491  000562        
000492  000563  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000493  000564  // Syntax: toupper("char");
000494  000565  // Usage : Var := toupper(ch);
000495  000566  // Notes : char specifies the ascii character for the test
000496  000567  //     : "ABCD....XYZ" : if character is a lower case letter.
000497  000568  //     : char : if character is not a lower case letter.
000498  000569  //     : Valid range is "abcd....wxyz"
000499  000570        
000500  000571  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000501  000572  // Syntax: tolower("char");
000502  000573  // Usage : Var := tolower(ch);
000503  000574  // Notes : char specifies the ascii character for the test
000504  000575  //     : "abcd....xyz" : if character is an upper case letter.
000505  000576  //     : char : if character is not an upper case letter.
000506  000577  //     : Valid range is "ABCD....WXYZ"
000507  000578        
000508  000579  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000509  000580  // Syntax: LObyte(var);
000510  000581  // Usage : myVar := LObyte(myvar2);
000511  000582  // Notes : var specifies the user variable
000512  000583  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000513  000584        
000514  000585  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000515  000586  // Syntax: HIbyte(var);
000516  000587  // Usage : myVar := HIbyte(myvar2);
000517  000588  // Notes : var specifies the user variable
000518  000589  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000519  000590        
000520  000591        
000521  000592  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000522  000593  // Syntax: ByteSwap(var);
000523  000594  // Usage : myVar := ByteSwap(myvar2);
000524  000595  // Notes : var specifies the user variable
000525  000596  //     : Returns the endian swapped value of a 16 bit variable
000526  000597        
000527  000598        
000528  000599  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000529  000600  // Syntax: NybleSwap(var);
000530  000601  // Usage : myVar := NybleSwap(myvar2);
000531  000602  // Notes : var specifies the user variable
000532  000603  //     : Returns the 16 bit variable with swapped lower nybles
000533  000604        
000534  000605  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000535  000606  // Syntax: putnumXY(x, y, format, value);
000536  000607  // Usage : var := putnumXY(100, 100, HEX, val);
000537  000608  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000538  000609  //     : Format: A constant that specifies the number format
000539  000610  //     : Value : The number to be printed
000540  000611        
000541  000612  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000542  000613  // Syntax: txt_FontBank(bank, offset);
000543  000614  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000544  000615  // Returns : Current font before the change, or 0 if invalid or bank is protected
000545  000616  // Notes : Sets the current font to a font held in another bank
000546  000617        
000547  000618  //------------------------------------------------------------------//
000548  000619  // 16bit signed Math Functions                                      //
000549  000620  //------------------------------------------------------------------//
000550  000621                                                  //
000551  000622  func ABS("value"), 1;                           // return a positive number
000552  000623  // Syntax: ABS(value);
000553  000624  // Usage : var := ABS(arg);
000554  000625  // Notes : Returns the absolute value of an argument
000555  000626        
000556  000627  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000557  000628  // Syntax: MIN(value1, value2);
000558  000629  // Usage : var := MIN(arg1, arg2);
000559  000630  // Notes : Returns the minimum of 2 arguments
000560  000631        
000561  000632  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000562  000633  // Syntax: MAX(value1, value2);
000563  000634  // Usage : var := MAX(arg1, arg2);
000564  000635  // Notes : Returns the maximum of 2 arguments
000565  000636        
000566  000637  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000567  000638  // Syntax: SWAP(&var1, &var2);
000568  000639  // Usage : SWAP(&var1, &var2);
000569  000640  // Notes : Swaps the contents of 2 variables or memory locations
000570  000641        
000571  000642  func SIN("angle"), 1;                           // return SIN of angle
000572  000643  // Syntax: SIN(angle);
000573  000644  // Usage : var := SIN(arg);
000574  000645  // Notes : Returns the sine in radians of an argument in degrees
000575  000646  //       : the returned value range is from 127 to -127. The real
000576  000647  //       : cosine values vary from 1.0 to -1.0 so appropriate
000577  000648  //       : scaling must be done in user code.
000578  000649        
000579  000650  func COS("angle"), 1;                           // return COS of angle
000580  000651  // Syntax: COS(angle);
000581  000652  // Usage : var := COS(arg);
000582  000653  // Notes : Returns the cosine in radians of an argument in degrees
000583  000654  //       : the returned value range is from 127 to -127. The real
000584  000655  //       : cosine values vary from 1.0 to -1.0 so appropriate
000585  000656  //       : scaling must be done in user code.
000586  000657        
000587  000658  func RAND(), 1;                                 // return a pseudo random number
000588  000659  // Syntax: RAND();
000589  000660  // Usage : var := RAND();
000590  000661  // Notes : Returns a random number between 0 and 0xFFFF.
000591  000662  //       : The random number generator must first be seeded
000592  000663  //       : by using the SEED(number) function.
000593  000664        
000594  000665  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000595  000666  // Syntax: RANDVAL("low", "high");
000596  000667  // Usage : var := RANDVAL(low, high);
000597  000668  // Notes : Returns a random number between low and high limits
000598  000669  //       : such that low <= N < high
000599  000670  //       : The random number generator may first be seeded
000600  000671  //       : by using the SEED(number) function.
000601  000672  //       : RANDVAL is the equivalent of aggregate functions:-
000602  000673  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000603  000674  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000604  000675        
000605  000676  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000606  000677  // Syntax: SEED(number);
000607  000678  // Usage : SEED(arg);
000608  000679  // Notes : Seeds the random number generator.
000609  000680        
000610  000681  func SQRT("number"), 1;                         // return square root of a number
000611  000682  // Syntax: SQRT(number);
000612  000683  // Usage : SQRT(arg);
000613  000684  // Notes : Returns the integer square root of a number.
000614  000685        
000615  000686  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000616  000687  // Syntax: OVF();
000617  000688  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000618  000689  //       : hiWord := OVF();
000619  000690  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000620  000691        
000621  000692  func CY(), 1;
000622  000693  // Syntax: CY();
000623  000694  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000624  000695  //       : print(myvar," "CY(),"\n");           // carry = 1
000625  000696  // Notes : This function returns the carry status of an
000626  000697  // unsigned overflow from any 16 or 32bit additions or sutractions.
000627  000698        
000628  000699  func EVE_SP(), 1;
000629  000700  // Syntax: EVE_SP();
000630  000701  // Usage : eg:  print(EVE_SP());
000631  000702  // Notes : Used for debugging to assess the current stack level,
000632  000703  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000633  000704        
000634  000705  func EVE_SSIZE(), 1;
000635  000706  // Syntax: EVE_SSIZE();
000636  000707  // Usage : eg:  print(EVE_SSIZE());
000637  000708  // Notes : Used to get the stack size,
000638  000709  //       : mainly for debugging purposes, EVE_SP.4dg
000639  000710        
000640  000711        
000641  000712  //------------------------------------------------------------------//
000642  000713  //
000643  000714  //------------------------------------------------------------------//
000644  000715  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000645  000716        
000646  000717        
000647  000718  // single word array operations
000648  000719  #CONST
000649  000740  #END
000650  000741        
000651  000742        
000652  000743  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000653  000744        
000654  000745  // dual word array operations
000655  000746  #CONST
000656  000758  #END
000657  000759        
000658  000760        
000659  000761  func __reserved3(), 0; // do not remove
000660  000762  func __reserved4(), 0; // do not remove
000661  000763        
000662  000764        
000663  000765  //------------------------------------------------------------------//
000664  000766  // unsigned long (32 bit) operations                                //
000665  000767  //------------------------------------------------------------------//
000666  000768        
000667  000769  func uadd_3232("res32", "val1", "val2"), 1;
000668  000770  // Syntax   : cmp_3232(res32, varA, varB);
000669  000771  // Input    : DWORD res32 points to optional result (or zero for compare)
000670  000772  //          : DWORD val1 points to 32bit augend
000671  000773  //          : DWORD val2 points to 32bit addend
000672  000774  // Usage    : var res32[2];
000673  000775  //          : res := cmp_3232(res32, val1, val2);
000674  000776  // Notes    : performs an unsigned addition of 2 x 32bit values
000675  000777  //          : placing the 32bit result in a 2 word array.
000676  000778  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000677  000779  //          ; carry flag is also set on 32bit unsigned overflow
000678  000780  //          ; and can be read with the CY() function.
000679  000781        
000680  000782        
000681  000783  func usub_3232("res32", "val1", "val2"), 1;
000682  000784  // Syntax   : cmp_3232(res32, varA, varB);
000683  000785  // Input    : DWORD res32 points to optional result (or zero for compare)
000684  000786  //          : DWORD val1 points to first 32bit minuend
000685  000787  //          : DWORD val2 points to 32bit subtrahend
000686  000788  // Usage    : var res32[2];
000687  000789  //          : res := cmp_3232(res32, val1, val2);
000688  000790  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000689  000791  //          : placing the 32bit result in a 2 word array.
000690  000792  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000691  000793  //          ; carry flag is also set on 32bit unsigned underflow
000692  000794  //          ; and can be read with the CY() function.
000693  000795        
000694  000796        
000695  000797  func umul_1616("&res32", "val1", "val2"), 1;
000696  000798  // Syntax   : umul_1616(&res32, varA, varB);
000697  000799  // Input    : DWORD result   points to 32bit result register.
000698  000800  //          : VAR   val1  16bit register or constant
000699  000801  //          : VAR   val2  16bit register or constant
000700  000802  // Usage    : var res32[2];
000701  000803  //          : umul_1616(&res32, myvar, 50000);
000702  000804  // Notes    : performs an unsigned multiply of 2 x 16bit values
000703  000805  //          : placing the 32bit result in a 2 word array.
000704  000806  // Returns  : the pointer to the 32bit result.
000705  000807  //          : carry and overflow are not affected.
000706  000808        
000707  000809        
000708  000810  func udiv_3232("res32", "val1", "val2"), 1;
000709  000811  // Syntax   : udiv_1616(res32, varA, varB);
000710  000812  // Input    : DWORD *result   points to 32bit result register.
000711  000813  //          : DWORD   val1  pointer to 32bit value (dividend)
000712  000814  //          : DWORD   val2  pointer to 32bit value (divisor)
000713  000815  // Usage    : var res32[2];
000714  000816  //          : umul_1616(res32, myvar, 50000);
000715  000817  // Notes    : performs an unsigned division of 2 x 32bit values
000716  000818  //          : placing the 32bit result in a 2 word array.
000717  000819  // Returns  : the pointer to the 32bit result.
000718  000820  //          : carry and overflow are not affected.
000719  000821        
000720  000822        
000721  000823  func ucmp_3232("val1", "val2"), 1;
000722  000824  // Syntax   : cmp_3232(varA, varB);
000723  000825  // Input    : DWORD val1 points to 32bit minuend
000724  000826  //          : DWORD val2 points to 32bit sutrahend
000725  000827  // Usage    : res := cmp_3232(val1, val2);
000726  000828  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000727  000829  //          : The result of the subtraction is returned.
000728  000830  // Returns  : 0  if equal
000729  000831  //          : 1  if val1 > val2
000730  000832  //          : -1 if val1 < val2
000731  000833  //          : This function does not affect the carry flag.
000732  000834        
000733  000835  func __reserved5(), 0; // do not remove
000734  000836  func __reserved6(), 0; // do not remove
000735  000837        
000736  000838  //------------------------------------------------------------------//
000737  000839  // Floating point operations                                        //
000738  000840  // Note that source arguments may be a pointer to a float variable, //
000739  000841  // or a numeric text string.                                        //
000740  000842  // A string argument is converted at run-time by calling            //
000741  000843  // flt_Val for a string argument.                                   //
000742  000844  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000743  000845  //------------------------------------------------------------------//
000744  000846  func flt_VAL("fresult", "numstring"), 1;
000745  000847  // Syntax   : flt_VAL(float1, mystring);
000746  000848  // Input    : FLOAT  fresult  points to float result register
000747  000849  //          : numstring       a string constant or string variable
000748  000850  //          : that is holds valid floating point number.
000749  000851  // Usage    : var float1[2];
000750  000852  //          : flt_VAL(float1, "1.0594631");
000751  000853  // Notes    : The string argument can be a string constant, a pointer
000752  000854  //          : to a string variable, or a pointer to a data statement.
000753  000855  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000754  000856  //          : For hex or binary, the number is preceeded with 0x or 0b
000755  000857  // Returns  : the pointer to the float result.
000756  000858  //          : carry and overflow are not affected.
000757  000859        
000758  000860        
000759  000861  func flt_ITOF("fresult", "var16"), 1;
000760  000862  // Syntax   : flt_ITOF(resf, intval);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : var16           a 16bit signed integer variable or string constant
000763  000865  // Usage    : var float1[2];
000764  000866  //          : var myvar := 30000;
000765  000867  //          : flt_VAL(float1, myvar);
000766  000868  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000767  000869  // Returns  : the pointer to the float result.
000768  000870        
000769  000871        
000770  000872  func flt_UITOF("fresult", "uvar16"), 1;
000771  000873  // Syntax   : flt_ITOF(resf, intval);
000772  000874  // Input    : FLOAT  fresult  points to float result register
000773  000875  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000774  000876  // Usage    : var float1[2];
000775  000877  //          : var myuvar := 30000;
000776  000878  //          : flt_UITOF(float1, myuvar);
000777  000879  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000778  000880  // Returns  : the pointer to the float result.
000779  000881        
000780  000882  func flt_LTOF("fresult", "var32"), 1;
000781  000883  // Syntax   : flt_LTOF(resf, var32);
000782  000884  // Input    : FLOAT  fresult  points to float result register
000783  000885  //          : var32           points to a 32bit (long) signed variable or string constant
000784  000886  // Usage    : var float1[2];
000785  000887  //          : var mylong[2];
000786  000888  //          : flt_VAL(float1, mylong);
000787  000889  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000788  000890  // Returns  : the pointer to the float result.
000789  000891        
000790  000892        
000791  000893  func flt_ULTOF("fresult", "uvar32"), 1;
000792  000894  // Syntax   : flt_ITOF(resf, uvar32);
000793  000895  // Input    : FLOAT  fresult  points to float result register
000794  000896  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000795  000897  // Usage    : var float1[2];
000796  000898  //          : var myulong[2];
000797  000899  //          : flt_VAL(float1, myulong);
000798  000900  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000799  000901  // Returns  : the pointer to the float result.
000800  000902        
000801  000903        
000802  000904  func flt_PRINT("fvalue", "formatstring"), 1;
000803  000905  // Syntax   : flt_PRINT(resf, formatstr);
000804  000906  // Input    : FLOAT  fresult  points to float result register
000805  000907  //          : formatstring    zero, null string, of valid format string
000806  000908  // Usage    : var float1[2];
000807  000909  //          : flt_PRINT(float1, "");
000808  000910  // Notes    : The string argument can be a string constant, a pointer
000809  000911  //          : to a string variable, or a pointer to a data statement.
000810  000912  //          : If it is zero or an empty string, the number is
000811  000913  //          : automatically formatted for the best presentation.
000812  000914  //          : The format string is similar to the C language, but only
000813  000915  //          : a single '%' may be used to print a single variable.
000814  000916  // Returns  : zero if success.
000815  000917        
000816  000918        
000817  000919  func flt_ABS("result", "floatval"), 1;
000818  000920  // Syntax   : flt_ABS(&result, &fval);
000819  000921  // Input    : FLOAT  result   points to float result register
000820  000922  //          : numstring       a string that is a valid number
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000823  000925  // Returns  : the pointer to the float result.
000824  000926  //          : carry and overflow are not affected.
000825  000927        
000826  000928        
000827  000929  func flt_ACOS("result", "floatval"), 1;
000828  000930  // Syntax   : flt_ACOS(result, fval);
000829  000931  // Input    : FLOAT  result (in radians) points to float result register
000830  000932  //          : FLOAT  floatval points to the float value to get arccos of
000831  000933  // Usage    : var float1[2];
000832  000934  //          : flt_ACOS(result, float1); // get the arccos of float1
000833  000935  // Notes    : the result is in radians.
000834  000936  // Returns  : the pointer to the float result.
000835  000937  //          : carry and overflow are not affected.
000836  000938        
000837  000939        
000838  000940  func flt_ASIN("result", "floatval"), 1;
000839  000941  // Syntax   : flt_ASIN(result, fval);
000840  000942  // Input    : FLOAT  result (in radians) points to float result register
000841  000943  //          : FLOAT  floatval points to the float value to get arcsin of
000842  000944  // Usage    : var float1[2];
000843  000945  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000844  000946  // Notes    : the result is in radians.
000845  000947  // Returns  : the pointer to the float result.
000846  000948  //          : carry and overflow are not affected.
000847  000949        
000848  000950        
000849  000951  func flt_ATAN("result", "floatval"), 1;
000850  000952  // Syntax   : flt_ATAN(result, fval);
000851  000953  // Input    : FLOAT  result (in radians) points to float result register
000852  000954  //          : FLOAT  floatval points to the float value to get arctan of
000853  000955  // Usage    : var float1[2];
000854  000956  //          : flt_ATAN(result, float1); // get the Arctan of float1
000855  000957  // Notes    : the result is in radians.
000856  000958  // Returns  : the pointer to the float result.
000857  000959  //          : carry and overflow are not affected.
000858  000960        
000859  000961        
000860  000962  func flt_COS("result", "floatval"), 1;
000861  000963  // Syntax   : flt_COS(result, fval);
000862  000964  // Input    : FLOAT  result   points to float result register
000863  000965  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000864  000966  // Usage    : var float1[2];
000865  000967  //          : flt_COS(result, float1); // get the Cosine of float1
000866  000968  // Notes    : the result is in radians.
000867  000969  // Returns  : the pointer to the float result.
000868  000970  //          : carry and overflow are not affected.
000869  000971        
000870  000972        
000871  000973  func flt_EXP("result", "floatval"), 1;
000872  000974  // Syntax   : flt_EXP(result, fval);
000873  000975  // Input    : FLOAT  result   points to float result register
000874  000976  //          : FLOAT  floatval points to the float value to get Exponent of
000875  000977  // Usage    : var float1[2];
000876  000978  //          : flt_EXP(result, float1); // get the Exponent of float1
000877  000979  // Returns  : the pointer to the float result.
000878  000980  //          : carry and overflow are not affected.
000879  000981        
000880  000982        
000881  000983  func flt_CEIL("result", "floatval"), 1;
000882  000984  // Syntax   : flt_CEIL(result, floatval);
000883  000985  // Input    : FLOAT  floatval points to the float value to integerize up
000884  000986  // Usage    : var float1[2];
000885  000987  //          : n := flt_INT(float1, float1); // round value up to the integer value
000886  000988  // Notes    : Removes fractional part, rounding up correctly.
000887  000989  // Returns  : the pointer to the float result.
000888  000990  //          : carry and overflow are not affected.
000889  000991        
000890  000992        
000891  000993  func flt_FLOOR("result", "floatval"), 1;
000892  000994  // Syntax   : flt_FLOOR(result, floatval);
000893  000995  // Input    : FLOAT  floatval points to the float value to integerize down
000894  000996  // Usage    : var float1[2];
000895  000997  //          : n := flt_INT(float1, float1); // round value down to the integer value
000896  000998  // Notes    : Removes fractional part, rounding down correctly.
000897  000999  // Returns  : the pointer to the float result.
000898  001000  //          : carry and overflow are not affected.
000899  001001        
000900  001002        
000901  001003  func flt_SIN("result", "floatval"), 1;
000902  001004  // Syntax   : flt_SIN(result, fval);
000903  001005  // Input    : FLOAT  result   points to float result register
000904  001006  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000905  001007  // Usage    : var float1[2];
000906  001008  //          : flt_SIN(result, float1); // get the Sin of float1
000907  001009  // Notes    : the result is in radians.
000908  001010  // Returns  : the pointer to the float result.
000909  001011  //          : carry and overflow are not affected.
000910  001012        
000911  001013        
000912  001014  func flt_LOG("result", "floatval"), 1;
000913  001015  // Syntax   : flt_LOG(&result, &fval);
000914  001016  // Input    : FLOAT  result   points to float result register
000915  001017  //          : FLOAT  floatval points to the float value to get Log of
000916  001018  // Usage    : var float1[2];
000917  001019  //          : flt_LOG(result, float1); // get the natural Log of float1
000918  001020  // Returns  : the pointer to the float result.
000919  001021  //          : carry and overflow are not affected.
000920  001022        
000921  001023        
000922  001024  func flt_SQR("result", "floatval"), 1;
000923  001025  // Syntax   : flt_SQR(result, fval);
000924  001026  // Input    : FLOAT  result   points to float result register
000925  001027  //          : FLOAT  floatval points to the float value to get Log of
000926  001028  // Usage    : var float1[2];
000927  001029  //          : flt_SQR(result, float1); // get the square root of float1
000928  001030  // Returns  : the pointer to the float result, or zero if number was negative.
000929  001031  //          : carry and overflow are not affected.
000930  001032        
000931  001033        
000932  001034  func flt_TAN("result", "floatval"), 1;
000933  001035  // Syntax   : flt_TAN(result, fval);
000934  001036  // Input    : FLOAT  result   points to float result register
000935  001037  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000936  001038  // Usage    : var float1[2];
000937  001039  //          : flt_TAN(result, float1); // get the Tangent of float1
000938  001040  // Returns  : the pointer to the float result.
000939  001041  //          : carry and overflow are not affected.
000940  001042        
000941  001043        
000942  001044  func flt_POW("result", "floatx", "floaty"), 1;
000943  001045  // Syntax   : flt_POW(result, fval1, fval2);
000944  001046  // Input    : FLOAT  result   points to float result register
000945  001047  //          : FLOAT  floatx   points to the float value to raise
000946  001048  //          : FLOAT  floaty   points to the float value for power
000947  001049  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000948  001050  // Returns  : the pointer to the float result, or zero if error occurs.
000949  001051  //          : carry and overflow are not affected.
000950  001052        
000951  001053        
000952  001054  func flt_ADD("result", "floatA", "floatB"), 1;
000953  001055  // Syntax   : flt_ADD(result, floatA, floatB);
000954  001056  // Input    : FLOAT  result   points to float result register
000955  001057  //          : FLOAT  floatval points to the float value A
000956  001058  //          : FLOAT  floatval points to the float value B
000957  001059  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000958  001060  // Returns  : the pointer to the float result, or zero if error occurs.
000959  001061  //          : carry and overflow are not affected.
000960  001062        
000961  001063        
000962  001064  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000963  001065  // Syntax   : flt_SUB(result, floatA, floatB);
000964  001066  // Input    : FLOAT  result   points to float result register
000965  001067  //          : FLOAT  floatval points to the float value A
000966  001068  //          : FLOAT  floatval points to the float value B
000967  001069  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000968  001070  // Returns  : the pointer to the float result, or zero if error occurs.
000969  001071  //          : carry and overflow are not affected.
000970  001072        
000971  001073        
000972  001074  func flt_MUL("result", "floatA", "floatB"), 1;
000973  001075  // Syntax   : flt_MUL(result, floatA, floatB);
000974  001076  // Input    : FLOAT  result   points to float result register
000975  001077  //          : FLOAT  floatval points to the float value A
000976  001078  //          : FLOAT  floatval points to the float value B
000977  001079  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000978  001080  // Returns  : the pointer to the float result, or zero if error occurs.
000979  001081  //          : carry and overflow are not affected.
000980  001082        
000981  001083        
000982  001084  func flt_DIV("result", "floatA", "floatB"), 1;
000983  001085  // Syntax   : flt_DIV(result, floatA, floatB);
000984  001086  // Input    : FLOAT  result   points to float result register
000985  001087  //          : FLOAT  floatval points to the float value A
000986  001088  //          : FLOAT  floatval points to the float value B
000987  001089  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
000988  001090  // Returns  : the pointer to the float result, or zero if error occurs.
000989  001091  //          : carry and overflow are not affected.
000990  001092        
000991  001093        
000992  001094  //------------------------------------------------------------------//
000993  001095  // The following float functions all return integer values.
000994  001096  //------------------------------------------------------------------//
000995  001097  func flt_EQ("floatA", "floatB"), 1;
000996  001098  // Syntax   : flt_EQ(floatA, floatB);
000997  001099  // Input    : FLOAT  floatval points to the float value A
000998  001100  //          : FLOAT  floatval points to the float value B
000999  001101  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001000  001102  // Returns  : True if numbers are equal, false otherwise.
001001  001103        
001002  001104        
001003  001105  func flt_NE("floatA", "floatB"), 1;
001004  001106  // Syntax   : flt_NE(floatA, floatB);
001005  001107  // Input    : FLOAT  floatval points to the float value A
001006  001108  //          : FLOAT  floatval points to the float value B
001007  001109  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001008  001110  // Returns  : True if numbers are not equal, false otherwise.
001009  001111        
001010  001112        
001011  001113        
001012  001114  func flt_GT("floatA", "floatB"), 1;
001013  001115  // Syntax   : flt_GT(floatA, floatB);
001014  001116  // Input    : FLOAT  floatval points to the float value A
001015  001117  //          : FLOAT  floatval points to the float value B
001016  001118  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001017  001119  // Returns  : True if A > B, false otherwise.
001018  001120        
001019  001121        
001020  001122  func flt_GE("floatA", "floatB"), 1;
001021  001123  // Syntax   : flt_GE(floatA, floatB);
001022  001124  // Input    : FLOAT  floatval points to the float value A
001023  001125  //          : FLOAT  floatval points to the float value B
001024  001126  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001025  001127  // Returns  : True if A >= B, false otherwise.
001026  001128        
001027  001129        
001028  001130  func flt_LT("floatA", "floatB"), 1;
001029  001131  // Syntax   : flt_LT(floatA, floatB);
001030  001132  // Input    : FLOAT  floatval points to the float value A
001031  001133  //          : FLOAT  floatval points to the float value B
001032  001134  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001033  001135  // Returns  : True if A < B, false otherwise.
001034  001136        
001035  001137        
001036  001138  func flt_LE("floatA", "floatB"), 1;
001037  001139  // Syntax   : flt_LE(floatA, floatB);
001038  001140  // Input    : FLOAT  floatval points to the float value A
001039  001141  //          : FLOAT  floatval points to the float value B
001040  001142  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001041  001143  // Returns  : True if A <= B, false otherwise.
001042  001144        
001043  001145        
001044  001146  func flt_SGN("floatval"), 1;
001045  001147  // Syntax   : flt_SGN(fval);
001046  001148  // Input    : FLOAT  floatval   points to the float value examine sign
001047  001149  // Usage    : var float1[2];
001048  001150  //          : n := flt_SGN(float1); // return -1 if float number negative
001049  001151  // Notes    : returns 0 if sign is positive or zero.
001050  001152  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001051  001153  //          : carry and overflow are not affected.
001052  001154        
001053  001155        
001054  001156  func flt_FTOI("floatvar"), 1;
001055  001157  // Syntax   : flt_FTOI(myfloat);
001056  001158  // Input    : FLOAT  fresult  points to float result register
001057  001159  // Usage    : var float1[2];
001058  001160  //          : myvar := flt_VAL(&float1, myvar);
001059  001161  // Notes    : Converts a floating point number to a 16bit integer.
001060  001162  //          : The floating point number is rounded up or down accordingly.
001061  001163  // Returns  : the integer value of the float.
001062  001164        
001063  001165  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001064  001166  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001065  001167  // Input    : FLOAT  fresult  points to float result register
001066  001168  //          : formatstring    zero, null string, of valid format string
001067  001169  // Usage    : var float1[2];
001068  001170  //          : flt_PRINT(float1, "");
001069  001171  // Notes    : The string argument can be a string constant, a pointer
001070  001172  //          : to a string variable, or a pointer to a data statement.
001071  001173  //          : If it is zero or an empty string, the number is
001072  001174  //          : automatically formatted for the best presentation.
001073  001175  //          : The format string is similar to the C language, but only
001074  001176  //          : a single '%' may be used to print a single variable.
001075  001177  // Returns  : zero if success.
001076  001178        
001077  001179  func __reserved9(), 0; // do not remove
001078  001180  func __reserved10(), 0; // do not remove
001079  001181        
001080  001182  //------------------------------------------------------------------//
001081  001183  //------------------------------------------------------------------//
001082  001184  //------------------------------------------------------------------//
001083  001185  //------------------------------------------------------------------//
001084  001186  //------------------------------------------------------------------//
001085  001187  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001086  001188  // Syntax: pin_Set(mode, pin);
001087  001189  // Usage : pin_Set(PIN_OUT,);
001088  001190  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001089  001191  //       : for pin function compatitblilites.
001090  001192  //       : returns true if the pin number and mode is legal (usually ignored)
001091  001193  //       :    available pin modes
001092  001194  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001093  001195  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001094  001196  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001095  001197  //       :    PIN_OUT                 3        // pin is output
001096  001198  //       :    PIN_OUT_OD              4        // pin is output with open drain
001097  001199  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001098  001200  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001099  001201  //       :
001100  001202        
001101  001203  func pin_HI("pin"), 1;                    // set pin to logic '1'
001102  001204  // Syntax: pin_HI(pin);
001103  001205  // Usage : pin_HI(PA4);        // make PA4 HI level
001104  001206  // Notes : Outputs a logic "High" to the pin latch
001105  001207  //       : The pin is automatically made an output.
001106  001208  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001107  001209  //       : returns true if the pin number is legal (usually ignored)
001108  001210  //       :
001109  001211        
001110  001212  func pin_LO("pin"), 1;                    // set pin to logic '0'
001111  001213  // Syntax: pin_LO(pin);
001112  001214  // Usage : pin_LO(PA3);
001113  001215  // Notes : Outputs a logic "Low" to the pin latch
001114  001216  //       : The pin is automatically made an output.
001115  001217  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001116  001218  //       : returns true if the pin number is legal (usually ignored)
001117  001219  //       :
001118  001220        
001119  001221  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001120  001222  // Syntax: pin_Var(pin, value);
001121  001223  // Usage : pin_Var(IO3, myvar);
001122  001224  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001123  001225  //       : The pin is automatically made an output.
001124  001226  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001125  001227  //       : returns true if the pin number is legal (usually ignored)
001126  001228        
001127  001229  func pin_Read("pin"), 1;                // read pin, logic or analogue
001128  001230  // Syntax: pin_Read(PA0);
001129  001231  // Usage : arg1 := pin_Read(arg2);
001130  001232  // Notes : Read a pin in various ways. If the pin is
001131  001233  //       : set to an input, read the state of the input pin.
001132  001234  //       : If set to an output, read the state of the output latch.
001133  001235  //       : If set to analogue, read the 12 bit analogue value.
001134  001236        
001135  001237  func bus_Read(), 1;
001136  001238  // Syntax: bus_Read();
001137  001239  // Usage : arg1 := pin_ReadBus();
001138  001240  // Notes : Read the 16 bit port regardless of pin configurations.
001139  001241  //       : If a pin is configured as input or analogue, the pin is read directly as
001140  001242  //       : if it were a digital input. If a pin is configured as an output, the pin
001141  001243  //       : is also read directly, giving the output latch state.
001142  001244  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001143  001245  //       : (Refer to 'port bit position masks')
001144  001246  //Returns: Returns the 16 bit value of the bus.
001145  001247        
001146  001248  func bus_SetPins("value"), 0;
001147  001249  // Syntax: bus_SetPins(value);
001148  001250  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001149  001251  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001150  001252  //       : and forces its state to a '1'. The state of its previous open drain
001151  001253  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001152  001254  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001153  001255  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001154  001256        
001155  001257  func bus_ClearPins("value"), 0;
001156  001258  // Syntax: bus_ClearPins(value);
001157  001259  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001158  001260  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001159  001261  //       : and forces its state to a '0. The state of its previous open drain
001160  001262  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001161  001263  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001162  001264  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001163  001265        
001164  001266  func bus_SetChangeInterrupt("function", "portmask"), 1;
001165  001267  // Syntax: bus_SetChangeInterrupt(value);
001166  001268  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001167  001269  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001168  001270  //       : A level change on that pin will cause "function" to be executed. If "function" is
001169  001271  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001170  001272  //       : Wakeup will always re-start code running in FLASHBANK_0
001171  001273  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001172  001274  //       : (Refer to 'port bit position masks')
001173  001275  //       : Once armed, "function" will only be executed once, it is necessary to
001174  001276  //       : re-arm for any further events.
001175  001277  //Returns: Return the current state of the pins that are selected in "portmask"
001176  001278  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001177  001279        
001178  001280  func bus_Write8("var"), 0;
001179  001281  // Syntax: bus_Write8(var);
001180  001282  // Usage : bus_Write8(arg1);
001181  001283  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001182  001284  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001183  001285  //       : LO for approx 50nsec then set back HI.
001184  001286  //       : The upper 8 bits of arg1 are ignored.
001185  001287  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001186  001288  //       : as must the bus pins to ensure BUS write integrity.
001187  001289  //       :
001188  001290  //       : BUS_0 is PA4
001189  001291  //       : BUS_1 is PA5
001190  001292  //       : BUS_2 is PA6
001191  001293  //       : BUS_3 is PA7
001192  001294  //       : BUS_4 is PA8
001193  001295  //       : BUS_5 is PA9
001194  001296  //       : BUS_6 is PA10
001195  001297  //       : BUS_7 is PA11
001196  001298        
001197  001299  func bus_Read8(), 1;
001198  001300  // Syntax: bus_Read();
001199  001301  // Usage : arg1 := bus_Read8();
001200  001302  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001201  001303  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001202  001304  //       : (the upper 8 bits being set to 0)
001203  001305  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001204  001306  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001205  001307  //       : as must the bus pins to ensure BUS read integrity.
001206  001308  //       :
001207  001309  //       : BUS_0 is PA4
001208  001310  //       : BUS_1 is PA5
001209  001311  //       : BUS_2 is PA6
001210  001312  //       : BUS_3 is PA7
001211  001313  //       : BUS_4 is PA8
001212  001314  //       : BUS_5 is PA9
001213  001315  //       : BUS_6 is PA10
001214  001316  //       : BUS_7 is PA11
001215  001317        
001216  001318  func __reserved13(), 0; // do not remove
001217  001319  func __reserved14(), 0; // do not remove
001218  001320  //------------------------------------------------------------------//
001219  001321  // Pin related constants                                            //
001220  001322  //------------------------------------------------------------------//
001221  001323        
001222  001324  // pin_Set(...) pin modes
001223  001325  #CONST
001224  001333  #END
001225  001334        
001226  001335        
001227  001336  // pin name             constant    connector H1 I/O Pin referencesnumbers
001228  001337  #CONST
001229  001357  #END
001230  001358        
001231  001359  // bit position masks
001232  001360  #CONST
001233  001377  #END
001234  001378        
001235  001379        
001236  001380        
001237  001381  //------------------------------------------------------------------//
001238  001382  //   Graphics Functions
001239  001383  //------------------------------------------------------------------//
001240  001384  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001241  001385  // Syntax: gfx_Set(mode, value);
001242  001386  // Usage : gfx_Set(arg1, arg2);
001243  001387  // Notes : Sets various graphics parameters used by other functions
001244  001388  //       : This allows the features to be set programatically with a
001245  001389  //       : single function call.It is strongly recommended to use the
001246  001390  //       : pre-defined constants rather than the mode numbers.
001247  001391  //       : NB:- Although it is often required to be able to set graphics
001248  001392  //       : functions with a single function call for graphics engine
001249  001393  //       : related functions, there is a complete set of single parameter
001250  001394  //       : shortcut functions that have exactly the same function as
001251  001395  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001252  001396  //       :
001253  001397  //       : mode = PEN_SIZE (mode 16)
001254  001398  //       : gfx_Set(PEN_SIZE, value);
001255  001399  //       : value = SOLID (value 0) rectangle and circle objects are solid
001256  001400  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001257  001401  //       : Sets the mode of the Pen used by most graphics objects
001258  001402  //       :
001259  001403  //       : mode = BACKGROUND_COLOUR (mode 17)
001260  001404  //       : gfx_Set(BACKGROUND_COLOUR, value);
001261  001405  //       : value = 0 to 0xFFFF, Black to White
001262  001406  //       : Sets the Background colour of the screen
001263  001407  //       :
001264  001408  //       : mode = OBJECT_COLOUR (mode 18)
001265  001409  //       : gfx_Set(OBJECT_COLOUR, value);
001266  001410  //       : value = 0 to 0xFFFF, Black to White
001267  001411  //       : Sets the Object colour used in various functions
001268  001412  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001269  001413  //       :
001270  001414  //       : mode = CLIPPING (mode 19)
001271  001415  //       : gfx_Set(CLIPPING, value);
001272  001416  //       : value = OFF (value 0) Clipping disabled
001273  001417  //       : value = ON (value 1) Clipping enabled
001274  001418  //       : Enables/Disables the Clipping feature
001275  001419  //       :
001276  001420  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001277  001421  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001278  001422  //       : value = 0 to 0xFFFF Black to White
001279  001423  //       : Sets Bitmap, Image or Animation Transparency Colour.
001280  001424  //       : NB not implemented
001281  001425  //       :
001282  001426  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001283  001427  //       : gfx_Set(5, value);
001284  001428  //       : value = OFF (value 0) Transparency disabled
001285  001429  //       : value = ON (value 1) Transparency enabled
001286  001430  //       : Enables/Disables the Transparency feature
001287  001431  //       : NB not implemented
001288  001432  //       :
001289  001433  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001290  001434  //       : gfx_Set(FRAME_DELAY, value);
001291  001435  //       : value = 0 to 65535 ms
001292  001436  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001293  001437  //       : over-ride the embedded frame delay of the clip. After the event,
001294  001438  //       : the setting will auto disable and if further inter-frame delays need
001295  001439  //       : overriding the setting must be re-issued.
001296  001440  //       :
001297  001441  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001298  001442  //       : gfx_Set(SCREEN_MODE, value);
001299  001443  //       : value = LANDSCAPE   (value 0)
001300  001444  //       : value = LANDSCAPE_R (value 1)
001301  001445  //       : value = PORTRAIT    (value 2)
001302  001446  //       : value = PORTRAIT_R  (value 3)
001303  001447  //       :
001304  001448  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001305  001449  //       : gfx_Set(OUTLINE_COLOUR, value);
001306  001450  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001307  001451  //       : Sets the filled Rectangle or Circle objects outline colour
001308  001452  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001309  001453  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001310  001454  //       :
001311  001455  //       : Only supports variable contrast for uOLED Modules
001312  001456  //       : mode = CONTRAST (mode 25) : Contrast
001313  001457  //       : gfx_Set(CONTRAST, value);
001314  001458  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001315  001459  //       : when contrast=0, display is placed in low power mode.
001316  001460  //       : This function should be called with contrast=0 when
001317  001461  //       : powering down the module.
001318  001462  //       :
001319  001463  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001320  001464  //       : gfx_Set(LINE_PATTERN, value);
001321  001465  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001322  001466  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001323  001467  //       : a value of 0 turns the feature off
001324  001468  //       :
001325  001469  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001326  001470  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001327  001471  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001328  001472  //       : NB not implemented, default is COLOUR16
001329  001473  //       :
001330  001474  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001331  001475  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001332  001476  //       : sets the button and slider objects bevel width
001333  001477  //       :
001334  001478  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001335  001479  //       : gfx_Set(BEVEL_SHADOW , 5);
001336  001480  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001337  001481  //       :
001338  001482  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001339  001483  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001340  001484  //       : sets the origin of drawn objects to a position other than 0,0
001341  001485  //       :
001342  001486  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001343  001487  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001344  001488  //       : sets the origin of drawn objects to a position other than 0,0
001345  001489        
001346  001490  //------------------------------------------------------------------------------
001347  001491  //gfx_Set() related constants
001348  001492  //------------------------------------------------------------------------------
001349  001493  #CONST
001350  001510  #END
001351  001511        
001352  001512        
001353  001513  func gfx_Cls(), 0;                    // clear the screen
001354  001514  // Syntax: gfx_Cls();
001355  001515  // Usage : gfx_Cls();
001356  001516  // Notes : Clears the screen with current background colour
001357  001517        
001358  001518  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001359  001519  // Syntax: gfx_MoveTo(x, y);
001360  001520  // Usage : gfx_MoveTo(arg1, arg2);
001361  001521  // Notes : Moves the origin to a new x,y position
001362  001522        
001363  001523  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001364  001524  // Syntax: gfx_MoveRel(x, y);
001365  001525  // Usage : gfx_MoveRel(arg1, arg2);
001366  001526  // Notes : Moves the origin to a new x,y position
001367  001527  //       : relative to the current origing
001368  001528        
001369  001529  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001370  001530  // Syntax: gfx_LineTo(x1, y1);
001371  001531  // Usage : gfx_LineTo(arg1, arg2);
001372  001532  // Notes : Draws a Line from the origin x,y to x1,y1.
001373  001533  //       : The new origin is then set to x1, y1. Line colour needs
001374  001534  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001375  001535        
001376  001536  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001377  001537  // Syntax: gfx_LineRel(x1, y1);
001378  001538  // Usage : gfx_LineRel(arg1, arg2);
001379  001539  // Notes : Draws a Line from the origin x,y to x1,y1.
001380  001540  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001381  001541  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001382  001542        
001383  001543  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001384  001544  // Syntax: gfx_Line(x1, x2, y2, colr);
001385  001545  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001386  001546  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001387  001547        
001388  001548  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001389  001549  // Syntax: gfx_Line(x1, x2, y, colr);
001390  001550  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001391  001551  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001392  001552        
001393  001553  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001394  001554  // Syntax: gfx_Line(y1, y2, x, colr);
001395  001555  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001396  001556  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001397  001557        
001398  001558  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001399  001559  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001400  001560  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001402  001562  //       : bottom corner (x2,y2) on the screen.
001403  001563        
001404  001564  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001405  001565  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001406  001566  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001407  001567  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001408  001568  //       : bottom corner (x2,y2) on the screen.
001409  001569        
001410  001570  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001411  001571  // Syntax: gfx_Circle(x, y, rad, colr);
001412  001572  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001413  001573  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001414  001574        
001415  001575  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001416  001576  // Syntax: gfx_Circle(x, y, rad, colr);
001417  001577  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001418  001578  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001419  001579        
001420  001580  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001421  001581  // Syntax: gfx_PutPixel(x, y, colr);
001422  001582  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001423  001583  // Notes : Plots a coloured pixel on the screen at x,y location
001424  001584        
001425  001585  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001426  001586  // Syntax: gfx_GetPixel(x, y);
001427  001587  // Usage : var := gfx_GetPixel(arg1, arg2);
001428  001588  // Notes : Reads and returns the colour value of a pixel at location x,y
001429  001589        
001430  001590  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001431  001591  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001432  001592  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001433  001593  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001434  001594  //       : Vertices must be specified in an anti-clockwise fashion
001435  001595        
001436  001596  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001437  001597  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001438  001598  // Usage : gfx_OrbitInit(&arg1, &arg2);
001439  001599  // Notes : Sets up the Orbit function parameters.
001440  001600  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001441  001601  //       : variables that get updated after calling gfx_Orbit(,,) function.
001442  001602  //       : The coordiantaes are calculated relative to the origin
001443  001603  //       : obtained by using the gfx_MoveTo(x, y) function.
001444  001604        
001445  001605  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001446  001606  // Syntax: gfx_Orbit(angle, distance);
001447  001607  // Usage : gfx_Orbit(arg1, arg2);
001448  001608  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001449  001609  //       : only known parameters are the angle and the distance from the current origin.
001450  001610        
001451  001611  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001452  001612  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001453  001613  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001454  001614  // Notes : This function is very similar to the Ploygon function
001455  001615  //       : with the exception of the 1st and the last vertices not joined.
001456  001616        
001457  001617  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001458  001618  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001459  001619  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001460  001620  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001461  001621  //       : Vertices must be minimum of 3 and can be specified in any fashion
001462  001622        
001463  001623  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001464  001624  // Syntax: gfx_Dot();
001465  001625  // Usage : gfx_Dot();
001466  001626  // Notes : Places a coloured dot at the origin
001467  001627        
001468  001628        
001469  001629  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001470  001630  // Syntax: gfx_Bullet();
001471  001631  // Usage : gfx_Bullet();
001472  001632  // Notes : Places a coloured circle at the origin
001473  001633  //       : filled or unfilled state is controlled by PenSize
001474  001634        
001475  001635  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001476  001636  // Syntax: gfx_IncX();
001477  001637  // Usage : var := gfx_IncX();
001478  001638  // Notes : Increments the x coordinate of the origin
001479  001639        
001480  001640  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001481  001641  // Syntax: gfx_IncY();
001482  001642  // Usage : var := gfx_IncY();
001483  001643  // Notes : Increments the y coordinate of the origin
001484  001644        
001485  001645  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001486  001646  // Syntax: gfx_BoxTo(x1, y1);
001487  001647  // Usage : gfx_BoxTo(arg1, arg2);
001488  001648  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001489  001649  //       : The new origin is then set to x1,y1. Rectangle colour needs
001490  001650  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001491  001651  //       : and the PenSize setting determines if Box is solid or outline.
001492  001652        
001493  001653  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001494  001654  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001495  001655  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001496  001656  // Notes : Specifies a clipping window region on the screen such that any objects
001497  001657  //       : and text placed onto the screen will be clipped and displayed only
001498  001658  //       : within that region. For the clipping window to take effect, "Clipping"
001499  001659  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001500  001660        
001501  001661        
001502  001662  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001503  001663  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001504  001664  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001505  001665  // *Notes:
001506  001666        
001507  001667  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001508  001668  // Syntax: gfx_SetClipRegion();
001509  001669  // Usage : var := gfx_SetClipRegion();
001510  001670  // *Notes:
001511  001671        
001512  001672  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001513  001673  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001514  001674  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001515  001675  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001516  001676  //       : with xradius = xrad and yradius = yrad.
001517  001677  //       : if PenSize = 0 Ellipse is Solid
001518  001678  //       : if PenSize = 1 Ellipse is Outline
001519  001679        
001520  001680        
001521  001681  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001522  001682  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001523  001683  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001524  001684  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001525  001685  //       : with xradius = xrad and yradius = yrad.
001526  001686        
001527  001687        
001528  001688  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001529  001689  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001530  001690  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001531  001691  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001532  001692  //       : x,y arguments (top left corner). The size of the button depends on
001533  001693  //       : the font, width, height and length of the text.
001534  001694  //       : The button appearance will depend on the state parameter setting:
001535  001695  //       :         state = 0 : Button Pressed
001536  001696  //       :         state = 1 : Button Raised
001537  001697  //       : The button is automatically sized, determined by text.
001538  001698        
001539  001699        
001540  001700  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001541  001701  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001542  001702  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001543  001703  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001544  001704  //       : x,y arguments (top left corner). The size of the button is defined by the width
001545  001705  //       : and height parameters. The text is centered within those bounds.
001546  001706  //       : The button appearance will depend on the state parameter setting:
001547  001707  //       :         state = 0 : Button Pressed
001548  001708  //       :         state = 1 : Button Raised
001549  001709  //       : The button has square corners.
001550  001710        
001551  001711  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001552  001712  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001553  001713  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001554  001714  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001555  001715  //       : x,y arguments (top left corner). The size of the button is defined by the width
001556  001716  //       : and height parameters. The text is centered within those bounds.
001557  001717  //       : The button appearance will depend on the state parameter setting:
001558  001718  //       :         state = 0 : Button Pressed
001559  001719  //       :         state = 1 : Button Raised
001560  001720  //       : The button has rounded corners depending upon gfx_BevelRadius.
001561  001721        
001562  001722  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001563  001723  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001564  001724  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001565  001725  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001566  001726  //       : The size of the button is defined by the width and height parameters.
001567  001727  //       : The text is to the right of the checkbox and truncated if necessary.
001568  001728  //       : The check appearance will depend on the state parameter setting:
001569  001729  //       :         state = 0 = CHECKED    : Checkbox Checked
001570  001730  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001571  001731        
001572  001732  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001573  001733  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001574  001734  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001575  001735  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001576  001736  //       : The size of the button is defined by the width and height parameters.
001577  001737  //       : The text is to the right of the radiobutton and truncated if necessary.
001578  001738  //       : The check appearance will depend on the state parameter setting:
001579  001739  //       :         state = 0 = CHECKED    : Radiobutton Checked
001580  001740  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001581  001741        
001582  001742  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001583  001743  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001584  001744  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001585  001745  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001586  001746  //       : Slider parameters are as follows:
001587  001747  //       :         mode = 0 : Slider recessed
001588  001748  //       :         mode = 1 : Slider raised
001589  001749  //       :         x1, y1 = top left corner
001590  001750  //       :         x2, y2 = bottom right corner
001591  001751  //       :         scale = n : sets the full scale range from 0 to n
001592  001752  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001593  001753  //returns: scaled value of thumb position
001594  001754        
001595  001755        
001596  001756        
001597  001757        
001598  001758  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001599  001759  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001600  001760  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001601  001761  // Notes : Draws a panel (groupbox) at screen location defined by
001602  001762  //       : x, y, width and height with colour "colour".
001603  001763  //       :         state = 0 : sunken
001604  001764  //       :         state = 1 : raised
001605  001765  //       :         state = 2 : hide (draw object in background colour)
001606  001766  //returns: nothing
001607  001767        
001608  001768        
001609  001769        
001610  001770  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001611  001771  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001612  001772  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001613  001773  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001614  001774  //       : Slider parameters are as follows:
001615  001775  //       :         mode = 0 : Slider recessed
001616  001776  //       :         mode = 1 : Slider raised
001617  001777  //       :         x1, y1 = top left corner
001618  001778  //       :         x2, y2 = bottom right corner
001619  001779  //       :         scale = n : sets the full scale range from 0 to n
001620  001780  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001621  001781  //returns: scaled value of thumb position
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001626  001786  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001627  001787  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001628  001788  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001629  001789  //       : and pastes it to another location determined by xd, yd.
001630  001790        
001631  001791  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001632  001792  // Syntax: gfx_RGBto565(red, green, blue);
001633  001793  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001634  001794  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001635  001795        
001636  001796  func gfx_332to565("COLOUR8BIT"), 1;
001637  001797  // Syntax: gfx_332to565(colour);
001638  001798  // Usage : gfx_332to565(arg);
001639  001799  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001640  001800        
001641  001801  func gfx_565to332("COLOUR16BIT"), 1;
001642  001802  // Syntax: gfx_565to332(colour);
001643  001803  // Usage : clor332 := gfx_565to332(arg);
001644  001804  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001645  001805        
001646  001806  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001647  001807  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001648  001808  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001649  001809  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001650  001810  //       : Vertices must be specified in an anti-clockwise fashion
001651  001811        
001652  001812        
001653  001813  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001654  001814  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001655  001815  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001656  001816  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001657  001817  //       : Vertices must be minimum of 3 and can be specified in any fashion
001658  001818        
001659  001819        
001660  001820  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001661  001821  // Syntax: gfx_Offset(x, y);
001662  001822  // Usage : gfx_Offset(arg1, arg2);
001663  001823  // Notes : Set the screen offset
001664  001824        
001665  001825        
001666  001826        
001667  001827  func gfx_FillPattern("patptr", "mode"), 1;
001668  001828  // Syntax  : gfx_FillPattern(patternpointer);
001669  001829  // Usage   : gfx_FillPattern(PTN_BRICKS);
001670  001830  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001671  001831  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001672  001832  //         : Rendering is turned off with gfx_FillPattern(0);
001673  001833  //         : or gfx_FillPattern(OFF);
001674  001834  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001675  001835  //         : mode, the current screen colour is used for the 'off'
001676  001836  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001677  001837  //         : gfx_FillPattern affects all filled object, including polygons.
001678  001838  //         : There are 32 builtin patterns, these are obtained using the
001679  001839  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001680  001840  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001681  001841  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001682  001842  //         : other value is assumed to be a pointer to a users 8 byte
001683  001843  //         : block pattern.
001684  001844  // Returns : returns the handle of the previous pattern.
001685  001845        
001686  001846        
001687  001847  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001688  001848  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001689  001849  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001690  001850  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001691  001851  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001692  001852  //         : to shift a pie chart piece away from the centrepoint.
001693  001853  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001694  001854  //         : or gfx_FillPattern(OFF); for no fill pattern.
001695  001855  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001696  001856  //         : "mode" has the following effect
001697  001857  //         :   if mode = 0, no outline
001698  001858  //         :   if mode = 1, outer circumference line (using current object colour)
001699  001859  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001700  001860  // Returns : nothing.
001701  001861        
001702  001862        
001703  001863  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001704  001864  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001705  001865  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001706  001866  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001707  001867  //         : and ending at "endangle". Colour is determined by curent object colour.
001708  001868  //         : Step is the stepping angle increment for the fineness of the arc.
001709  001869  //         : "mode" has the following effect
001710  001870  //         :   if mode = 0, outer circumference line only
001711  001871  //         :   if mode = 1, outer circumference and lines back to cy:cy
001712  001872  // Returns : nothing.
001713  001873        
001714  001874        
001715  001875  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001716  001876  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001717  001877  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001718  001878  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001719  001879  //         : determined by "radius".
001720  001880  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001721  001881  // Returns : nothing.
001722  001882        
001723  001883        
001724  001884  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001725  001885  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001726  001886  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001727  001887  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001728  001888  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001729  001889  //         : If "radius1" is zero, the inner rectangle will have square corners.
001730  001890  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001731  001891  // Returns : nothing.
001732  001892        
001733  001893        
001734  001894  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001735  001895  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001736  001896  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001737  001897  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001738  001898  //         : to be used for rounded panels, rounded buttons, circular buttons.
001739  001899  //         :         state = 0 : sunken
001740  001900  //         :         state = 1 : raised
001741  001901  //         :         state = 2 : hide (draw object in background colour)
001742  001902  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001743  001903  // Returns : nothing.
001744  001904        
001745  001905        
001746  001906  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001747  001907  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001748  001908  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001749  001909  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001750  001910  //         : "style" specifies the drawing mode
001751  001911  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001752  001912  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001753  001913  //         :     GRAD_UP           // gradient changes in the vertical direction
001754  001914  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001755  001915  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001756  001916  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001757  001917  // Returns : nothing.
001758  001918        
001759  001919        
001760  001920  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001761  001921  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001762  001922  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001763  001923  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001764  001924  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001765  001925  //         : to be used for rounded panels, rounded buttons, circular buttons.
001766  001926  //         : "style" specifies the drawing mode
001767  001927  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001768  001928  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001769  001929  //         :     GRAD_UP           // gradient changes in the vertical direction
001770  001930  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001771  001931  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001772  001932  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001773  001933  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001774  001934  // Returns : nothing.
001775  001935        
001776  001936        
001777  001937  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001778  001938  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001779  001939  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001780  001940  // Notes   : reads an arbitrary line from the display to an array.
001781  001941  //         : If "ptr" is 0, the correctly sized array is created, in which case
001782  001942  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001783  001943  //         : is expected to point to a correctly sized array.
001784  001944  //         : NB if an array is supplied, its size must be large enough, and may
001785  001945  //         : be calculated:-
001786  001946  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001787  001947  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001788  001948  // Returns : A pointer to the created aray, or the users array.
001789  001949  //         : In the case of ptr=0, if there is insufficient
001790  001950  //         : memory to create the array, zero is returned
001791  001951        
001792  001952        
001793  001953  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001794  001954  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001795  001955  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001796  001956  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001797  001957  //         : "ptr" points to the array to be written.
001798  001958  // Returns : nothing
001799  001959        
001800  001960        
001801  001961  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001802  001962  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001803  001963  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001804  001964  // Notes   : reads an arbitrary rectangular area from the display to an array.
001805  001965  //         : If "ptr" is 0, the correctly sized array is created, in which case
001806  001966  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001807  001967  //         : is expected to point to a correctly sized array.
001808  001968  //         : NB if an array is supplied, its size must be large enough, and may
001809  001969  //         : be calculated:-
001810  001970  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001811  001971  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001812  001972  // Returns : A pointer to the created aray, or the users array.
001813  001973  //         : In the case of ptr=0, if there is insufficient
001814  001974  //         : memory to create the array, zero is returned
001815  001975        
001816  001976        
001817  001977  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001818  001978  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001819  001979  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001820  001980  // Notes   : "ptr" points to the array to be written.
001821  001981  // Returns : nothing
001822  001982        
001823  001983        
001824  001984  func gfx_Get("mode"), 1;
001825  001985  // Syntax: gfx_Get(mode);
001826  001986  // Usage : arg1 := gfx_Get(arg);
001827  001987  // Notes : Returns various parameters to caller
001828  001988  //       :
001829  001989  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001830  001990  //       : var := gfx_Get(X_MAX);
001831  001991  //       : Returns the maximum horizontal value of the display
001832  001992  //       :
001833  001993  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001834  001994  //       : var := gfx_Get(Y_MAX);
001835  001995  //       : Returns the maximum vertical value of the display
001836  001996  //       :
001837  001997  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001838  001998  //       : var := gfx_Get(LEFT_POS);
001839  001999  //       : Returns the left location of the last drawn object
001840  002000  //       : such as a slider or button or an image/video
001841  002001  //       :
001842  002002  //       : mode = TOP_POS (mode 3) : Top location of Object
001843  002003  //       : var := gfx_Get(TOP_POS);
001844  002004  //       : Returns the top location of the last drawn object
001845  002005  //       : such as a slider or button or an image/video
001846  002006  //       :
001847  002007  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001848  002008  //       : var := gfx_Get(RIGHT_POS);
001849  002009  //       : Returns the right location of the last drawn object
001850  002010  //       : such as a slider or button or an image/video
001851  002011  //       :
001852  002012  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001853  002013  //       : var := gfx_Get(BOTTOM_POS );
001854  002014  //       : Returns the bottom location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = X_ORG (mode 6) : get current internal X position
001858  002018  //       : var := gfx_Get(X_ORG);
001859  002019  //       : Returns the internal X position that was set with
001860  002020  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001861  002021  //       :
001862  002022  //       : mode = Y_ORG (mode 7) : get current internal Y position
001863  002023  //       : var := gfx_Get(Y_ORG);
001864  002024  //       : Returns the internal X position that was set with
001865  002025  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001866  002026  //       :
001867  002027        
001868  002028        
001869  002029  //------------------------------------------------------------------//
001870  002030  // Single parameter short-cuts                                      //
001871  002031  // for the gfx_Set functions                                        //
001872  002032  // These functions return the existing value before                 //
001873  002033  // the change is made.                                              //
001874  002034  //------------------------------------------------------------------//
001875  002035  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001876  002036  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001877  002037  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001878  002038  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001879  002039  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001880  002040  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001881  002041  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001882  002042  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001883  002043  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001884  002044  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001885  002045  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001886  002046  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001887  002047  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001888  002048  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001889  002049  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001890  002050  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001891  002051        
001892  002052        
001893  002053  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001894  002054  // Syntax   : gfx_PointWithinBox(x, y, rect);
001895  002055  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001896  002056  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001897  002057  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001898  002058  // returns  : Returns true if last touch co-ordinates are within the box test area.
001899  002059        
001900  002060        
001901  002061  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001902  002062  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001903  002063  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001904  002064  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001905  002065  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001906  002066  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001907  002067        
001908  002068        
001909  002069  func __reserved17(), 0; // do not remove
001910  002070  func __reserved18(), 0; // do not remove
001911  002071  func __reserved19(), 0; // do not remove
001912  002072  func __reserved20(), 0; // do not remove
001913  002073  func __reserved21(), 0; // do not remove
001914  002074  func __reserved22(), 0; // do not remove
001915  002075        
001916  002076        
001917  002077  // built in fill pattern constants for function gfx_FillPattern
001918  002078  #CONST
001919  002111  #END
001920  002112        
001921  002113  #CONST
001922  002146  #END
001923  002147        
001924  002148  //------------------------------------------------------------------//
001925  002149  //     gradient control constants                                   //
001926  002150  //------------------------------------------------------------------//
001927  002151  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001928  002151  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001929  002152  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001930  002152  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001931  002153  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001932  002153  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001933  002154  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001934  002154  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001935  002155  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001936  002155  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001937  002156  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001938  002156  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001939  002157        
001940  002158        
001941  002159        
001942  002160        
001943  002161  //------------------------------------------------------------------//
001944  002162  // uSD/FLASH Function Prototypes                                    //
001945  002163  //------------------------------------------------------------------//
001946  002164  func media_Video("x", "y"), 0;                      // display movie at position x y
001947  002165  // Syntax: media_Video(x, y);
001948  002166  // Usage : media_Video(arg1, arg2);
001949  002167  // Notes : Play a Video/Animation clip from the uSD card at screen location
001950  002168  //       : specified by x,y (top left corner). The location of the clip in the
001951  002169  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001952  002170        
001953  002171  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001954  002172  // Syntax: media_VideoFrame(Frame_number);
001955  002173  // Usage : arg1 := media_VideoFrame();
001956  002174  // Notes : After a pointer to a valid video has been set with media_SetSector,
001957  002175  //       : calling this function shows each fram sequentially, returning
001958  002176  //       : the number of frames remaining. The position of the image is
001959  002177  //     : at the current origin as set with gfx_MoveTo(...);
001960  002178        
001961  002179  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001962  002180  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001963  002181  // Usage : media_SetAdd(arg1, arg2);
001964  002182  // Notes : Set uSD internal Address pointer for bytewise access
001965  002183        
001966  002184  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001967  002185  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001968  002186  // Usage : media_SetSector(arg1, arg2);
001969  002187  // Notes : Set uSD internal Sector pointer for sector block access
001970  002188        
001971  002189  func media_RdSector("*destination"), 1;
001972  002190  // Syntax: media_RdSector(*destination);
001973  002191  // Usage : media_RdSector(rdblock);
001974  002192  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001975  002193  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001976  002194  //       : After the read the Sector pointer is automatically incremented by 1.
001977  002195  //       : Returns TRUE if uSD response was TRUE
001978  002196        
001979  002197  func media_WrSector("*source"), 1;
001980  002198  // Syntax: media_WrSector(*source);
001981  002199  // Usage : media_WrSector(wrblock);
001982  002200  // Notes : Writes 512 bytes (256 words) from a source memory block
001983  002201  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001984  002202  //       : pointer is automatically incremented by 1.
001985  002203  //       : Returns TRUE if uSD response was TRUE
001986  002204        
001987  002205  func media_ReadByte(), 1;                // read a byte at the current stream position
001988  002206  // Syntax: media_RdByte();
001989  002207  // Usage : var := media_RdByte();
001990  002208  // Notes : Reads and Returns a single byte of data from the
001991  002209  //       : uSD card pointed to by the internal Address pointer.
001992  002210  //       : After the read the Address pointer is automatically
001993  002211  //       : incremented by 1.
001994  002212        
001995  002213  func media_ReadWord(), 1;                // read a word at the current stream position
001996  002214  // Syntax: media_ReadWord();
001997  002215  // Usage : var := media_ReadWord();
001998  002216  // *Notes : Reads and Returns a single word of data from the
001999  002217  //       : uSD card pointed to by the internal Address pointer.
002000  002218  //       : After the read the Address pointer is automatically
002001  002219  //       : incremented by 2.
002002  002220        
002003  002221  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002004  002222  // Syntax: media_WriteByte(arg1);
002005  002223  // Usage : var := media_WriteByte(arg1);
002006  002224  // *Notes : Writes and Returns xxxxx
002007  002225  //       : After the write the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_WriteWord("word"), 1;            // write a word to the current stream position
002011  002229  // Syntax: media_WriteWord(arg1);
002012  002230  // Usage : var := media_WriteWord(arg1);
002013  002231  // *Notes : Writes and Returns xxxxx
002014  002232  //       : After the write the Address pointer is automatically
002015  002233  //       : incremented by 2.
002016  002234        
002017  002235  func media_Image("x", "y"), 0;            // display image at position x y
002018  002236  // Syntax: media_Image(x, y);
002019  002237  // Usage : media_Image(arg1, arg2);
002020  002238  // Notes : Display an image from the uSD card at screen location
002021  002239  //       : specified by x,y (top left corner). The location of the
002022  002240  //       : Image in the uSD card must be specified by
002023  002241  //       : media_setSector(Image_Sector_Add) function.
002024  002242        
002025  002243  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002026  002244  // Syntax: media_Flush();
002027  002245  // Usage : var := media_Flush();
002028  002246  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002029  002247  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002030  002248        
002031  002249  func media_Init(), 1;                    // initialize uSD card
002032  002250  // Usage : media_Init();
002033  002251  // Notes : Initialise uSD CARD
002034  002252  //       : Response: 0 = No Card
002035  002253  //       :           1 = Card Initialised
002036  002254        
002037  002255  func __reserved23(), 0; // do not remove
002038  002256  func __reserved24(), 0; // do not remove
002039  002257  func __reserved25(), 0; // do not remove
002040  002258  func __reserved26(), 0; // do not remove
002041  002259        
002042  002260  //==============================================//
002043  002261  // Communications Function Prototypes           //
002044  002262  // NB Primary COM port has fixed pins,          //
002045  002263  // COM1, COM2 and COM3 must have pins assigned. //
002046  002264  //==============================================//
002047  002265  func setbaud("baudnum"), 0;            // set baud rate of COM0
002048  002266  // Syntax: setbaud(baud_number);
002049  002267  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002050  002268  // *Notes : argument specifies the baud rate using pre-defined constant.
002051  002269  //       : The pre-defined constant is a value of 0-19 , and internally
002052  002270  //       : this is used as a table pointer to get the baud rate divisor
002053  002271  //       : value for one of the 20 selected baud rates, control is then
002054  002272  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002055  002273  //       : The pre-defined constants equate to a value of 0-19.
002056  002274  //       : If a value other than 0-19 is used, a run time error (eror 25)
002057  002275  //       : will occur.
002058  002276        
002059  002277  // baud divisor rates for legacy setbaud(n);
002060  002278  #CONST
002061  002300  #END
002062  002301        
002063  002302        
002064  002303  func com_SetBaud("comport","baudrate/10"), 1;
002065  002304  // Syntax: com_SetBaud("comport","baudrate/10");
002066  002305  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002067  002306  // Notes : sets to any viable baud rate from 160 to 655350
002068  002307  // return true if baud rate was acceptable
002069  002308        
002070  002309        
002071  002310  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002072  002311  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002073  002312  // Notes : Selects the hardware pin for COM1 receive line.
002074  002313  //       : Note that only a single pin can be mapped to COM1 RX.
002075  002314  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002076  002315  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002077  002316  //       : If the pin argument is 0 the function has no effect
002078  002317  //       : The pin is automatically set to an input.
002079  002318  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002080  002319  //       : it is necessary to configure the input pin first, eg
002081  002320  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002082  002321  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002083  002322  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002084  002323        
002085  002324  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002086  002325  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002087  002326  // Notes : Selects the hardware pin for COM2 receive line.
002088  002327  //       : Note that only a single pin can be mapped to COM2 RX.
002089  002328  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002090  002329  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002091  002330  //       : If the pin argument is 0 the function has no effect
002092  002331  //       : The pin is automatically set to an input.
002093  002332  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002094  002333  //       : it is necessary to configure the input pin first, eg
002095  002334  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002096  002335  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002097  002336  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002098  002337        
002099  002338  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002100  002339  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002101  002340  // Notes : Selects the hardware pin for COM3 receive line.
002102  002341  //       : Note that only a single pin can be mapped to COM3 RX.
002103  002342  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002104  002343  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002105  002344  //       : If the pin argument is 0 the function has no effect
002106  002345  //       : The pin is automatically set to an input.
002107  002346  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002108  002347  //       : it is necessary to configure the input pin first, eg
002109  002348  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002110  002349  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002111  002350  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002112  002351        
002113  002352        
002114  002353  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002115  002354  // Syntax: COM1_TX_pin(pin);
002116  002355  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002117  002356  // Notes : Select the hardware pin for COMx transmit line.
002118  002357  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002119  002358  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002120  002359  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002121  002360  //       : The pin is automatically set to an output.
002122  002361  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002123  002362        
002124  002363  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002125  002364  // Syntax: COM2_TX_pin(pin);
002126  002365  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002127  002366  // Notes : Select the hardware pin for COMx transmit line.
002128  002367  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002129  002368  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002130  002369  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002131  002370  //       : The pin is automatically set to an output.
002132  002371  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002133  002372        
002134  002373  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002135  002374  // Syntax: COM3_TX_pin(pin);
002136  002375  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002137  002376  // Notes : Select the hardware pin for COMx transmit line.
002138  002377  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002139  002378  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002140  002379  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002141  002380  //       : The pin is automatically set to an output.
002142  002381  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002143  002382        
002144  002383  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002145  002384  // Syntax: com_Init(buffer, bufsize, qualifier);
002146  002385  // Usage1: com_Init(mybuf, 20, 0);
002147  002386  // Usage2: com_Init(mybuf, 20, ':');
002148  002387  // Notes : initialize a serial capture buffer for the comms input
002149  002388  //       : The program must declare a var array as a circular buffer.
002150  002389  //       : Usage1 declares a circular buffer which will continually
002151  002390  //       : buffer characters.
002152  002391  //       : Usage2 must receive ':' before any characters will
002153  002392  //       : accumulate in the buffer.
002154  002393        
002155  002394  func com1_Init("buf","bufsize","qualifier"), 0;
002156  002395  // Syntax: com1_Init(buffer, bufsize, qualifier);
002157  002396  // Usage1: com1_Init(mybuf, 20, 0);
002158  002397  // Usage2: com1_Init(mybuf, 20, ':');
002159  002398  // Notes : initialize a serial capture buffer for the comms input
002160  002399  //       : The program must declare a var array as a circular buffer.
002161  002400  //       : Usage1 declares a circular buffer which will continually
002162  002401  //       : buffer characters.
002163  002402  //       : Usage2 must receive ':' before any characters will
002164  002403  //       : accumulate in the buffer.
002165  002404        
002166  002405  func com2_Init("buf","bufsize","qualifier"), 0;
002167  002406  // Syntax: com2_Init(buffer, bufsize, qualifier);
002168  002407  // Usage1: com2_Init(mybuf, 20, 0);
002169  002408  // Usage2: com2_Init(mybuf, 20, ':');
002170  002409  // Notes : initialize a serial capture buffer for the comms input
002171  002410  //       : The program must declare a var array as a circular buffer.
002172  002411  //       : Usage1 declares a circular buffer which will continually
002173  002412  //       : buffer characters.
002174  002413  //       : Usage2 must receive ':' before any characters will
002175  002414  //       : accumulate in the buffer.
002176  002415        
002177  002416  func com3_Init("buf","bufsize","qualifier"), 0;
002178  002417  // Syntax: com3_Init(buffer, bufsize, qualifier);
002179  002418  // Usage1: com3_Init(mybuf, 20, 0);
002180  002419  // Usage2: com3_Init(mybuf, 20, ':');
002181  002420  // Notes : initialize a serial capture buffer for the comms input
002182  002421  //       : The program must declare a var array as a circular buffer.
002183  002422  //       : Usage1 declares a circular buffer which will continually
002184  002423  //       : buffer characters.
002185  002424  //       : Usage2 must receive ':' before any characters will
002186  002425  //       : accumulate in the buffer.
002187  002426        
002188  002427        
002189  002428  func serin(), 1;                // read a byte from primary com port COM0
002190  002429  // Syntax: serin();
002191  002430  // Usage : char := serin();
002192  002431  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002193  002432  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002194  002433  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002195  002434  //     : The baud rate can be changed under program control by using the setbaud(...)
002196  002435  //     : or the com_SetBaud(...) function.
002197  002436  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002198  002437  //     : serin may be buffered (refer to com_Init function above)
002199  002438  //     : Returns: -1 if no character is available
002200  002439  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002201  002440  //     : Returns: positive value 0 to 255 for a valid character received
002202  002441        
002203  002442  func serin1(), 1;
002204  002443  // Syntax: serinx();
002205  002444  // Usage : char := serinx();
002206  002445  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002207  002446  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002208  002447  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002209  002448  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002210  002449  //     : serinx may be buffered (refer to comx_Init function above)
002211  002450  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002212  002451  //     : Returns: -1 if no character is available
002213  002452  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002214  002453  //     : Returns: positive value 0 to 255 for a valid character received
002215  002454        
002216  002455  func serin2(), 1;
002217  002456  // Syntax: serinx();
002218  002457  // Usage : char := serinx();
002219  002458  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002220  002459  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002221  002460  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002222  002461  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002223  002462  //     : serinx may be buffered (refer to comx_Init function above)
002224  002463  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002225  002464  //     : Returns: -1 if no character is available
002226  002465  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002227  002466  //     : Returns: positive value 0 to 255 for a valid character received
002228  002467        
002229  002468  func serin3(), 1;
002230  002469  // Syntax: serinx();
002231  002470  // Usage : char := serinx();
002232  002471  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002233  002472  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002234  002473  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002235  002474  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002236  002475  //     : serinx may be buffered (refer to comx_Init function above)
002237  002476  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002238  002477  //     : Returns: -1 if no character is available
002239  002478  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002240  002479  //     : Returns: positive value 0 to 255 for a valid character received
002241  002480        
002242  002481  func serout("char"), 0;                // write a byte to COM0
002243  002482  // Syntax: serout1("char");
002244  002483  // Usage : serout1(ch);
002245  002484  // Notes : send character to COM0
002246  002485        
002247  002486  func serout1("char"), 0;
002248  002487  // Syntax: seroutx("char");
002249  002488  // Usage : serout1(ch);
002250  002489  // Notes : send character to COMx
002251  002490        
002252  002491  func serout2("char"), 0;
002253  002492  // Syntax: seroutx("char");
002254  002493  // Usage : serout1(ch);
002255  002494  // Notes : send character to COMx
002256  002495        
002257  002496  func serout3("char"), 0;
002258  002497  // Syntax: seroutx("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COMx
002261  002500        
002262  002501  func com_Reset(), 0;                 // reset the comms receiver
002263  002502  // Syntax: com_Reset();
002264  002503  // Usage : com_Reset();
002265  002504  // Notes : reset comms to default polled mode
002266  002505        
002267  002506  func com1_Reset(), 0;
002268  002507  // Syntax: com_Reset();
002269  002508  // Usage : com_Reset();
002270  002509  // Notes : reset comms to default polled mode
002271  002510        
002272  002511  func com2_Reset(), 0;
002273  002512  // Syntax: com_Reset();
002274  002513  // Usage : com_Reset();
002275  002514  // Notes : reset comms to default polled mode
002276  002515        
002277  002516  func com3_Reset(), 0;
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com_Count(), 1;                // return count of characters in receive buffer
002283  002522  // Syntax: com_Count();
002284  002523  // Usage : arg := com_Count();
002285  002524  // Notes : return count of buffered characters in buffer attachment
002286  002525        
002287  002526  func com1_Count(), 1;
002288  002527  // Syntax: com_Count();
002289  002528  // Usage : arg := com_Count();
002290  002529  // Notes : return count of buffered characters in buffer attachment
002291  002530        
002292  002531  func com2_Count(), 1;
002293  002532  // Syntax: com_Count();
002294  002533  // Usage : arg := com_Count();
002295  002534  // Notes : return count of buffered characters in buffer attachment
002296  002535        
002297  002536  func com3_Count(), 1;
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002303  002542  // Syntax: com_Full();
002304  002543  // Usage : if (com_Full() ,,,, go read buffer;
002305  002544  // Notes : return true if buffer full (not necessarily an error if
002306  002545  //       : buffer is sized to a packet size)
002307  002546        
002308  002547  func com1_Full(), 1;
002309  002548  // Syntax: com_Full();
002310  002549  // Usage : if (com_Full() ,,,, go read buffer;
002311  002550  // Notes : return true if buffer full (not necessarily an error if
002312  002551  //       : buffer is sized to a packet size)
002313  002552        
002314  002553  func com2_Full(), 1;
002315  002554  // Syntax: com_Full();
002316  002555  // Usage : if (com_Full() ,,,, go read buffer;
002317  002556  // Notes : return true if buffer full (not necessarily an error if
002318  002557  //       : buffer is sized to a packet size)
002319  002558        
002320  002559  func com3_Full(), 1;
002321  002560  // Syntax: com_Full();
002322  002561  // Usage : if (com_Full() ,,,, go read buffer;
002323  002562  // Notes : return true if buffer full (not necessarily an error if
002324  002563  //       : buffer is sized to a packet size)
002325  002564        
002326  002565  func com_Error(), 1;                // return comms errors comms error occurred
002327  002566  // Syntax: comx_Error();
002328  002567  // Usage : if (com_Error() ) ...... take recovery action;
002329  002568  // Notes : return non zero if any errors low level comms errors occured
002330  002569  // returns :
002331  002570  // bit0 = Receiver Overflow Error
002332  002571  // bit1 = Receiver Framing Error
002333  002572  // bit2 = Transmit Buffer Overflow
002334  002573        
002335  002574  func com1_Error(), 1;
002336  002575  // Syntax: comx_Error();
002337  002576  // Usage : if (com_Error() ) ...... take recovery action;
002338  002577  // Notes : return non zero if any errors low level comms errors occured
002339  002578  // returns :
002340  002579  // bit0 = Receiver Overflow Error
002341  002580  // bit1 = Receiver Framing Error
002342  002581  // bit2 = Transmit Buffer Overflow
002343  002582        
002344  002583  func com2_Error(), 1;
002345  002584  // Syntax: comx_Error();
002346  002585  // Usage : if (com_Error() ) ...... take recovery action;
002347  002586  // Notes : return non zero if any errors low level comms errors occured
002348  002587  // returns :
002349  002588  // bit0 = Receiver Overflow Error
002350  002589  // bit1 = Receiver Framing Error
002351  002590  // bit2 = Transmit Buffer Overflow
002352  002591        
002353  002592  func com3_Error(), 1;
002354  002593  // Syntax: comx_Error();
002355  002594  // Usage : if (com_Error() ) ...... take recovery action;
002356  002595  // Notes : return non zero if any errors low level comms errors occured
002357  002596  // returns :
002358  002597  // bit0 = Receiver Overflow Error
002359  002598  // bit1 = Receiver Framing Error
002360  002599  // bit2 = Transmit Buffer Overflow
002361  002600        
002362  002601  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002363  002602  // Usage : comx_Sync();
002364  002603  // return true if sync character has been received in com_Init("...") mode
002365  002604        
002366  002605  func com1_Sync(), 1;
002367  002606  // Usage : comx_Sync();
002368  002607  // return true if sync character has been received in com_Init("...") mode
002369  002608        
002370  002609  func com2_Sync(), 1;
002371  002610  // Usage : comx_Sync();
002372  002611  // return true if sync character has been received in com_Init("...") mode
002373  002612        
002374  002613  func com3_Sync(), 1;
002375  002614  // Usage : comx_Sync();
002376  002615  // return true if sync character has been received in com_Init("...") mode
002377  002616        
002378  002617        
002379  002618  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002380  002619  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002381  002620  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002382  002621  // Notes : initialize a serial buffer for the COM0 output.
002383  002622  //       : The program must declare a var array as a circular buffer.
002384  002623  //       : When a TX buffer is declared for comms, the transmission
002385  002624  //       : of characters becomes non blocking. If the buffer has
002386  002625  //       : insufficient space to accept the next character from a
002387  002626  //       : serout_x() function, the excess characters will be ignored,
002388  002627  //       : and the com_Full_x() error will be asserted.   If the
002389  002628  //       : TX buffer is no longer required, just set the buffer pointer
002390  002629  //       : to zero, the size in this case doesnt matter and is ignored.
002391  002630  //       : The function can resize or reallocated to another buffer at
002392  002631  //       : any time. The buffer is flushed before any changes are made.
002393  002632  //       : "pin" designates an IO pin to control a bi-directional
002394  002633  //       : control device for half duplex mode. "pin" will go HI at the
002395  002634  //       : start of a transmission, and will return low after the final
002396  002635  //       : byte is transmitted. If not required, just set "pin" to zero.
002397  002636        
002398  002637  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002399  002638  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002400  002639  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002401  002640  // Notes : initialize a serial buffer for the COM0 output.
002402  002641  //       : The program must declare a var array as a circular buffer.
002403  002642  //       : When a TX buffer is declared for comms, the transmission
002404  002643  //       : of characters becomes non blocking. If the buffer has
002405  002644  //       : insufficient space to accept the next character from a
002406  002645  //       : serout_x() function, the excess characters will be ignored,
002407  002646  //       : and the com_Full_x() error will be asserted.   If the
002408  002647  //       : TX buffer is no longer required, just set the buffer pointer
002409  002648  //       : to zero, the size in this case doesnt matter and is ignored.
002410  002649  //       : The function can resize or reallocated to another buffer at
002411  002650  //       : any time. The buffer is flushed before any changes are made.
002412  002651  //       : "pin" designates an IO pin to control a bi-directional
002413  002652  //       : control device for half duplex mode. "pin" will go HI at the
002414  002653  //       : start of a transmission, and will return low after the final
002415  002654  //       : byte is transmitted. If not required, just set "pin" to zero.
002416  002655        
002417  002656  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002418  002657  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002419  002658  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002420  002659  // Notes : initialize a serial buffer for the COM0 output.
002421  002660  //       : The program must declare a var array as a circular buffer.
002422  002661  //       : When a TX buffer is declared for comms, the transmission
002423  002662  //       : of characters becomes non blocking. If the buffer has
002424  002663  //       : insufficient space to accept the next character from a
002425  002664  //       : serout_x() function, the excess characters will be ignored,
002426  002665  //       : and the com_Full_x() error will be asserted.   If the
002427  002666  //       : TX buffer is no longer required, just set the buffer pointer
002428  002667  //       : to zero, the size in this case doesnt matter and is ignored.
002429  002668  //       : The function can resize or reallocated to another buffer at
002430  002669  //       : any time. The buffer is flushed before any changes are made.
002431  002670  //       : "pin" designates an IO pin to control a bi-directional
002432  002671  //       : control device for half duplex mode. "pin" will go HI at the
002433  002672  //       : start of a transmission, and will return low after the final
002434  002673  //       : byte is transmitted. If not required, just set "pin" to zero.
002435  002674        
002436  002675  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002437  002676  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002438  002677  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002439  002678  // Notes : initialize a serial buffer for the COM0 output.
002440  002679  //       : The program must declare a var array as a circular buffer.
002441  002680  //       : When a TX buffer is declared for comms, the transmission
002442  002681  //       : of characters becomes non blocking. If the buffer has
002443  002682  //       : insufficient space to accept the next character from a
002444  002683  //       : serout_x() function, the excess characters will be ignored,
002445  002684  //       : and the com_Full_x() error will be asserted.   If the
002446  002685  //       : TX buffer is no longer required, just set the buffer pointer
002447  002686  //       : to zero, the size in this case doesnt matter and is ignored.
002448  002687  //       : The function can resize or reallocated to another buffer at
002449  002688  //       : any time. The buffer is flushed before any changes are made.
002450  002689  //       : "pin" designates an IO pin to control a bi-directional
002451  002690  //       : control device for half duplex mode. "pin" will go HI at the
002452  002691  //       : start of a transmission, and will return low after the final
002453  002692  //       : byte is transmitted. If not required, just set "pin" to zero.
002454  002693        
002455  002694        
002456  002695  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002457  002696  // Syntax: com_TXcount();
002458  002697  // Usage : arg := com_Count();
002459  002698  // Notes : return count of characters remaining in COM0 transmit buffer
002460  002699  //       : that was previously allocated with com_TXbuffer(...);
002461  002700        
002462  002701  func com1_TXcount(), 1;
002463  002702  // Syntax: com_TXcount();
002464  002703  // Usage : arg := com_Count();
002465  002704  // Notes : return count of characters remaining in COM0 transmit buffer
002466  002705  //       : that was previously allocated with com_TXbuffer(...);
002467  002706        
002468  002707  func com2_TXcount(), 1;
002469  002708  // Syntax: com_TXcount();
002470  002709  // Usage : arg := com_Count();
002471  002710  // Notes : return count of characters remaining in COM0 transmit buffer
002472  002711  //       : that was previously allocated with com_TXbuffer(...);
002473  002712        
002474  002713  func com3_TXcount(), 1;
002475  002714  // Syntax: com_TXcount();
002476  002715  // Usage : arg := com_Count();
002477  002716  // Notes : return count of characters remaining in COM0 transmit buffer
002478  002717  //       : that was previously allocated with com_TXbuffer(...);
002479  002718        
002480  002719  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002481  002720  // Usage : arg := com_TXemptyEvent();
002482  002721  // Notes : If a comms TX buffer that was previously allocated with
002483  002722  //       : com_TXbuffer(...);, this function can be used to set up
002484  002723  //       : a function to be called when the COM0 TX buffer is empty.
002485  002724  //       : This is useful for either reloading the TX buffer, setting
002486  002725  //       : or clearing a pin to change the direction of eg a RS485
002487  002726  //       : line driver, or any other form of traffic control.
002488  002727  //       : The event function must not have any parameters.
002489  002728  //       : To disable the event, simply call com_TXemptyEvent(0).
002490  002729  //       : com_TXbuffer(...); also resets any active event.
002491  002730  //       : com_TXemptyEvent returns any previous event function
002492  002731  //       : address, or zero if there was no previous function.
002493  002732        
002494  002733  func com1_TXemptyEvent("function"), 1;
002495  002734  // Usage : arg := com1_TXemptyEvent();
002496  002735  // Notes : If a comms TX buffer that was previously allocated with
002497  002736  //       : com_TXbuffer(...);, this function can be used to set up
002498  002737  //       : a function to be called when the COM0 TX buffer is empty.
002499  002738  //       : This is useful for either reloading the TX buffer, setting
002500  002739  //       : or clearing a pin to change the direction of eg a RS485
002501  002740  //       : line driver, or any other form of traffic control.
002502  002741  //       : The event function must not have any parameters.
002503  002742  //       : To disable the event, simply call com_TXemptyEvent(0).
002504  002743  //       : com_TXbuffer(...); also resets any active event.
002505  002744  //       : com_TXemptyEvent returns any previous event function
002506  002745  //       : address, or zero if there was no previous function.
002507  002746        
002508  002747  func com2_TXemptyEvent("function"), 1;
002509  002748  // Usage : arg := com2_TXemptyEvent();
002510  002749  // Notes : If a comms TX buffer that was previously allocated with
002511  002750  //       : com_TXbuffer(...);, this function can be used to set up
002512  002751  //       : a function to be called when the COM0 TX buffer is empty.
002513  002752  //       : This is useful for either reloading the TX buffer, setting
002514  002753  //       : or clearing a pin to change the direction of eg a RS485
002515  002754  //       : line driver, or any other form of traffic control.
002516  002755  //       : The event function must not have any parameters.
002517  002756  //       : To disable the event, simply call com_TXemptyEvent(0).
002518  002757  //       : com_TXbuffer(...); also resets any active event.
002519  002758  //       : com_TXemptyEvent returns any previous event function
002520  002759  //       : address, or zero if there was no previous function.
002521  002760        
002522  002761  func com3_TXemptyEvent("function"), 1;
002523  002762  // Usage : arg := com3_TXemptyEvent();
002524  002763  // Notes : If a comms TX buffer that was previously allocated with
002525  002764  //       : com_TXbuffer(...);, this function can be used to set up
002526  002765  //       : a function to be called when the COM0 TX buffer is empty.
002527  002766  //       : This is useful for either reloading the TX buffer, setting
002528  002767  //       : or clearing a pin to change the direction of eg a RS485
002529  002768  //       : line driver, or any other form of traffic control.
002530  002769  //       : The event function must not have any parameters.
002531  002770  //       : To disable the event, simply call com_TXemptyEvent(0).
002532  002771  //       : com_TXbuffer(...); also resets any active event.
002533  002772  //       : com_TXemptyEvent returns any previous event function
002534  002773  //       : address, or zero if there was no previous function.
002535  002774        
002536  002775  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002537  002776  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002538  002777  // Notes : Expecting that a comms TX buffer that was previously allocated with
002539  002778  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002540  002779  //       : the buffer being sent wile it is being loaded. Mormally, when
002541  002780  //       : using buffered comms, the transmit process will begin
002542  002781  //       : immediately. This is often undesirable for 2 reasons,
002543  002782  //       : 1] you may wish to build a packet then send it later
002544  002783  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002545  002784  //       : as the FIFO buffer is constantly trying to empty while
002546  002785  //       : you are busy tring to fill it.
002547  002786  // return -1 if function is called illegally when TX comms is not buffered.
002548  002787  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002549  002788  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002550  002789        
002551  002790  func com1_TXbufferHold("state"), 1;
002552  002791  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com2_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com3_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002597  002836  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002598  002837  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002599  002838  // *Notes   : Data Bits must be 8
002600  002839  //          : Parity may be 'N', 'O' or 'E'.
002601  002840  //          : Stop Bits may be 1 or 2.
002602  002841  // returns true if mode was acceptable
002603  002842        
002604  002843  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002605  002844  // Syntax   : com_TXblock("buf", "bufsize");
002606  002845  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002607  002846  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002608  002847  //          : if a transmit buffer is active and space is available this function will return almost
002609  002848  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002610  002849        
002611  002850  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002612  002851  // Syntax   : com_RXblock("buf", "bufsize");
002613  002852  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002614  002853  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002615  002854  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002616  002855  //          : immediately otherwise it will block until until the required bytes are received.
002617  002856        
002618  002857  func __reserved30(), 0; // do not remove
002619  002858        
002620  002859  //------------------------------------------------------------------//
002621  002860  //        Function Prototypes for I2C
002622  002861  //------------------------------------------------------------------//
002623  002862  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002624  002863  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002625  002864  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002626  002865  // Notes  : configures the required I2C module
002627  002866  //        : see 'I2C timing related constants' and 'pin constants'
002628  002867  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002629  002868  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002630  002869  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002631  002870  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002632  002871  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002633  002872  // Returns: True if successful
002634  002873        
002635  002874        
002636  002875  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002637  002876  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002638  002877  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002639  002878  // Notes  : configures the required I2C module
002640  002879  //        : see 'I2C timing related constants' and 'pin constants'
002641  002880  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002642  002881  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002643  002882  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002644  002883  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002645  002884  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002646  002885  // Returns: True if successful
002647  002886        
002648  002887        
002649  002888  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002650  002889  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002651  002890  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002652  002891  // Notes  : configures the required I2C module
002653  002892  //        : see 'I2C timing related constants' and 'pin constants'
002654  002893  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002655  002894  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002656  002895  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002657  002896  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002658  002897  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002659  002898  // Returns: True if successful
002660  002899        
002661  002900        
002662  002901  func I2C1_Close(), 0;
002663  002902  // Usage : I2C1_Close();
002664  002903  // Notes : disables the I2C1 module.
002665  002904        
002666  002905  func I2C2_Close(), 0;
002667  002906  // Usage : I2C2_Close();
002668  002907  // Notes : disables the I2C2 module.
002669  002908        
002670  002909  func I2C3_Close(), 0;
002671  002910  // Usage : I2C3_Close();
002672  002911  // Notes : disables the I2C3 module.
002673  002912        
002674  002913  func I2C1_Start(), 1;
002675  002914  // Syntax: I2C1_Start();
002676  002915  // Usage : I2C1_Start();
002677  002916  // Notes : generates a Start condition.
002678  002917  //       : returns true if successful (usually ignored)
002679  002918        
002680  002919  func I2C2_Start(), 1;
002681  002920  // Syntax: I2C2_Start();
002682  002921  // Usage : I2C2_Start();
002683  002922  // Notes : generates a Start condition.
002684  002923  //       : returns true if successful (usually ignored)
002685  002924        
002686  002925  func I2C3_Start(), 1;
002687  002926  // Syntax: I2C3_Start();
002688  002927  // Usage : I2C3_Start();
002689  002928  // Notes : generates a Start condition.
002690  002929  //       : returns true if successful (usually ignored)
002691  002930        
002692  002931  func I2C1_Stop(), 1;
002693  002932  // Syntax: I2C1_Stop();
002694  002933  // Usage : I2C1_Stop();
002695  002934  // Notes : generates a Stop condition.
002696  002935  //       : returns true if successful (usually ignored)
002697  002936        
002698  002937  func I2C2_Stop(), 1;
002699  002938  // Syntax: I2C2_Stop();
002700  002939  // Usage : I2C2_Stop();
002701  002940  // Notes : generates a Stop condition.
002702  002941  //       : returns true if successful (usually ignored)
002703  002942        
002704  002943  func I2C3_Stop(), 1;
002705  002944  // Syntax: I2C3_Stop();
002706  002945  // Usage : I2C3_Stop();
002707  002946  // Notes : generates a Stop condition.
002708  002947  //       : returns true if successful (usually ignored)
002709  002948        
002710  002949  func I2C1_Restart(), 1;
002711  002950  // Syntax: I2C1_Restart();
002712  002951  // Usage : I2C1_Restart();
002713  002952  // Notes : generates a Restart condition.
002714  002953  //       : returns true if successful (usually ignored)
002715  002954        
002716  002955  func I2C2_Restart(), 1;
002717  002956  // Syntax: I2C2_Restart();
002718  002957  // Usage : I2C2_Restart();
002719  002958  // Notes : generates a Restart condition.
002720  002959  //       : returns true if successful (usually ignored)
002721  002960        
002722  002961  func I2C3_Restart(), 1;
002723  002962  // Syntax: I2C3_Restart();
002724  002963  // Usage : I2C3_Restart();
002725  002964  // Notes : generates a Restart condition.
002726  002965  //       : returns true if successful (usually ignored)
002727  002966        
002728  002967  func I2C1_Read(), 1;
002729  002968  // Syntax: I2C1_Read();
002730  002969  // Usage : ch := I2C1_Read();
002731  002970  // Notes : reads a single byte from the I2C Bus.
002732  002971        
002733  002972  func I2C2_Read(), 1;
002734  002973  // Syntax: I2C2_Read();
002735  002974  // Usage : ch := I2C2_Read();
002736  002975  // Notes : reads a single byte from the I2C Bus.
002737  002976        
002738  002977  func I2C3_Read(), 1;
002739  002978  // Syntax: I2C3_Read();
002740  002979  // Usage : ch := I2C3_Read();
002741  002980  // Notes : reads a single byte from the I2C Bus.
002742  002981        
002743  002982  func I2C1_Write("byte"), 1;
002744  002983  // Syntax: I2C1_Write(byte);
002745  002984  // Usage : r := I2C1_Write(ch);
002746  002985  // Notes : is used to write a byte to the I2C bus.
002747  002986  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002748  002987        
002749  002988  func I2C2_Write("byte"), 1;
002750  002989  // Syntax: I2C2_Write(byte);
002751  002990  // Usage : r := I2C2_Write(ch);
002752  002991  // Notes : is used to write a byte to the I2C bus.
002753  002992  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002754  002993        
002755  002994  func I2C3_Write("byte"), 1;
002756  002995  // Syntax: I2C3_Write(byte);
002757  002996  // Usage : r := I2C3_Write(ch);
002758  002997  // Notes : is used to write a byte to the I2C bus.
002759  002998  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002760  002999        
002761  003000  func I2C1_Ack(), 0;
002762  003001  // Syntax: I2C1_Ack();
002763  003002  // Usage : I2C1_Ack();
002764  003003  // Notes : generates the acknowledge condition.
002765  003004        
002766  003005  func I2C2_Ack(), 0;
002767  003006  // Syntax: I2C2_Ack();
002768  003007  // Usage : I2C2_Ack();
002769  003008  // Notes : generates the acknowledge condition.
002770  003009        
002771  003010  func I2C3_Ack(), 0;
002772  003011  // Syntax: I2C3_Ack();
002773  003012  // Usage : I2C3_Ack();
002774  003013  // Notes : generates the acknowledge condition.
002775  003014        
002776  003015  func I2C1_Nack(), 0;
002777  003016  // Syntax: I2C1_Nack();
002778  003017  // Usage : I2C1_Nack();
002779  003018  // Notes : generates the negative acknowledge condition.
002780  003019        
002781  003020  func I2C2_Nack(), 0;
002782  003021  // Syntax: I2C2_Nack();
002783  003022  // Usage : I2C2_Nack();
002784  003023  // Notes : generates the negative acknowledge condition.
002785  003024        
002786  003025  func I2C3_Nack(), 0;
002787  003026  // Syntax: I2C3_Nack();
002788  003027  // Usage : I2C3_Nack();
002789  003028  // Notes : generates the negative acknowledge condition.
002790  003029        
002791  003030  func I2C1_AckStatus(), 1;
002792  003031  // Syntax: I2C1_AckStatus();
002793  003032  // Usage : r := I2C1_AckStatus();
002794  003033  // Notes : returns the ACK status from the device.
002795  003034        
002796  003035  func I2C2_AckStatus(), 1;
002797  003036  // Syntax: I2C2_AckStatus();
002798  003037  // Usage : r := I2C2_AckStatus();
002799  003038  // Notes : returns the ACK status from the device.
002800  003039        
002801  003040  func I2C3_AckStatus(), 1;
002802  003041  // Syntax: I2C3_AckStatus();
002803  003042  // Usage : r := I2C3_AckStatus();
002804  003043  // Notes : returns the ACK status from the device.
002805  003044        
002806  003045  func I2C1_AckPoll("control"), 1;
002807  003046  // Syntax: I2C1_AckPoll();
002808  003047  // Usage : r := I2C1_AckPoll(0xA0);
002809  003048  // Notes : waits for a device to return from ACK polling.
002810  003049        
002811  003050  func I2C2_AckPoll("control"), 1;
002812  003051  // Syntax: I2C2_AckPoll();
002813  003052  // Usage : r := I2C2_AckPoll(0xA0);
002814  003053  // Notes : waits for a device to return from ACK polling.
002815  003054        
002816  003055  func I2C3_AckPoll("control"), 1;
002817  003056  // Syntax: I2C3_AckPoll();
002818  003057  // Usage : r := I2C3_AckPoll(0xA0);
002819  003058  // Notes : waits for a device to return from ACK polling.
002820  003059        
002821  003060  func I2C1_Idle(), 1;
002822  003061  // Syntax : I2C1_Idle();
002823  003062  // Usage  : r := I2C1_Idle();
002824  003063  // Notes  : waits until the I2C Bus is Inactive.
002825  003064  //        : Times out if bus not idle within 1 second
002826  003065  // Returns: TRUE if successful, else failed (timed out)
002827  003066        
002828  003067  func I2C2_Idle(), 1;
002829  003068  // Syntax : I2C2_Idle();
002830  003069  // Usage  : r := I2C2_Idle();
002831  003070  // Notes  : waits until the I2C Bus is Inactive.
002832  003071  //        : Times out if bus not idle within 1 second
002833  003072  // Returns: TRUE if successful, else failed (timed out)
002834  003073        
002835  003074  func I2C3_Idle(), 1;
002836  003075  // Syntax : I2C3_Idle();
002837  003076  // Usage  : r := I2C3_Idle();
002838  003077  // Notes  : waits until the I2C Bus is Inactive.
002839  003078  //        : Times out if bus not idle within 1 second
002840  003079  // Returns: TRUE if successful, else failed (timed out)
002841  003080        
002842  003081        
002843  003082  func I2C1_Gets("buffer", "size"), 1;
002844  003083  // Syntax: I2C1_Gets("buffer", "size");
002845  003084  // Usage : r := I2C1_Gets(mybuf, 16);
002846  003085  // Notes : only reads up to "size" characters into "buffer"
002847  003086  //       : Reads up to asciiz terminator including terminator
002848  003087        
002849  003088  func I2C2_Gets("buffer", "size"), 1;
002850  003089  // Syntax: I2C2_Gets("buffer", "size");
002851  003090  // Usage : r := I2C2_Gets(mybuf, 16);
002852  003091  // Notes : only reads up to "size" characters into "buffer"
002853  003092  //       : Reads up to asciiz terminator including terminator
002854  003093        
002855  003094  func I2C3_Gets("buffer", "size"), 1;
002856  003095  // Syntax: I2C3_Gets("buffer", "size");
002857  003096  // Usage : r := I2C3_Gets(mybuf, 16);
002858  003097  // Notes : only reads up to "size" characters into "buffer"
002859  003098  //       : Reads up to asciiz terminator including terminator
002860  003099        
002861  003100  func I2C1_Getn("buffer", "size"), 1;
002862  003101  // Syntax: I2C1_Gets("buffer", "size");
002863  003102  // Usage : r := I2C1_Gets(mybuf, 16);
002864  003103  // Notes : reads "size" bytes into "buffer"
002865  003104  //       :
002866  003105        
002867  003106  func I2C2_Getn("buffer", "size"), 1;
002868  003107  // Syntax: I2C2_Gets("buffer", "size");
002869  003108  // Usage : r := I2C2_Gets(mybuf, 16);
002870  003109  // Notes : reads "size" bytes into "buffer"
002871  003110  //       :
002872  003111        
002873  003112  func I2C3_Getn("buffer", "size"), 1;
002874  003113  // Syntax: I2C3_Gets("buffer", "size");
002875  003114  // Usage : r := I2C3_Gets(mybuf, 16);
002876  003115  // Notes : reads "size" bytes into "buffer"
002877  003116  //       :
002878  003117        
002879  003118  func I2C1_Puts("buffer"), 1;
002880  003119  // Syntax: I2C1_Puts("buffer");
002881  003120  // Usage : r := I2C1_Puts(mybuf);
002882  003121  // Notes : writes an asciiz string to the I2C device
002883  003122  //       : returns count of characters written
002884  003123        
002885  003124  func I2C2_Puts("buffer"), 1;
002886  003125  // Syntax: I2C2_Puts("buffer");
002887  003126  // Usage : r := I2C2_Puts(mybuf);
002888  003127  // Notes : writes an asciiz string to the I2C device
002889  003128  //       : returns count of characters written
002890  003129        
002891  003130  func I2C3_Puts("buffer"), 1;
002892  003131  // Syntax: I2C3_Puts("buffer");
002893  003132  // Usage : r := I2C3_Puts(mybuf);
002894  003133  // Notes : writes an asciiz string to the I2C device
002895  003134  //       : returns count of characters written
002896  003135        
002897  003136  func I2C1_Putn("buffer", "count"), 1;
002898  003137  // Syntax: I2C1_Putn("buffer","count");
002899  003138  // Usage : r := I2C1_Puts(mybuf,10);
002900  003139  // Notes : writes up to "size" bytes to the I2C device
002901  003140  //       : returns number of bytes written
002902  003141        
002903  003142  func I2C2_Putn("buffer", "count"), 1;
002904  003143  // Syntax: I2C2_Putn("buffer","count");
002905  003144  // Usage : r := I2C2_Puts(mybuf,10);
002906  003145  // Notes : writes up to "size" bytes to the I2C device
002907  003146  //       : returns number of bytes written
002908  003147        
002909  003148  func I2C3_Putn("buffer", "count"), 1;
002910  003149  // Syntax: I2C3_Putn("buffer","count");
002911  003150  // Usage : r := I2C3_Puts(mybuf,10);
002912  003151  // Notes : writes up to "size" bytes to the I2C device
002913  003152  //       : returns number of bytes written
002914  003153        
002915  003154        
002916  003155  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002917  003156  // Syntax   : spi_ReadBlock("buf", "bufsize");
002918  003157  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002919  003158  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002920  003159        
002921  003160  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002922  003161  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002923  003162  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002924  003163  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002925  003164        
002926  003165  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002927  003166  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002928  003167  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002929  003168  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002930  003169        
002931  003170  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  // I2C timing related constants
002937  003176  #CONST
002938  003184  #END
002939  003185        
002940  003186        
002941  003187        
002942  003188  //------------------------------------------------------------------//
002943  003189  // Direct uSD (SPI0) card SPI functions                             //
002944  003190  //------------------------------------------------------------------//
002945  003191  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002946  003192  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002947  003193  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002948  003194  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002949  003195                                                  //
002950  003196        
002951  003197  //------------------------------------------------------------------//
002952  003198  // Function prototypes for SPI1, SPI2 and SPI3                      //
002953  003199  //------------------------------------------------------------------//
002954  003200  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002955  003201  // Syntax: SPI_SDO_pin(pin);
002956  003202  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002957  003203  // Notes : Select the hardware pin for SPIx transmit line.
002958  003204  //       : Note that multiple pins can be connected simmultaneously.
002959  003205  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002960  003206  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002961  003207  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002962  003208  //       : The pin is automatically set to an output.
002963  003209  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002964  003210        
002965  003211  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002966  003212  // Syntax: SPI2_SDO_pin(pin);
002967  003213  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002968  003214  // Notes : Select the hardware pin for SPIx transmit line.
002969  003215  //       : Note that multiple pins can be connected simmultaneously.
002970  003216  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002971  003217  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002972  003218  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002973  003219  //       : The pin is automatically set to an output.
002974  003220  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002975  003221        
002976  003222  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002977  003223  // Syntax: SPI3_SDO_pin(pin);
002978  003224  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002979  003225  // Notes : Select the hardware pin for SPIx transmit line.
002980  003226  //       : Note that multiple pins can be connected simmultaneously.
002981  003227  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002982  003228  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002983  003229  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002984  003230  //       : The pin is automatically set to an output.
002985  003231  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002986  003232        
002987  003233  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
002988  003234  // Syntax: SPI1_SDI_pin(pin);
002989  003235  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
002990  003236  // Notes : Selects the hardware pin for SPIx receive line.
002991  003237  //       : Note that only a single pin can be mapped to SPI SDI.
002992  003238  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
002993  003239  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
002994  003240  //       : If the pin argument is 0 the function has no effect
002995  003241  //       : The pin is automatically set to an input.
002996  003242  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
002997  003243  //       : it is necessary to configure the SDI pin first, eg
002998  003244  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
002999  003245  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003003  003249  // Syntax: SPI2_SDI_pin(pin);
003004  003250  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI3_SDI_pin(pin);
003019  003265  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003033  003279  // Syntax: SPI1_SCK_pin(pin);
003034  003280  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003035  003281  // Notes : Selects the hardware pin for SPI clock line.
003036  003282  //       : Note that only a single pin should be mapped to spi SCK.
003037  003283  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003038  003284  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003039  003285  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003040  003286  //       : The pin is automatically set to an output.
003041  003287  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003042  003288        
003043  003289  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003044  003290  // Syntax: SPI2_SCK_pin(pin);
003045  003291  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003046  003292  // Notes : Selects the hardware pin for SPI clock line.
003047  003293  //       : Note that only a single pin should be mapped to spi SCK.
003048  003294  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003049  003295  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003050  003296  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003051  003297  //       : The pin is automatically set to an output.
003052  003298  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003053  003299        
003054  003300  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003055  003301  // Syntax: SPI3_SCK_pin(pin);
003056  003302  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003057  003303  // Notes : Selects the hardware pin for SPI clock line.
003058  003304  //       : Note that only a single pin should be mapped to spi SCK.
003059  003305  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003060  003306  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003061  003307  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003062  003308  //       : The pin is automatically set to an output.
003063  003309  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003064  003310        
003065  003311        
003066  003312  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003067  003313  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003068  003314  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003069  003315        
003070  003316        
003071  003317  //------------------------------------------------------------------------------
003072  003318  // Constants for SPI1, SPI2 an SPI3 "mode"
003073  003319  //------------------------------------------------------------------------------
003074  003320  #CONST
003075  003337  #END
003076  003338        
003077  003339  //------------------------------------------------------------------------------
003078  003340  // Constants for SPI1, SPI2 an SPI3 "speed"
003079  003341  //------------------------------------------------------------------------------
003080  003342  #CONST
003081  003359  #END
003082  003360        
003083  003361        
003084  003362  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003085  003363  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003086  003364  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003087  003365        
003088  003366  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003089  003367  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003090  003368  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003091  003369        
003092  003370  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003093  003371  // Syntax   : spi_WriteBlock("buf", "bufsize");
003094  003372  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003095  003373  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003096  003374        
003097  003375  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003098  003376  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003099  003377  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003100  003378  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003101  003379        
003102  003380  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003103  003381  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003104  003382  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003105  003383  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003106  003384        
003107  003385  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  //------------------------------------------------------------------//
003113  003391  // Display Access                                                   //
003114  003392  //------------------------------------------------------------------//
003115  003393  func disp_SetReg("register", "data"), 0;
003116  003394  // Syntax: display_SetReg(register, data);
003117  003395  // Usage : display_SetReg(arg1, arg2);
003118  003396  // Notes : Sets uLCD specific display driver registers. Refer
003119  003397  //       : to appropriate display driver data sheet.
003120  003398        
003121  003399  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003122  003400  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003123  003401  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003124  003402  // Notes : Prepares the GRAM area for user access.
003125  003403  //       : Data can now be written with disp_GRAM.
003126  003404  //       : GRAM will be set accordingly for the correct screen mode.
003127  003405  //       : the LO word of the 32 bit pixel count is returned. This is
003128  003406  //       : usually all that is needed unlse GRAM area exceeds 256^2
003129  003407  //       : A copy of the 32bit value can be found in
003130  003408  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003131  003409        
003132  003410  func disp_WrGRAM("colour"), 0;
003133  003411  // Syntax: display_WrGRAM(colour);
003134  003412  // Usage : display_WrGRAM(arg);
003135  003413  // Notes : Data can be written to the GRAM consecutively using
003136  003414  //       : this function once the GRAM access window has been setup.
003137  003415        
003138  003416  func disp_WriteControl("value"), 0;             // write a control byte to the display
003139  003417        
003140  003418  func disp_WriteWord("value"), 0;                // write a word to the display
003141  003419        
003142  003420        
003143  003421  func disp_ReadWord(), 1;                        // read a word from the display
003144  003422  // Syntax: disp_ReadWord();
003145  003423  // Usage : x:=disp_ReadWord();
003146  003424  // Notes : Read a word from the controller
003147  003425  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003148  003426  //       : print(disp_ReadWord());        // print ID
003149  003427  //       : (Many displays are write only)
003150  003428        
003151  003429        
003152  003430  // NB only available on certain displays, check individual data sheets
003153  003431  func sys_StoreTouchCalibration(), 1;
003154  003432  // Syntax: sys_StoreTouchCalibration();
003155  003433  // Usage : r := sys_StoreTouchCalibration();
003156  003434  // Notes : Store the touch calibration values in non-volatile memory.
003157  003435  //       : Returns true if the values have been accepted and stored,
003158  003436  //       : else returns false if write could not be performed, or
003159  003437  //       : touch calibration values are improbable.
003160  003438  //       : The values that are stored are obtained from:-
003161  003439  //       : TOUCH_XMINCAL             78  // touch calibration value
003162  003440  //       : TOUCH_YMINCAL             79  // touch calibration value
003163  003441  //       : TOUCH_XMAXCAL             80  // touch calibration value
003164  003442  //       : TOUCH_YMAXCAL             81  // touch calibration value
003165  003443  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003166  003444  //       : This function is not supported on uVGA, Capacitive touch
003167  003445  //       : and 4.3" resistive touch modules.
003168  003446        
003169  003447  // NB only available on certain displays, check individual data sheets
003170  003448  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003171  003449  // Syntax: disp_Sync(line);
003172  003450  // Usage : disp_Sync(480);
003173  003451  // Notes : Waits till the hardware gets to a certain line.
003174  003452  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003175  003453  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003176  003454  //       : depending on the graphics operation. The higher the value, the slower
003177  003455  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003178  003456  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003179  003457  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003180  003458  //       : be slowest (as its actually right at the end of the blanking period) and 508
003181  003459  //       : will cause a hangup situation as it is above the highes scanline value.
003182  003460  //       : Currently, this function is only supported on displays with SSD1963 driver.
003183  003461        
003184  003462  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003185  003463  // Syntax: disp_Init();                        New in v0.7
003186  003464  // Usage : disp_Init();
003187  003465  // Notes : Initialises or reinitialises the display.
003188  003466  //       : Normally used after restoration of peripheral power
003189  003467  //       : and after DeepSleep.
003190  003468        
003191  003469  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003192  003470  // Syntax: disp_Disconnect();                  New in v0.7
003193  003471  // Usage : disp_Disconnect();
003194  003472  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003195  003473  //       : its lowest possible power consumption. Use after disabling peripheral power
003196  003474  //       : to ensure the minimal power usage by the display.
003197  003475  //       : disp_Init() should be used to reinitialise the display.
003198  003476        
003199  003477  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003200  003478  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003201  003479  // Usage : disp_BlitPixelsFromCOM0();
003202  003480  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003203  003481  //       : display from the specified com port.
003204  003482        
003205  003483  func __reserved42(), 0; // do not remove
003206  003484        
003207  003485        
003208  003486  //------------------------------------------------------------------//
003209  003487  //        Image Control Function Prototypes                         //
003210  003488  //------------------------------------------------------------------//
003211  003489  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003212  003490  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003213  003491  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003214  003492  // Notes : set the position where the image will be displayed
003215  003493  //       : returns true if index was ok and function was successful.
003216  003494  //       : you may turn off an image so when img_Refresh is called,
003217  003495  //       : the image will not be shown
003218  003496        
003219  003497  func img_Enable("handle", "index"), 1;
003220  003498  // Syntax: img_Enable(handle, index);
003221  003499  // Usage : r := img_Enable(hImageList, imagenum);
003222  003500  // Notes : enable image in a image list
003223  003501  //       : returns true if index was ok and function was successful.
003224  003502  //       : this is the default state so when img_Refresh is called,
003225  003503  //       : all the images in the list will be shown
003226  003504  //       : if index is set to -1, all of the images are enabled
003227  003505        
003228  003506  func img_Disable("handle", "index"), 1;
003229  003507  // Syntax: img_Disable(handle, index);
003230  003508  // Usage : r := img_Disable(hImageList, imagenum);
003231  003509  // Notes : disable image in a image list
003232  003510  //       : returns true if index was ok and function was successful.
003233  003511  //       : you must turn off an image so when img_Refresh is called,
003234  003512  //       : the image will not be shown.
003235  003513  //       : if index is set to -1, all of the images are disabled
003236  003514        
003237  003515        
003238  003516  func img_Darken("handle", "index"), 1;
003239  003517  // Syntax: img_Darken(handle, index);
003240  003518  // Usage : r := img_Darken(hImageList, imagenum);
003241  003519  // Notes : darken image in a image list
003242  003520  //       : returns true if index was ok and function was successful.
003243  003521  //       : if index is set to -1, all of the images are darkened
003244  003522  //       : NB:- this feature will only work for the next refresh, then
003245  003523  //       : the image reverts back to normal when displayed again.
003246  003524        
003247  003525        
003248  003526  func img_Lighten("handle", "index"), 1;
003249  003527  // Syntax: img_Lighten(handle, index);
003250  003528  // Usage : r := img_Lighten(hImageList, imagenum);
003251  003529  // Notes : lighten image in a image list
003252  003530  //       : returns true if index was ok and function was successful.
003253  003531  //       : if index is set to -1, all of the images are lightened
003254  003532  //       : NB:- this feature will only work for the next refresh, then
003255  003533  //       : the image reverts back to normal when displayed again.
003256  003534        
003257  003535  func img_SetWord("handle", "index", "offset", "word"), 1;
003258  003536  // Syntax: img_SetWord(handle, index, offset, word);
003259  003537  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003260  003538  // Notes : set specified word (0-7) in a image entry
003261  003539  //       : returns TRUE if successful, return value usually ignored.
003262  003540        
003263  003541  func img_GetWord("handle", "index", "offset"), 1;
003264  003542  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003265  003543  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003266  003544  // Notes : returns specified word (0-14) from an image entry
003267  003545  //       : refer to image control entry offsets.
003268  003546        
003269  003547  func img_Show("handle", "index"), 1;
003270  003548  // Syntax: img_Show(handle, index);
003271  003549  // Usage : display image entry (regardless of enable/disable)
003272  003550  //       : returns TRUE if successful, return value usually ignored.
003273  003551        
003274  003552  func img_SetAttributes("handle", "index","value"), 1;
003275  003553  // Syntax: img_SetAttributes("handle", "index","offset");
003276  003554  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003277  003555  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003278  003556  //       : of an image control entry. "value" refers to various bits in
003279  003557  //       : the image control entry (see image attribute flags).
003280  003558  //       : A '1' bit in the "value" field SETS the respective bit
003281  003559  //       : in the IMAGE_FLAGS field of the image control entry.
003282  003560  //       : returns TRUE if successful, return value usually ignored.
003283  003561        
003284  003562  func img_ClearAttributes("handle", "index","value"), 1;
003285  003563  // Syntax: img_ClearAttributes("handle", "index","offset");
003286  003564  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003287  003565  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003288  003566  //       : of an image control entry. "value" refers to various bits in
003289  003567  //       : the image control entry (see image attribute flags)
003290  003568  //       : a '1' bit in the "value" field CLEARS the respective bit
003291  003569  //       : in the IMAGE_FLAGS field of the image control entry.
003292  003570  //       : returns TRUE if successful, return value usually ignored.
003293  003571        
003294  003572  func img_Touched("handle", "index"), 1;
003295  003573  // Syntax: r := img_Touched(handle, index);
003296  003574  // Usage : img_Touched(hndl, 17);
003297  003575  //       : returns -1 if image not touched, or returns index
003298  003576  // Notes : if index is passed as -1, function tests all images,
003299  003577  //       : and returns -1 if image not touched, or returns index.
003300  003578        
003301  003579        
003302  003580  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003303  003581  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003304  003582  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003305  003583  // Notes : set a position in an image control for sequential reading
003306  003584  //       : of pixels from the uSD card (fat16 or raw modes supported)
003307  003585  //       : No image window area is set, the image will not be shown
003308  003586  //       : This function provides a means of preparing to load an image,
003309  003587  //       : or part of an image, to an array. (see img_SequentialRead)
003310  003588  //Returns: returns true if index was ok and function was successful.
003311  003589        
003312  003590        
003313  003591  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003314  003592  // Syntax: img_SequentialRead(count, ptr);
003315  003593  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003316  003594  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003317  003595  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003318  003596  // Notes : once a position has ben set with the img_SelectReadPosition function,
003319  003597  //       : this function can then used for sequential reading of pixels from
003320  003598  //       : image storage.
003321  003599  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003322  003600  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003323  003601  //       : else "ptr" must point to a valid array that is at least
003324  003602  //       : the size of "count".
003325  003603  //       : or part of an image, to an array. (see img_SequentialRead)
003326  003604  //       : returns TRUE if function succeded.
003327  003605        
003328  003606  func __reserved43(), 0; // do not remove
003329  003607  func __reserved44(), 0; // do not remove
003330  003608  func __reserved45(), 0; // do not remove
003331  003609  func __reserved46(), 0; // do not remove
003332  003610        
003333  003611  // image control header offsets
003334  003612  #CONST
003335  003619  #END
003336  003620        
003337  003621  // image control entry offsets
003338  003622  #CONST
003339  003637  #END
003340  003638        
003341  003639  // image attribute flags (in IMAGE_FLAGS)
003342  003640  // for img_SetAttributes(...) and img_ClearAttributes(...)
003343  003641  #CONST
003344  003655  #END
003345  003656        
003346  003657        
003347  003658  //------------------------------------------------------------------//
003348  003659  //        Timer Function Prototypes
003349  003660  //------------------------------------------------------------------//
003350  003661  func sys_T(), 1;
003351  003662  // Syntax: sys_T();
003352  003663  // Usage : t := sys_T();
003353  003664  // Notes : return the current value of the rolling system timer (1msec) LO word
003354  003665        
003355  003666  func sys_T_HI(), 1;
003356  003667  // Syntax: sys_T_HI();
003357  003668  // Usage : t := sys_T_HI();
003358  003669  // Notes : return the current value of the rolling system timer (1msec) HI word
003359  003670        
003360  003671  func sys_SetTimer("timernum","value"), 0;
003361  003672  // Syntax: sys_SetTimer("timernum", "value");
003362  003673  // Usage : sys_SetTimer(TIMER5, 10000);
003363  003674  // Notes : set a countdown on the selected timer, or 'top up' if required.
003364  003675  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003365  003676  //       : Maximum timeout period is 65.535 seconds
003366  003677  //       : A timer can be read with the sys_GetTimer("timernum") function
003367  003678        
003368  003679  func sys_GetTimer("timernum"), 1;
003369  003680  // Syntax: t := sys_GetTimer("timernum");
003370  003681  // Usage : t := sys_GetTimer(TIMER3);
003371  003682  // Notes : returns 0 if timer has expired, or the current countdown value.
003372  003683  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003373  003684  //       : Maximum timeout period is 65.535 seconds
003374  003685  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003375  003686        
003376  003687  func sys_SetTimerEvent("timernum","function"), 1;
003377  003688  // Syntax: sys_SetTimerFunction("timernum", "function");
003378  003689  // Usage : sys_SetTimer(TIMER5, myfunc);
003379  003690  // Notes : set a function to be called for selected timer.
003380  003691  //       : When the timer reaches zero, the function is called.
003381  003692  //       : The called function must not have any parameters
003382  003693  //       : sys_SetTimerEvent returns any previous event function
003383  003694  //       : address, or zero if there was no previous function.
003384  003695        
003385  003696  func sys_EventQueue(), 1;
003386  003697  // Syntax: sys_EventQueue();
003387  003698  // Usage : tasks := sys_EventQueue();
003388  003699  // Notes : returns the max number of events that were pending
003389  003700  //       : in the timer queue since the last call to this function.
003390  003701  //       : This can be used to assess timer event overhead burden,
003391  003702  //       : especially after or during a sys_EventsPostpone action.
003392  003703        
003393  003704  func sys_EventsPostpone(), 0;
003394  003705  // Syntax: sys_EventPostpone();
003395  003706  // Usage : sys_EventPostpone();   // postpone the event queue
003396  003707  // Notes : postpone any events until the sys_EventResume function is executed
003397  003708  //       : The timer event queue will continue to queue events, but no action
003398  003709  //       : will take place untill a sys_EventResume function is encountered.
003399  003710  //       : The queue will continue to receive up to 32 events before discarding
003400  003711  //       : any further events. This function is required to allow a sequence of
003401  003712  //       : instructions or functions to occur that would otherwise be corrupted
003402  003713  //       : by an event occuring during the sequence of instructions or functions.
003403  003714  //       : A good example of this is when you set a position to print, if there
003404  003715  //       : was no way of locking the current sequence, an event may occur which
003405  003716  //       : does a similar thing, and a contention would occur - printing to
003406  003717  //       : the wrong position. This function should be used wisely, if any action
003407  003718  //       : that is required would take considerable time, it is better to disable
003408  003719  //       : any conflicting event functions with a bypass flag, then restart the
003409  003720  //       : conflicting event by re-issuing a timer value.
003410  003721        
003411  003722  func sys_EventsResume(), 0;
003412  003723  // Syntax: sys_EventsResume();
003413  003724  // Usage : sys_EventsResume();   // resume the event queue
003414  003725  // Notes : resume any postponed events. The queue will try to execute any timer
003415  003726  //       : events that were incurred during the postponed period.
003416  003727        
003417  003728        
003418  003729  func sys_GetTime(), 0;
003419  003730  // Syntax: sys_GetTime();
003420  003731  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003421  003732  // Notes : print the system time in the format eg "6:10:45"
003422  003733  //       : Can be captured to a buffer using the to( function
003423  003734  //       : Returns nothing.
003424  003735        
003425  003736  func sys_SetTime("hours", "mins", "secs"), 1;
003426  003737  // Syntax: sys_SetTime(h, m, s);
003427  003738  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003428  003739  // Notes : Used to set clock to correct time after power up or suspension
003429  003740  //Returns: Returns true if valid time.
003430  003741        
003431  003742  func sys_GetDate(), 0;
003432  003743  // Syntax: sys_GetDate();
003433  003744  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003434  003745  // Notes : print the system date in the format eg "25-09-2012"
003435  003746  //       : Can be captured to a buffer using the to( function
003436  003747  //       : Returns nothing.
003437  003748        
003438  003749  func sys_SetDate("year", "month", "day"), 1;
003439  003750  // Syntax: sys_SetDate(y, m, d);
003440  003751  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003441  003752  // Notes : Used to set clock to correct date after power up or suspension
003442  003753  //Returns: Returns true if valid date.
003443  003754        
003444  003755  func sys_Sleep("units"), 1;
003445  003756  // Syntax: t := sys_Sleep("units");
003446  003757  // Usage : t := sys_Sleep(10);
003447  003758  // Notes : sets the display into low power mode for a period of time.
003448  003759  //       : Touching the touch screen will also wake from sleep.
003449  003760  //       : as will bus Change Interrupts.
003450  003761  //       : Returns remaining sleep units.
003451  003762        
003452  003763  func iterator("offset"), 0;
003453  003764  // Syntax: t :=  iterator("offset");
003454  003765  // Usage : t :=  iterator(10);
003455  003766  // Notes : set the iterator size for ++/--
003456  003767  //       : The next postinc,postdec,preinc of predec will alter
003457  003768  //       : by the specified value.
003458  003769  //       : The offset will return to 1 after the next operation.
003459  003770        
003460  003771  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003461  003772  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003462  003773  // Usage : t := sys_DeepSleep(10);
003463  003774  // Notes : sets the display and processor into lowest power mode for a period of time.
003464  003775  //       : When returning from DeepSleep the display should be reinitialised
003465  003776  //       : with disp_Init().
003466  003777  //       : Touching the touch screen will also wake from sleep.
003467  003778  //       : Returns remaining sleep units.
003468  003779        
003469  003780  //------------------------------------------------------------------//
003470  003781  //         Touch Screen Function Prototypes
003471  003782  //------------------------------------------------------------------//
003472  003783        
003473  003784  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003474  003785  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003475  003786  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003476  003787  // Notes : Specifies a new touch detect region on the screen
003477  003788  //       : such that only touch activity in that region will
003478  003789  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003479  003790        
003480  003791  func touch_Set("mode"), 0;
003481  003792  // Syntax: touch_Set(mode);
003482  003793  // Usage : touch_Set(arg);
003483  003794  // Notes : Sets various Touch Screen related parameters
003484  003795  //       :
003485  003796  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003486  003797  //       : touch_Set(TOUCH_ENABLE);
003487  003798  //       : Enables and initialises Touch Screen hardware
003488  003799  //       :
003489  003800  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003490  003801  //       : touch_Set(TOUCH_DISABLE );
003491  003802  //       : Disables the Touch Screen
003492  003803  //       : Note: Touch Screen runs in the background and disabling
003493  003804  //       : it when not in use will free up extra resources
003494  003805  //       : such as 4DVM CPU cycles.
003495  003806  //       :
003496  003807  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003497  003808  //       : touch_Set(TOUCH_REGIONDEFAULT);
003498  003809  //       : This will reset the current active region to default
003499  003810  //       : to the full screen without the application having to
003500  003811  //       : set a new active region for the full screen.
003501  003812  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003502  003813  //       : that requre to be interfaced with an external pointing
003503  003814  //       : device, values that are poked into TOUCH_DRIVE will be
003504  003815  //       : read with the touch_Get() function)
003505  003816        
003506  003817        
003507  003818  func touch_Get("mode"), 1;
003508  003819  // Syntax: touch_Get(mode);
003509  003820  // Usage : arg1 := touch_Get(arg);
003510  003821  // Notes : Returns various Touch Screen parameters to caller
003511  003822  //       :
003512  003823  //       : mode = TOUCH_STATUS  (mode 0)
003513  003824  //       : var := touch_Get(TOUCH_STATUS);
003514  003825  //       : Returns the various states of the touch screen
003515  003826  //       : 0 = NOTOUCH
003516  003827  //       : 1 = TOUCH_PRESSED
003517  003828  //       : 2 = TOUCH_RELEASED
003518  003829  //       : 3 = TOUCH_MOVING
003519  003830  //       :
003520  003831  //       : mode = TOUCH_GETX   (mode 1)
003521  003832  //       : var := touch_Get(TOUCH_GETX);
003522  003833  //       : Returns the X coordinates of the touch
003523  003834  //       :
003524  003835  //       : mode = TOUCH_GETY   (mode 2)
003525  003836  //       : var := touch_Get(TOUCH_GETY);
003526  003837  //       : Returns the Y coordinates of the touch
003527  003838        
003528  003839        
003529  003840  //touch_Set() related constants
003530  003841  #CONST
003531  003845  #END
003532  003846        
003533  003847  //touch_Get() related constants
003534  003848  #CONST
003535  003856  #END
003536  003857        
003537  003858  func touch_TestBox("&rect"), 1;
003538  003859  // Syntax   : touch_Test(rect);
003539  003860  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003540  003861  //          : result := touch_Test(r); // check area at 100,200,119,229
003541  003862  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003542  003863  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003543  003864        
003544  003865  func touch_TestArea("&rect"), 1;
003545  003866  // Syntax   : touch_Test(rect);
003546  003867  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003547  003868  //          : result := touch_Test(r); // check area at 100,200,119,229
003548  003869  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003549  003870  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003550  003871        
003551  003872        
003552  003873  func __reserved51(), 0; // do not remove
003553  003874  func __reserved52(), 0; // do not remove
003554  003875        
003555  003876  //------------------------------------------------------------------//
003556  003877  //        Memory Allocation Function Prototypes
003557  003878  //------------------------------------------------------------------//
003558  003879        
003559  003880  func mem_Alloc("size"), 1;
003560  003881  // Syntax: mem_Alloc(bytesize);
003561  003882  // Usage : myvar := mem_Alloc(100);
003562  003883  // Notes : Allocate a block of memory to pointer myvar
003563  003884  //       : The allocated memory contains garbage but is a fast allocation.
003564  003885  //       : The block must later be released with mem_Free();
003565  003886  //       : returns 0 if function fails
003566  003887        
003567  003888  func mem_AllocV("size"), 1;
003568  003889  // Syntax: mem_AllocV(bytesize);
003569  003890  // Usage : myvar := mem_AllocV(100);
003570  003891  // Notes : Allocate a block of memory to pointer myvar
003571  003892  //       : The block of memory is filled with signature values
003572  003893  //       : the block starts with A5,5A then fills with incrementing
003573  003894  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003574  003895  //       : This can be helpful when debugging
003575  003896  //       : The block must later be released with mem_Free();
003576  003897  //       : returns 0 if function fails
003577  003898        
003578  003899  func mem_AllocZ("size"), 1;
003579  003900  // Syntax: mem_AllocZ(bytesize);
003580  003901  // Usage : myvar := mem_AllocC(100);
003581  003902  // Notes : Allocate a zeroed block of memory to pointer myvar
003582  003903  //       : The block of memory is filled with zeroes
003583  003904  //       : The block must later be released with mem_Free();
003584  003905  //       : returns 0 if function fails
003585  003906        
003586  003907  func mem_Realloc("ptr", "size"), 1;
003587  003908  // Syntax: myvar := mem_Realloc("ptr", "size");
003588  003909  // Usage : myvar := mem_Realloc(ptr, size);
003589  003910  // Notes : The function may move the memory block to a new location,
003590  003911  //       : in which case the new location is returned.
003591  003912  //       : The content of the memory block is preserved up to the lesser
003592  003913  //       : of the new and old sizes, even if the block is moved.
003593  003914  //       : If the new size is larger, the value of the newly allocated
003594  003915  //       : portion is indeterminate. In case that ptr is NULL,
003595  003916  //       : the function behaves exactly as mem_Alloc, assigning a new block
003596  003917  //       : of size bytes and returning a pointer to the beginning of it.
003597  003918  //       : In case that the size is 0, the memory previously allocated in
003598  003919  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003599  003920  //       : pointer is returned.
003600  003921        
003601  003922  func mem_Free("allocation"), 1;
003602  003923  // Syntax: myvar := mem_Free(allocation);
003603  003924  // Usage : myvar := mem_Free(myvar);
003604  003925  // Notes : De-allocate a block of memory previously created with
003605  003926  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003606  003927  //       : returns 0 if function fails
003607  003928        
003608  003929  func mem_Heap(), 1;
003609  003930  // Syntax: myvar := mem_Heap();
003610  003931  // Usage : myvar := mem_Heap();
003611  003932  // Notes : returns bytecount available in heap
003612  003933  //       :
003613  003934        
003614  003935  func mem_Set("ptr","char","size"), 1;
003615  003936  // Syntax: mem_Set(ptr,char,bytesize);
003616  003937  // Usage : mem_Set(p, 'A', 100);
003617  003938  // Notes : fill a block of memory with a byte value
003618  003939  //       : Note that count is a byte count, this facilitates
003619  003940  //       : clearing word aligned byte arrays when using word
003620  003941  //       : aligned packed strings.
003621  003942  //       : returns ptr
003622  003943        
003623  003944  func mem_Copy("src", "dest", "bytecount"), 1;
003624  003945  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003625  003946  // Usage : myvar := mem_Copy(p1, p2, 100);
003626  003947  // Notes : copy a word aligned block of memory from src to dest
003627  003948  //       : Note that count is a byte count, this facilitates
003628  003949  //       : copying word aligned byte arrays when using word
003629  003950  //       : aligned packed strings.
003630  003951  //       : returns src
003631  003952        
003632  003953  func mem_Compare("ptr1","ptr2","count"), 1;
003633  003954  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003634  003955  // Usage : myvar := mem_Compare(p1, p2, 100);
003635  003956  // Notes : compare word aligned blocks of memory at src, dest
003636  003957  //       : Note that count is a byte count, this facilitates
003637  003958  //       : comparing word aligned byte arrays when using word
003638  003959  //       : aligned packed strings.
003639  003960  //       : returns 0 if we have a match
003640  003961        
003641  003962  func __reserved53(), 0; // do not remove
003642  003963  func __reserved54(), 0; // do not remove
003643  003964        
003644  003965  //------------------------------------------------------------------//
003645  003966  //        FAT16 Function Prototypes
003646  003967  //------------------------------------------------------------------//
003647  003968        
003648  003969  func file_Error(), 1;
003649  003970  // Syntax: myvar := file_Error();
003650  003971  // Usage : e := file_Error();
003651  003972  // Notes : return the most recent file error.
003652  003973  //       :
003653  003974        
003654  003975  func file_Count("filename"), 1;
003655  003976  // Syntax: count := file_Count("filename");
003656  003977  // Usage : count := file_Count("*.4dg");
003657  003978  // Notes : returns number of files found that match the criteria
003658  003979        
003659  003980  func file_Dir("filename"), 1;
003660  003981  // Syntax: count := file_Dir("filename");
003661  003982  // Usage : count := file_Dir("*.4dg");
003662  003983  // Notes : streams a string of filenames that agree with the search key
003663  003984  //       : returns number of files found that match the criteria
003664  003985        
003665  003986  func file_FindFirst("fname"), 1;
003666  003987  // Syntax: res := file_FindFirst("fname");
003667  003988  // Usage : if (file_FindFirst("*.4xe") ....
003668  003989  // Notes : returns true if at least 1 file exists
003669  003990  //       : that satisfies the file argument.
003670  003991  //       : Wildcards are usually used so if
003671  003992  //       : file_FindFirst returns true, further
003672  003993  //       : tests can be made using file_FindNext();
003673  003994  //       : to find all the files that match the
003674  003995  //       : wildcard class. Note that the stream behaviour
003675  003996  //       : is the same as file_Dir.
003676  003997  //       :
003677  003998        
003678  003999  func file_FindNext(), 1;
003679  004000  // Syntax: res := file_FindNext();
003680  004001  // Usage : while ((file_FindNext()) ....
003681  004002  // Notes : returns true if more file exists
003682  004003  //       : that satisfies the file argument
003683  004004  //       : that was given for  file_FindFirst.
003684  004005  //       : Wildcards must be used for
003685  004006  //       : file_FindFirst, else this function will
003686  004007  //       : always return zero as the only occurence
003687  004008  //       : will have already been found.
003688  004009  //       : Note that the stream behaviour
003689  004010  //       : is the same as file_Dir.
003690  004011  //       :
003691  004012        
003692  004013  func file_Exists("fname"), 1;
003693  004014  // Syntax: res := file_Exists("fname"),
003694  004015  // Usage : if(file_Exists("myfile") ....
003695  004016  // Notes : returns true if file exists
003696  004017  //       :
003697  004018        
003698  004019  func file_Open("fname", "mode"), 1;
003699  004020  // Syntax: handle := file_Open("fname","mode"),
003700  004021  // Usage : handle := file_Open("myfile.txt", 'r');
003701  004022  // Notes : returns handle if file exists
003702  004023  //       :
003703  004024        
003704  004025  func file_Close("handle"), 1;
003705  004026  // Syntax: res := file_Close("handle");
003706  004027  // Usage : res := file_Close(hnd1);
003707  004028  // Notes : returns true if file closed ok
003708  004029  //       :
003709  004030        
003710  004031  func file_Read("*dest", "size", "handle"), 1;
003711  004032  // Syntax: res := file_Read("*dest", "size", "handle"),
003712  004033  // Usage : res := file_Read(memblock,20,hnd1);
003713  004034  // Notes : returns number of characters read
003714  004035  //       : if "dest" is zero, data is read direct to GRAM window
003715  004036  //       :
003716  004037        
003717  004038        
003718  004039  func file_Seek("handle", "HiWord", "LoWord"), 1;
003719  004040  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003720  004041  // Usage : res := file_Seek(hSource, 0, 0x1234);
003721  004042  // Notes : set file position to 0x00001234 (byte position 4660)
003722  004043  //       : for the file handle so subsequent data may be read
003723  004044  //       : from that position onwards with file_GetC(...),
003724  004045  //       : file_GetW(...) or file_GetS(...), or an image
003725  004046  //       : can be displayed with file_Image(...)
003726  004047  // Notes : returns true if ok, usually ignored
003727  004048        
003728  004049  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003729  004050  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003730  004051  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003731  004052  // Notes : set file seek position to 123000
003732  004053  //       : for the file handle so subsequent data may be read
003733  004054  //       : from that record position onwards with file_GetC(...),
003734  004055  //       : file_GetW(...) or file_GetS(...), or an image
003735  004056  //       : can be displayed with file_Image(...)
003736  004057  // Notes : returns true if ok, usually ignored
003737  004058        
003738  004059  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003739  004060  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003740  004061  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003741  004062  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003742  004063  //       : returns true if function succeeded
003743  004064        
003744  004065  func file_Write("*source", "size", "handle"), 1;
003745  004066  // Syntax: res := fwrite("*source", "size", "handle"),
003746  004067  // Usage : res := fwrite(memblock, 20, hnd1);
003747  004068  // Notes : returns number of bytes written
003748  004069  //       :
003749  004070        
003750  004071  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003751  004072  // Syntax: file_Size("handle", &HiWord, &LoWord);
003752  004073  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003753  004074  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003754  004075  //       : returns true if function succeeded
003755  004076        
003756  004077  func file_Image("x", "y", "handle"), 1;
003757  004078  // Syntax: file_Image(x, y, handle);
003758  004079  // Usage : file_Image(10, 10, hnd1);
003759  004080  // Notes : Display an image from a file at the current file position.
003760  004081  //       : The image is displayed at x,y (with respect to top left corner).
003761  004082  //       : If there is more than 1 image in the file, it can be
003762  004083  //       : accessed with file_Seek(...)
003763  004084        
003764  004085  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003765  004086  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003766  004087  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003767  004088  // Notes : Save a image from screen to file at the current file position.
003768  004089  //       : The image can later be displayed with file_Image(...);
003769  004090  //       : The file may be opened in append mode to accumulate multiple
003770  004091  //       : images. Later, the images can be accessed with file_Seek(...);
003771  004092  //       : Note that the image will be sector aligned.
003772  004093  //       : All image headers must start on a sector boundary.
003773  004094  //       : The image is saved from x, y (with respect to top left corner)
003774  004095  //       : and the capture area is determined by "width" and "height".
003775  004096  //       : returns 0 if function succeeded
003776  004097        
003777  004098  func file_PutC("char","handle"), 1;
003778  004099  // Syntax: file_PutC("char", "handle");
003779  004100  // Usage : file_PutC('x', hndl);
003780  004101  // Notes : returns true if function succeeded
003781  004102        
003782  004103  func file_GetC("handle"), 1;
003783  004104  // Syntax: file_GetC("handle");
003784  004105  // Usage : mychar := fgetC("handle");
003785  004106  // Notes : returns next char from file
003786  004107        
003787  004108  func file_PutW("word","handle"), 1;
003788  004109  // Syntax: file_PutW("word","handle");
003789  004110  // Usage : file_PutW(0x1234, hndl);
003790  004111  // Notes : returns true if function succeeded
003791  004112        
003792  004113  func file_GetW("handle"), 1;
003793  004114  // Syntax: file_GetW("handle");
003794  004115  // Usage : myword := fgetW("handle");
003795  004116  // Notes : returns next word in file
003796  004117        
003797  004118  func file_PutS("*source", "handle"), 1;
003798  004119  // Syntax: res := file_Puts("*source", "handle"),
003799  004120  // Usage : res := file_Puts(mystring, hnd1);
003800  004121  // Notes : returns number of characters written
003801  004122  //       :
003802  004123        
003803  004124  func file_GetS("*string", "size", "handle"), 1;
003804  004125  // Syntax: res := file_Gets("*string", "size", "handle");
003805  004126  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003806  004127  // Notes : get a string from a file
003807  004128  //       : returns pointer to string or null if failed.
003808  004129  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003809  004130  //       : NB:- only reads up to "size-1" characters into "string"
003810  004131  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003811  004132  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003812  004133  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003813  004134  //       : C] It reaches the end of file
003814  004135  //       : D] A read error occurs.
003815  004136        
003816  004137        
003817  004138  func file_Erase("fname"), 1;
003818  004139  // Syntax: res := file_Erase("fname");
003819  004140  // Usage : res := file_Erase("myfile.txt");
003820  004141  // Notes : returns true if successful
003821  004142  //       :
003822  004143        
003823  004144  func file_Rewind("handle"), 1;
003824  004145  // Syntax: res := file_Rewind("handle");
003825  004146  // Usage : res := file_Rewind(hnd1);
003826  004147  // Notes : returns true if file rewound ok (usually ignored)
003827  004148  //       : resets the file pointer the the beginning of the open file.
003828  004149        
003829  004150  func file_LoadFunction("fname.4xe"), 1;
003830  004151  // Syntax: res := file_LoadFunction("fname.4fn");
003831  004152  // Usage : myfunc := file_LoadFunction(myfuncname);
003832  004153  // Notes : Load a function or program from disk and
003833  004154  //       : return a function pointer to the allocation.
003834  004155  //       : The function can then be invoked just like any other
003835  004156  //       : function would be called via a function pointer.
003836  004157  //       : Parameters may be passed to it in a conventional way.
003837  004158  //       : The function may be discarded at any time when no
003838  004159  //       : longer required, thus freeing its memory resources.
003839  004160  //       : The loaded function can be discarded with mem_Free(..)
003840  004161  //       : eg:
003841  004162  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003842  004163  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003843  004164  //       : then elsewhere in your program:-
003844  004165  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003845  004166  //       : if(res == QUIT_APPLICATION) goto exitApp;
003846  004167  //       : Later in your program, when popupWindow is no longer
003847  004168  //       : required for the application:-
003848  004169  //       : res := mem_Free(popupWindow);
003849  004170  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003850  004171  //       : The callers stack is shared by the loaded function,
003851  004172  //       : however any global variables in the loaded function
003852  004173  //       : are private to that function.
003853  004174  //
003854  004175        
003855  004176  func file_Run("fname.4xe", "arglistptr"), 1;
003856  004177  // Syntax: res := file_Run("fname.4xe","arglistptr");
003857  004178  // Usage : res := file_Run(fname, argptr);
003858  004179  // Notes : current program releases any allocated memory but
003859  004180  //       : retains the stack and global memory.
003860  004181  //       : If arglistptr is 0, no arguments are passed, else
003861  004182  //       : arglist points to an array, the first element being
003862  004183  //       : the number of elements in the array.
003863  004184  //       : func 'main' in the called program accepts
003864  004185  //       : the arguments, if any. The arguments can only
003865  004186  //       : be passed by value, no pointers or references can be
003866  004187  //       : used as all memory is cleared before the file
003867  004188  //       : is loaded. Refer to file_Exec and file_LoadFunction
003868  004189  //       : for functions that can pass by reference.
003869  004190        
003870  004191  func file_Exec("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Exec("fname.4xe","arglistptr");
003873  004194  // Notes : returns like a function, current program
003874  004195  //       : calling program is kept active and control returns to it.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts the arguments.
003879  004200  //       : This function is similar to file_LoadFunction(...), however,
003880  004201  //       : the function argument list is passed by pointer, and
003881  004202  //       : the memory consumed by the function is released as
003882  004203  //       : soon as the function completes.
003883  004204        
003884  004205  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003885  004206  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003886  004207  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003887  004208  // Notes : Reads a control file to create an image list.
003888  004209  //       : Returns NULL if function fails.
003889  004210  //       : Returns a handle (pointer to the memory allocation) to the
003890  004211  //       : image control list that has been created.
003891  004212  //       : "fname1" is the control list filename "*.dat"
003892  004213  //       : "fname2" is the image filename "*.gci"
003893  004214        
003894  004215  // Notes : This function Calculates the size of a chunk of memory required for
003895  004216  //       : a image list and populates it from the image control file ("*.dat")
003896  004217  //       : therefore, when imagelist is no longer required, you must de-allocate
003897  004218  //       : the image list memory by using eg:- mem_Free(hImagelist);
003898  004219  //       : to restore the heap.
003899  004220  //       :
003900  004221  //       : mode 0:- it is assumed that there is a graphics file with the
003901  004222  //       : file extension "fname2.gci". In this case, the images have been stored
003902  004223  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003903  004224  //       : "fname1.dat" file are saved in the image control so that the image control
003904  004225  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003905  004226  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003906  004227  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003907  004228  //       : for the file offsets and save them in the relevant entries in the image control.
003908  004229  //       : The penalty is that images take longer to find when displayed due to file_Seek
003909  004230  //       : overheads.
003910  004231  //
003911  004232  //       : mode 1:- it is assumed that there is a graphics file with the
003912  004233  //       : file extension "fname2.gci". In this case, the images have been stored
003913  004234  //       : in a FAT16 file concurrently, and the offset of the images are saved
003914  004235  //       : in the image control so that image file (*.gci) can be mapped to directly.
003915  004236  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003916  004237  //       : internally. This means that there is no seek time penalty, however, the
003917  004238  //       : image list takes a lot longer to build, as all the seeking is done at control
003918  004239  //       : build time.
003919  004240        
003920  004241  //       : mode 2:- the graphics file with the is placed in a partitioned area
003921  004242  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003922  004243  //       : disk, and the absolute address of the images are saved in the DAT file
003923  004244  //       : This is the fastest operation of the image control as there is no seeking
003924  004245  //       : or other disk activity taking place.
003925  004246        
003926  004247  func file_Mount(), 1;
003927  004248  // Syntax: r := file_Mount();
003928  004249  // Usage : r := file_Mount();
003929  004250  // Notes : Create a control block for FAT16 and mount the File System
003930  004251        
003931  004252  func file_Unmount(), 0;
003932  004253  // Syntax: file_Unmount();
003933  004254  // Usage : file_Unmount();
003934  004255  // Notes : release any control block and buffers for FAT16
003935  004256  //       : and unmount the File System
003936  004257        
003937  004258  func file_PlayWAV("fname1"), 1;
003938  004259  // Syntax: file_PlayWAV("fname1");
003939  004260  // Usage : file_PlayWAV("ding.wav");
003940  004261  // Notes : Play a wave file with filename "fname1"
003941  004262  //       : This function automatically grabs a chunk
003942  004263  //       : of memory for a file buffer, and a wave
003943  004264  //       : buffer. The minimum memory requirement is
003944  004265  //       : about 580 bytes for the disk io service and
003945  004266  //       : a minimum wave buffer size of 1024. The siz
003946  004267  //       : of the wave buffer allocation
003947  004268  //       : can be increased by the snd_BufSize function.
003948  004269  //       : The default size 1024 bytes.
003949  004270  //       : NB the memory is only required during the
003950  004271  //       : duration of play, and is automatically
003951  004272  //       : released while not in use.
003952  004273  //       : See the Sound Class services for other associated controls.
003953  004274  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003954  004275  //       : If errors occured, the folling is returned
003955  004276  //       : -7  : Insufficient memory available for WAV buffer and file
003956  004277  //       : -6  : cant play this rate
003957  004278  //       : -5  : no data chunk found in first rsector
003958  004279  //       : -4  : no format data
003959  004280  //       : -3  : no wave chunk signature
003960  004281  //       : -2  : bad wave file format
003961  004282  //       : -1  : file not found
003962  004283        
003963  004284  func file_Rename("fname1", "fname2"), 1;     // rename a file
003964  004285  // Syntax: file_Rename ("oldname", "newname"),
003965  004286  // Usage : file_Rename ("file.txt", "file.bak");
003966  004287  // Notes : Renames a file on uSD.
003967  004288  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003968  004289  //       : Returns TRUE, if successful.
003969  004290        
003970  004291  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003971  004292  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003972  004293  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003973  004294  // Notes : year is a 4 digit year
003974  004295  //       : Due to limitations of FAT16 only even seconds are stored
003975  004296  //       : The handle must be closed before the file information is updated
003976  004297  //       : returns TRUE if date + time + handle valid
003977  004298  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003978  004299        
003979  004300  func __reserved57(), 0; // do not remove
003980  004301  func __reserved58(), 0; // do not remove
003981  004302        
003982  004303  //------------------------------------------------------------------------------
003983  004304  // FILEIO Error Code Constants
003984  004305  //------------------------------------------------------------------------------
003985  004306  #CONST
003986  004332  #END
003987  004333        
003988  004334  //------------------------------------------------------------------------------
003989  004335  // DISK struct offsets
003990  004336  //------------------------------------------------------------------------------
003991  004337  #CONST
003992  004354  #END
003993  004355        
003994  004356  //------------------------------------------------------------------------------
003995  004357  // FILE struct offsets
003996  004358  //------------------------------------------------------------------------------
003997  004359  #CONST
003998  004378  #END
003999  004379        
004000  004380        
004001  004381  //------------------------------------------------------------------//
004002  004382  //        Sound Class Services
004003  004383  //------------------------------------------------------------------//
004004  004384        
004005  004385  func snd_Volume("var"), 0;
004006  004386  // Syntax: snd_Volume("var");
004007  004387  // Usage : snd_Volume(30);
004008  004388  // Notes : set sound playback volume.  Var must
004009  004389  //       : be in the range from 8 (min volume)
004010  004390  //       : to 127 (max volume). If var is less
004011  004391  //       : than 8 volume is set to 8, and if
004012  004392  //       : var > 127 it is set to 127.
004013  004393        
004014  004394  func snd_Pitch("pitch"), 1;
004015  004395  // func snd_Pitch("freq"), 1;
004016  004396  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004017  004397  // Notes : sets the samples playback rate to a different frequency
004018  004398  //       : The minimum value is 4khz
004019  004399  //       : Setting the pitch to zero restores the original sample rate
004020  004400  //       : Return value is the samples original sample rate.
004021  004401        
004022  004402  func snd_BufSize("var"), 0;
004023  004403  // Syntax: snd_BufSize("var");
004024  004404  // Usage : snd_BufSize(2);
004025  004405  // Notes : specify the a memory chunk size for the wavefile buffer.
004026  004406  //       : default size 1024 bytes.
004027  004407  //       : 0 = 1024 bytes (default)
004028  004408  //       : 1 = 2048 bytes
004029  004409  //       : 2 = 4096 bytes
004030  004410  //       : 3 = 8192 bytes
004031  004411        
004032  004412  func snd_Stop(), 0;
004033  004413  // Syntax: snd_Stop();
004034  004414  // Usage : snd_Stop();
004035  004415  // Notes : stop any sound that is playing, releasing
004036  004416  //       : buffers and closes any open wav file.
004037  004417        
004038  004418  func snd_Pause(), 0;
004039  004419  // Syntax: snd_Pause();
004040  004420  // Usage : snd_Pause();
004041  004421  // Notes : pauses any sound that is playing, does nothing
004042  004422  //       : until sound is resumed with snd_Continue().
004043  004423  //       : The sample cam be terminated with snd_Stop.
004044  004424  //       : buffers and closes any open wav file.
004045  004425        
004046  004426  func snd_Continue(), 0;
004047  004427  // Syntax: snd_Continue();
004048  004428  // Usage : snd_Continue();
004049  004429  // Notes : resume any sound that is paused by snd_Pause.
004050  004430        
004051  004431  func snd_Playing(), 1;
004052  004432  // Syntax: snd_Playing();
004053  004433  // Usage : r := snd_Playing();
004054  004434  // Notes : returns 0 if sound has finished playing,
004055  004435  //       : else return number of 512 byte blocks to go.
004056  004436        
004057  004437  func snd_Freq("Freq", "Duration"), 1;
004058  004438  // Syntax: snd_Freq("Freq", "Duration");
004059  004439  // Usage : r := snd_Freq(1000, 2000);
004060  004440  // Notes : Returns 0 if note cannot be played because a wav file is playing
004061  004441  //       : else return True.
004062  004442  //       : Minimum Freq is 20
004063  004443  //       : This will produce a pure Square wave and is designed for driving
004064  004444  //       : Piezo transducers which require this sort of drive. It can also be
004065  004445  //       : used to drive the amp on displays with audio.
004066  004446        
004067  004447        
004068  004448  func __reserved60(), 0; // do not remove
004069  004449  func __reserved61(), 0; // do not remove
004070  004450  func __reserved62(), 0; // do not remove
004071  004451        
004072  004452  //=========================================================================================================
004073  004453  // String functions
004074  004454  //=========================================================================================================
004075  004455        
004076  004456  func str_Ptr("&var"), 1;
004077  004457  // Syntax: str_Ptr(&var);
004078  004458  // Usage : p := str_Ptr(&var);
004079  004459  // Notes : return a byte pointer to a word region
004080  004460        
004081  004461  func str_GetD("&ptr", "&var"), 1;
004082  004462  // Syntax: str_GetD(&ptr, &var);
004083  004463  // Usage : ok := str_GetD(&ptr, &var);
004084  004464  // Notes : convert number in a string to DWORD ( myvar[2] )
004085  004465  //       : returns true if function succeeds, advancing ptr
004086  004466        
004087  004467  func str_GetW("&ptr", "&var"), 1;
004088  004468  // Syntax: str_GetW(&ptr, &var);
004089  004469  // Usage : ok := str_GetW(&ptr, &var);
004090  004470  // Notes : convert number in a string to WORD ( myvar )
004091  004471  //       : returns true if function succeeds, advancing ptr
004092  004472        
004093  004473  func str_GetHexW("&ptr", "&var"), 1;
004094  004474  // Syntax: str_GetHexW(&ptr, &var);
004095  004475  // Usage : ok := str_GetHexW(&ptr, &var);
004096  004476  // Notes : convert HEX number in a string to WORD ( myvar )
004097  004477  //       : returns true if function succeeds, advancing ptr
004098  004478        
004099  004479  func str_GetC("&ptr", "&var"), 1;
004100  004480  // Syntax: str_GetC(&ptr, &var);
004101  004481  // Usage : ok := str_GetC(&ptr, &var);
004102  004482  // Notes : get a valid ascii char in a string to WORD ( myvar )
004103  004483  //       : returns true if function succeeds, advancing ptr
004104  004484        
004105  004485  func str_GetByte("ptr"), 1;
004106  004486  // Syntax: str_GetByte(ptr);
004107  004487  // Usage : myvar := str_GetByte(ptr);
004108  004488  // Notes : get a byte to myvar
004109  004489  //       : returns value
004110  004490        
004111  004491  func str_GetWord("ptr"), 1;
004112  004492  // Syntax: GetWord(ptr);
004113  004493  // Usage : GetWord(ptr);
004114  004494  // Notes : get a word to myvar
004115  004495  //       : returns value
004116  004496        
004117  004497  func str_PutByte("ptr","val"), 0;
004118  004498  // Syntax: str_PutByte(ptr);
004119  004499  // Usage : myvar := str_PutByte(ptr);
004120  004500  // Notes : put a byte at ptr
004121  004501  //       : returns value
004122  004502        
004123  004503  func str_PutWord("ptr","val"), 0;
004124  004504  // Syntax: str_PutWord("ptr","val");
004125  004505  // Usage : str_PutWord(p,100);
004126  004506  // Notes : put word 100 at current pointer location
004127  004507  //       : returns value
004128  004508        
004129  004509  func str_Match("&ptr", "*str"), 1;
004130  004510  // Syntax: str_Match(&ptr, *str);
004131  004511  // Usage : r := str_Match(&p, "hello");
004132  004512  // Notes : Case sensitive match
004133  004513  //       : returns true if function succeded, andvancing pointer to position past
004134  004514  //       : the matched item. Note that any whitespace characters are skipped
004135  004515  //       : in the source string prior to the test.
004136  004516        
004137  004517  func str_MatchI("&ptr", "*str"), 1;
004138  004518  // Syntax: str_MatchI(&ptr, *str);
004139  004519  // Usage : r := str_MatchI(&p, "hello");
004140  004520  // Notes : Case insensitive match
004141  004521  //       : returns true if function succeded, andvancing pointer to position past
004142  004522  //       : the matched item. Note that any whitespace characters are skipped
004143  004523  //       : in the source string prior to the test.
004144  004524        
004145  004525  func str_Find("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Find(&ptr, *str);
004147  004527  // Usage : n := str_Find(&p, "hello");
004148  004528  // Notes : given the address of a pointer to a source string as the
004149  004529  //       : first argument, and a pointer to a test string as the second
004150  004530  //       : argument, attempt to find the position of the matching string
004151  004531  //       : in the source string. The test is performed with case sensitivity.
004152  004532  //       : return 0 if not found, else returns the address of the first
004153  004533  //       : character of the match. NB:- The source pointer is not altered.
004154  004534        
004155  004535  func str_FindI("&ptr", "*str"), 1;
004156  004536  // Syntax: str_Find(&ptr, *str);
004157  004537  // Usage : n := str_Find(&p, "hello");
004158  004538  // Notes : given the address of a pointer to a source string as the
004159  004539  //       : first argument, and a pointer to a test string as the second
004160  004540  //       : argument, attempt to find the position of the matching string
004161  004541  //       : in the source string. The test is performed with no case
004162  004542  //       : sensitivity, eg upper and lower case chars are accepted.
004163  004543  //       : return 0 if not found, else returns the address of the first
004164  004544  //       : character of the match. NB:- The source pointer is not altered.
004165  004545        
004166  004546  func str_Length("ptr"), 1;
004167  004547  // Syntax: str_Length(ptr);
004168  004548  // Usage : len := str_Ptr(mystring);
004169  004549  // Notes : return the length of a byte aligned string excluding terminator
004170  004550        
004171  004551  func str_Printf("&ptr", "*format"), 1;
004172  004552  // Syntax: str_Printf("&ptr", "*format");
004173  004553  // Usage : r := str_Printf(&p, "hello");
004174  004554  // Notes : refer to documentation
004175  004555  //       :
004176  004556        
004177  004557  func str_Cat("dest","src"), 1;
004178  004558  // Syntax: str_Append("&dest","&src");
004179  004559  // Usage : str_Append(&buf,"Hello");
004180  004560  // Notes : Appends a copy of the source string to the destination string.
004181  004561  //       : The terminating null character in destination is overwritten by
004182  004562  //       : the first character of source, and a new null-character is appended
004183  004563  //       : at the end of the new string formed by the concatenation of both in destination.
004184  004564  //       : returns destination.
004185  004565        
004186  004566  func str_CatN("dest","src","count"), 1;
004187  004567  // Syntax: str_Append("&dest","&src","count");
004188  004568  // Usage : str_Append(&buf,"Monday",3);
004189  004569  // Notes : Appends a copy of the source string to the destination string.
004190  004570  //       : The number of characters copied is limited by "count".
004191  004571  //       : The terminating null character in destination is overwritten by
004192  004572  //       : the first character of source, and a new null-character is appended
004193  004573  //       : at the end of the new string formed by the concatenation of both in destination.
004194  004574  //       : returns destination.
004195  004575        
004196  004576        
004197  004577  func str_ByteMove("src", "dest", "count"), 1;
004198  004578  // Syntax   : str_ByteMove(src, dest, bytecount);
004199  004579  // Input    : STR *source points to byte aligned source.
004200  004580  //          : STR *dest   points to byte aligned destination.
004201  004581  //          : VAR count   number of bytes to transfer.
004202  004582  // Usage    : nextpos := str_ByteMove(s, d, 100);
004203  004583  // Notes    : copy bytes from "src" to "dest", stopping only
004204  004584  //          : when "count" is exhausted.
004205  004585  //          : No terminator is appended, it is purely a
004206  004586  //          : byte copy, and any zeroes encountered will
004207  004587  //          : also be copied.
004208  004588  // Returns  : returns a pointer to the end of the destination
004209  004589  //          : (which is "dest" + "count")
004210  004590        
004211  004591        
004212  004592  func str_Copy("dest", "src"), 1;
004213  004593  // Syntax   : str_Copy(dest, src);
004214  004594  // Input    : STR *dest   points to byte aligned destination.
004215  004595  //          : STR *source points to byte aligned source.
004216  004596  // Usage    : nextplace := str_Copy(d, s);
004217  004597  // Notes    : copy a string from "src" to "dest", stopping only
004218  004598  //          : when the end of source string "src" is encountered
004219  004599  //          : (0x00 terminator).
004220  004600  //          : The terminator is always appended, even if "src" is
004221  004601  //          : an empty string.
004222  004602  // Returns  : returns a pointer to the 0x00 string terminator at
004223  004603  //          : end of "dest" (which is "dest" + str_Length(src); )
004224  004604        
004225  004605        
004226  004606  func str_CopyN("dest", "src", "count"), 1;
004227  004607  // Syntax   : str_CopyN(dest, src, bytecount);
004228  004608  // Input    : STR *dest   points to byte aligned destination.
004229  004609  //          : STR *source points to byte aligned source.
004230  004610  //          : VAR count   max number of chars to copy.
004231  004611  // Usage    : nextplace := str_CopyN(d, s, 100);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when "count" is exhausted, or end of source
004234  004614  //          : string "str" is encountered (0x00 string terminator).
004235  004615  //          : The terminator is always appended, even if
004236  004616  //          : "count" is zero, or "src" is a null string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator
004238  004618  //          : (which is "dest" + whatever was copied)
004239  004619        
004240  004620        
004241  004621  func __reserved63(), 0; // do not remove
004242  004622  func __reserved64(), 0; // do not remove
004243  004623  func __reserved65(), 0; // do not remove
004244  004624  func __reserved66(), 0; // do not remove
004245  004625        
004246  004626  //=========================================================================================================
004247  004627  // FLASH memory functions
004248  004628  //=========================================================================================================
004249  004629  func flash_GetByte("bank", "ptr"), 1;
004250  004630  // Syntax   : flash_GetByte(bank, ptr);
004251  004631  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004252  004632  // Notes    : Reads a single byte from any flash location.
004253  004633  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004254  004634  //          : which is the header signature for a valid program.
004255  004635  // Returns  : the byte value from the location
004256  004636        
004257  004637        
004258  004638  func flash_GetWord("bank", "ptr"), 1;
004259  004639  // Syntax   : flash_GetWord(bank, ptr);
004260  004640  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004261  004641  // Notes    : Reads a single word from any flash location.
004262  004642  //          : The pointer is byte aligned.
004263  004643  //          : If the bank is read protected, only the first word can be read
004264  004644  //          : which is the header signature for a valid program (0xAA55).
004265  004645  // Returns  : the byte value from the location
004266  004646        
004267  004647        
004268  004648  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004269  004649  // Syntax   : flash_Copy(bank, ptr);
004270  004650  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004271  004651  // Notes    : Copies bytes from any flash locations to a user buffer.
004272  004652  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004273  004653  //          : If the bank is read protected, 0 bytes will be read
004274  004654  //          : which is the header signature for a valid program (0xAA55).
004275  004655  // Returns  : the count of bytes transferred.
004276  004656        
004277  004657        
004278  004658  func flash_Run("bank"), 1;
004279  004659  // Syntax    : flash_Run(bankx);
004280  004660  // Usage     : res := flash_Run(FLASHBANK_5);
004281  004661  // Notes     : Restarts the processor, running code from the required
004282  004662  //           : flash bank. bank may be a variable, or one of the
004283  004663  //           : pre-defined constants:-
004284  004664  //           :    FLASHBANK_0                 //0x00
004285  004665  //           :    FLASHBANK_1                 //0x01
004286  004666  //           :    FLASHBANK_2                 //0x02
004287  004667  //           :    FLASHBANK_3                 //0x03
004288  004668  //           :    FLASHBANK_4                 //0x04
004289  004669  //           :    FLASHBANK_5                 //0x05
004290  004670  // returns    : This function should net return as it restarts
004291  004671  //        : the processor and jumps to the required bank,
004292  004672  //        : If it does return, -1 indicates incorrect/invalid
004293  004673  //        : bank number, and -2 indicates no valid program
004294  004674  //        : in the selected bank.
004295  004675        
004296  004676  func flash_Bank(), 1;
004297  004677  // Syntax   : flash_Bank();
004298  004678  // Usage    : myvar := flash_Bank();
004299  004679  // Notes    : Identifies which flash bank the code is running from.
004300  004680  // Returns  : The FLASH bank that code is currently running from, 0-5.
004301  004681        
004302  004682        
004303  004683  func flash_EraseBank("bank", "confirmation"), 1;
004304  004684  // Syntax   : flash_EraseBank(bank, confirmation);
004305  004685  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004306  004686  // Notes    : This function should be used with extreme caution.
004307  004687  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004308  004688  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004309  004689  //          : a protected bank will not be erased, and function will return with 0
004310  004690  //          : If the destination bank is the same as the execution bank, the processor will reset
004311  004691  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004312  004692  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004313  004693  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004314  004694  // Returns  : returns true if the function succeeded
004315  004695  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004316  004696        
004317  004697  func flash_LoadFile("bank", "filename"), 1;
004318  004698  // Syntax   : flash_LoadFile(bank, ptr);
004319  004699  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004320  004700  // Notes    : Copies a file from uSD to the required flashbank.
004321  004701  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004322  004702  // Returns  : returns true if the function succeeded.
004323  004703        
004324  004704        
004325  004705  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004326  004706  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004327  004707  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004328  004708  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004329  004709  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004330  004710  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004331  004711  // Returns  : returns true if the function succeeded.
004332  004712        
004333  004713        
004334  004714  func flash_putstr("bank", "ptr"), 1;
004335  004715  // Syntax   : flash_putstr(bank, ptr);
004336  004716  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004337  004717  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004338  004718  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004339  004719  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004340  004720        
004341  004721  func flash_Blit16("bank", "offset", "count"), 1;
004342  004722  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004343  004723  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004344  004724  // Notes    : Blit an image to a GRAM window from FLASH storage.
004345  004725  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004346  004726  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004347  004727        
004348  004728  func flash_Blit8("bank", "offset", "count"), 1;
004349  004729  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004350  004730  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004351  004731  // Notes    : Blit an image to a GRAM window from FLASH storage.
004352  004732  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004353  004733  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004354  004734        
004355  004735  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004356  004736  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004357  004737  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004358  004738  // Notes    : Blit an image to a GRAM window from FLASH storage.
004359  004739  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004360  004740  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004361  004741        
004362  004742  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004363  004743  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004364  004744  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004365  004745  // Notes    : Blit an image to a GRAM window from FLASH storage.
004366  004746  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004367  004747  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004368  004748        
004369  004749  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004370  004750  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004371  004751  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004372  004752  // Notes    : Blit an image to a GRAM window from FLASH storage.
004373  004753  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004374  004754  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004375  004755        
004376  004756  func flash_Exec("bank", "arglistptr"), 1;
004377  004757  // Syntax: res := flash_Exec("bank","arglistptr");
004378  004758  // Usage : res := flash_Exec("bank","arglistptr");
004379  004759  // Notes : returns like a function, current program
004380  004760  //       : calling program is kept active and control returns to it.
004381  004761  //       : If arglistptr is 0, no arguments are passed, else
004382  004762  //       : arglist points to an array, the first element being
004383  004763  //       : the number of elements in the array.
004384  004764  //       : func 'main' in the called bank accepts the arguments.
004385  004765  // WARNING Not currently implemented!
004386  004766        
004387  004767        
004388  004768  func __reserved68(), 0; // do not remove
004389  004769  func __reserved69(), 0; // do not remove
004390  004770  func __reserved70(), 0; // do not remove
004391  004771        
004392  004772  //=========================================================================================================
004393  004773  // I/O and hardware functions
004394  004774  //=========================================================================================================
004395  004775        
004396  004776        
004397  004777        
004398  004778        
004399  004779  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004400  004780  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004401  004781  // Syntax: pin_Pulseout(pin, value);
004402  004782  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004403  004783  // Notes : only available on PA0 to PA9
004404  004784  //       : Invert the state of an output for "value" milliseconds.
004405  004785  //       : pulseout is non blocking, that is, code execution may continue while
004406  004786  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004407  004787  //       : If not already an output, pin is automatically made a push/pull output,
004408  004788  //       : and the last state of its output latch will determine pulse polarity.
004409  004789  //       : It's its open drain state is not altered if the pin was already an output.
004410  004790  //       : If pulseout is called while pulseout is still active, the pulse timer
004411  004791  //       : will simply be updated with the new "value" and the pulse will continue
004412  004792  //       : with the extended value.
004413  004793  //       : returns true if the pin number is legal (usually ignored)
004414  004794        
004415  004795        
004416  004796  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004417  004797  // Syntax: pin_Counter(pin, mode, userfunc);
004418  004798  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004419  004799  // Notes : only available on PA4 to PA9
004420  004800  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004421  004801  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004422  004802  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004423  004803  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004424  004804  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004425  004805  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004426  004806  //       : The pin may be configured as an input or output, the function behaves the same.
004427  004807  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004428  004808  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004429  004809  //       : "mode" has the following effect:-
004430  004810  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004431  004811  //       : mode COUNT_RISE(1) = increment on every rising edge
004432  004812  //       : mode COUNT_FALL(2) = increment on every falling edge
004433  004813  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004434  004814        
004435  004815  //------------------------------------------------------------------//
004436  004816  // pin counter mode constants                                       //
004437  004817  //------------------------------------------------------------------//
004438  004818  #CONST
004439  004823  #END
004440  004824        
004441  004825  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004442  004826  // Syntax: Qencoder1(pinA, pinB, mode);
004443  004827  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004444  004828  // Notes : not available on pins PA14 and PA15
004445  004829  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004446  004830  //       : or written to at any time with peekW and pokeW using the following constants:-
004447  004831  //       : It is necessary to configure the pins first, depending on your requirements, eg
004448  004832  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004449  004833  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004450  004834  //       : Returns true if the pin numbers are legal (usually ignored)
004451  004835  //    QEN1_COUNTER_LO
004452  004836  //    QEN1_COUNTER_HI
004453  004837  //    QEN1_DELTA This is reset to 0 when read
004454  004838        
004455  004839  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004456  004840  // Syntax: Qencoder2(pinA, pinB, mode);
004457  004841  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004458  004842  // Notes : not available on pins PA14 and PA15
004459  004843  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004460  004844  //       : or written to at any time with peekW and pokeW using the following constants:-
004461  004845  //       : It is necessary to configure the pins first, depending on your requirements, eg
004462  004846  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004463  004847  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004464  004848  //       : Returns true if the pin numbers are legal (usually ignored)
004465  004849  //    QEN2_COUNTER_LO
004466  004850  //    QEN2_COUNTER_HI
004467  004851  //    QEN2_DELTA This is reset to 0 when read
004468  004852        
004469  004853        
004470  004854  func Qencoder1Reset(), 0;
004471  004855  // Syntax: Qencoder1Reset();
004472  004856  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004473  004857  // Notes :
004474  004858  //    QEN1_COUNTER_LO is reset to zero
004475  004859  //    QEN1_COUNTER_HI is reset to zero
004476  004860  //    QEN1_DELTA is reset to zero
004477  004861        
004478  004862  func Qencoder2Reset(), 0;
004479  004863  // Syntax: Qencoder2Reset();
004480  004864  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004481  004865  // Notes :
004482  004866  //    QEN2_COUNTER_LO is reset to zero
004483  004867  //    QEN2_COUNTER_HI is reset to zero
004484  004868  //    QEN2_DELTA is reset to zero
004485  004869        
004486  004870        
004487  004871  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004488  004872  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004489  004873  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004490  004874  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004491  004875  //       : Invert the state of an output at a "freq" freuency "count" times.
004492  004876  //       : PulseoutCount is non blocking, that is, code execution may continue while
004493  004877  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004494  004878  //       : If not already an output, pin is automatically made a push/pull output,
004495  004879  //       : and the last state of its output latch will determine pulse polarity.
004496  004880  //       : It's its open drain state is not altered if the pin was already an output.
004497  004881  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004498  004882  //       : will simply have the new "value" added to it.
004499  004883  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004500  004884  //       : returns true if the pin number is legal (usually ignored)
004501  004885        
004502  004886  func __reserved72(), 0; // do not remove
004503  004887        
004504  004888  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004505  004889  // Syntax: pwm_Init(pin, value);
004506  004890  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004507  004891  // Notes : only available on PA4 to PA9
004508  004892  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004509  004893  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004510  004894  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004511  004895  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004512  004896  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004513  004897  //       :                    : Repetition rate ~50hz or 20ms
004514  004898  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004515  004899  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004516  004900  //       : pwm_Init is non blocking and the pwm continues until turn off
004517  004901  //       : Returns true if the pin number is legal (usually ignored)
004518  004902        
004519  004903  //------------------------------------------------------------------------------
004520  004904  // PWM Constants
004521  004905  //------------------------------------------------------------------------------
004522  004906  #CONST
004523  004919  #END
004524  004920        
004525  004921  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004526  004922  // Syntax   : OW_Reset(PA0);
004527  004923  // Usage    : OW_Reset(PA0);
004528  004924  // Notes    : Only available on PA0 to PA13
004529  004925  //          : Resets  ONEWIRE device
004530  004926  //          : Returns the status, 0 = ACK.
004531  004927  //          :
004532  004928        
004533  004929  func OW_Read("pin"), 1;                              // read data from 1wire bus
004534  004930  // Syntax   : OW_Read(PA0);
004535  004931  // Usage    : arg1 := OW_Read(PA0);
004536  004932  // Notes    : Only available on PA0 to PA13
004537  004933  //          : Reads value of the ONEWIRE pin
004538  004934  //          : that was previously selected for ONEWIRE comms.
004539  004935  //          :
004540  004936  //          : pin = 0 : the next byte from the ONEWIRE bus
004541  004937        
004542  004938  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004543  004939  // Syntax   : OW_Read9(PA0);
004544  004940  // Usage    : OW_Read9(PA0);
004545  004941  // Notes    : Only available on PA0 to PA13
004546  004942  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004547  004943  //          : that was previously selected for ONEWIRE comms.
004548  004944  //          :
004549  004945  //          : read the 9 bits from the ONEWIRE bus
004550  004946        
004551  004947  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004552  004948  // Syntax   : OW_Write(PA0, arg);
004553  004949  // Usage    : OW_Write(PA0, arg);
004554  004950  // Notes    : Only available on PA0 to PA13
004555  004951  //          : Sends ONEWIRE data on the appropriate
004556  004952  //          : pin that was previously  selected as ONEWIRE comms.
004557  004953  //          :
004558  004954  //          : write arg to the ONEWIRE bus
004559  004955        
004560  004956  func __reserved77(), 0; // do not remove
004561  004957  func __reserved78(), 0; // do not remove
004562  004958        
004563  004959  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004564  004960  // Syntax: sys_GetDateVar(&year, &month, &day);
004565  004961  // Usage : sys_GetDateVar(&year, &month, &day);
004566  004962  // Notes : Retrieves the date values into variables
004567  004963        
004568  004964  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004569  004965  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004570  004966  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004571  004967  // Notes : Retrieves the time values into variables
004572  004968        
004573  004969  func sys_PmmC(), 0;
004574  004970  // Syntax: sys_PmmC();
004575  004971  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004576  004972  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004577  004973  //       : Can be captured to a buffer using the to( function
004578  004974  //       : Returns nothing.
004579  004975        
004580  004976  func sys_Driver(), 0;
004581  004977  // Syntax: sys_Driver();
004582  004978  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004583  004979  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004584  004980  //       : Can be captured to a buffer using the to( function
004585  004981  //       : Returns nothing.
004586  004982        
004587  004983  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004588  004984  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004589  004985  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004590  004986  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004591  004987  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004592  004988  //       : elements in each buffer. This will need to be greater than "width" for negative
004593  004989  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004594  004990  //       : pass 0 as the address for any unused traces
004595  004991  //       : X position is incremented each point by "xstep" pixels.
004596  004992  //       : Y values are derived from a Y buffer "newy" (signed values).
004597  004993  //       : 2 buffers need to be supplied, "newy" contains new
004598  004994  //       : points to be drawn, "oldy" contains most recent set
004599  004995  //       : of points to be un-drawn. After the waveform is drawn,
004600  004996  //       : "newy" buffer is automatically copied to "oldy" buffer.
004601  004997        
004602  004998        
004603  004999  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004604  005000  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004605  005001  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004606  005002  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004607  005003  //       : and calls "COMPLETEfunction" when done.
004608  005004  //       : "rate" is samples in 100 of samples per second
004609  005005  //       : Any unused IOx pins should have their buffer addresses set to 0
004610  005006  //       : For performance reasons samples are taken in chunks of 32, thus if you
004611  005007  //       : request 33 samples there will be a delay of 31 samples before
004612  005008  //       : "COMPLETEfunction" is called
004613  005009  //       : If Touch is enabled this function should be called no more than once per
004614  005010  //       : millisecond, otherwise touch behaviour could be eratic.
004615  005011        
004616  005012        
004617  005013  func sys_ErrorMessage("msgnum"), 1;
004618  005014        
004619  005015  //==============================//
004620  005016  // NeoPixel specific functions  //
004621  005017  //==============================//
004622  005018        
004623  005019  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004624  005020  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004625  005021  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004626  005022  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004627  005023  //       : data        : Address of data to be sent
004628  005024  //       : size        : number of colour 'sets' to follow
004629  005025  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004630  005026  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004631  005027  //       : Repeat      : Number of times to repeat the colours between first and last
004632  005028  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004633  005029  //       : Returns true if the pin number is legal (usually ignored)
004634  005030  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004635  005031  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004636  005032        
004637  005033  // NeoPixel related constants
004638  005034  #CONST
004639  005038  #END
004640  005039        
004641  005040  func __reserved85(), 0; // do not remove
004642  005041  func __reserved86(), 0; // do not remove
004643  005042        
004644  005043  //==============================================//
004645  005044  // spi flash device specific functions          //
004646  005045  //==============================================//
004647  005046        
004648  005047  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004649  005048  // Syntax   : spiflash_SIG("spi#","enablepin");
004650  005049  // Usage    : var := spiflash_SIG(SPI1, PA0);
004651  005050  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004652  005051  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004653  005052  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004654  005053  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004655  005054  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004656  005055  //          : byte is ignored.
004657  005056        
004658  005057  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004659  005058  // Syntax   : spiflash_ID("spi#","enablepin");
004660  005059  // Usage    : var := spiflash_ID(SPI1, PA0);
004661  005060  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004662  005061  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004663  005062  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004664  005063  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004665  005064  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004666  005065  //          : contains capacity. Refer to the device data sheet for further information.
004667  005066        
004668  005067  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004669  005068  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004670  005069  // Usage    : spiflash_BulkErase(SPI1, PA0);
004671  005070  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004672  005071  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004673  005072  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004674  005073  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004675  005074  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004676  005075  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004677  005076        
004678  005077  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004679  005078  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004680  005079  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004681  005080  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004682  005081  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004683  005082  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004684  005083  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004685  005084  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004686  005085  //          : blockAddress The address of the 64k FLASH block to be erased.
004687  005086  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004688  005087  //          : can take up to 3 milliseconds.
004689  005088        
004690  005089  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004691  005090  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004692  005091  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004693  005092  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004694  005093        
004695  005094  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004696  005095  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004697  005096  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004698  005097  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004699  005098  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004700  005099  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004701  005100  //       : returns number of characters read
004702  005101  //       : if "dest" is zero, data is read direct to GRAM window
004703  005102  //       :
004704  005103        
004705  005104  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004706  005105  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004707  005106  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004708  005107  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004709  005108  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004710  005109  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004711  005110  //       : returns number of bytes written
004712  005111  //       :
004713  005112        
004714  005113  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004715  005114  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004716  005115  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004717  005116  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004718  005117  //       : The image is displayed at x,y (with respect to top left corner).
004719  005118        
004720  005119  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004721  005120  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004722  005121  // Usage : spiflash_PutC('x', SPI1, PA0);
004723  005122  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125        
004727  005126  func spiflash_GetC("spi#", "enablepin"), 1;
004728  005127  // Syntax: spiflash_GetC("spi#", "enablepin");
004729  005128  // Usage : mychar := fgetC(SPI1, PA0);
004730  005129  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004731  005130  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004732  005131  //       : by subsequent reads or writes.
004733  005132  //       : returns next char from file
004734  005133        
004735  005134  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004738  005137  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetW("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetW("spi#", "enablepin");
004744  005143  // Usage : myword := fgetW(SPI1, PA0);
004745  005144  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  // Notes : returns next word in file
004749  005148        
004750  005149  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004751  005150  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004752  005151  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004753  005152  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155  //       : returns number of characters written
004757  005156  //       :
004758  005157        
004759  005158  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004760  005159  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004761  005160  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004762  005161  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004763  005162  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004764  005163  //       : by subsequent reads or writes.
004765  005164  //       : returns pointer to string or null if failed.
004766  005165  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004767  005166  //       : NB:- only reads up to "size-1" characters into "string"
004768  005167  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004769  005168  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004770  005169  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004771  005170  //       : C] It reaches the end of file
004772  005171  //       : D] A read error occurs.
004773  005172        
004774  005173  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004776  005175  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004777  005176  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004778  005177  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004779  005178  //       : return a function pointer to the allocation.
004780  005179  //       : The function can then be invoked just like any other
004781  005180  //       : function would be called via a function pointer.
004782  005181  //       : Parameters may be passed to it in a conventional way.
004783  005182  //       : The function may be discarded at any time when no
004784  005183  //       : longer required, thus freeing its memory resources.
004785  005184  //       : The loaded function can be discarded with mem_Free(..)
004786  005185  //       : eg:
004787  005186  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004788  005187  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004789  005188  //       : then elsewhere in your program:-
004790  005189  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004791  005190  //       : if(res == QUIT_APPLICATION) goto exitApp;
004792  005191  //       : Later in your program, when popupWindow is no longer
004793  005192  //       : required for the application:-
004794  005193  //       : res := mem_Free(popupWindow);
004795  005194  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004796  005195  //       : The callers stack is shared by the loaded function,
004797  005196  //       : however any global variables in the loaded function
004798  005197  //       : are private to that function.
004799  005198  //
004800  005199        
004801  005200  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004802  005201  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004803  005202  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004804  005203  // Notes : current program releases any allocated memory but
004805  005204  //       : retains the stack and global memory.
004806  005205  //       : If arglistptr is 0, no arguments are passed, else
004807  005206  //       : arglist points to an array, the first element being
004808  005207  //       : the number of elements in the array.
004809  005208  //       : func 'main' in the called program accepts
004810  005209  //       : the arguments, if any. The arguments can only
004811  005210  //       : be passed by value, no pointers or references can be
004812  005211  //       : used as all memory is cleared before the file
004813  005212  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004814  005213  //       : for functions that can pass by reference.
004815  005214        
004816  005215  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004819  005218  // Notes : returns like a function, current program
004820  005219  //       : calling program is kept active and control returns to it.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts the arguments.
004825  005224  //       : This function is similar to spiflash_LoadFunction(...), however,
004826  005225  //       : the function argument list is passed by pointer, and
004827  005226  //       : the memory consumed by the function is released as
004828  005227  //       : soon as the function completes.
004829  005228        
004830  005229  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004831  005230  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004832  005231  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004833  005232  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004834  005233  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004835  005234  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004836  005235  //       : Returns NULL if function fails.
004837  005236  //       : Returns a handle (pointer to the memory allocation) to the
004838  005237  //       : image control list that has been created.
004839  005238        
004840  005239  // Notes : This function Calculates the size of a chunk of memory required for
004841  005240  //       : a image list and populates it from the image control file ("*.dat")
004842  005241  //       : therefore, when imagelist is no longer required, you must de-allocate
004843  005242  //       : the image list memory by using eg:- mem_Free(hImagelist);
004844  005243  //       : to restore the heap.
004845  005244  //       :
004846  005245        
004847  005246  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004848  005247  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004849  005248  // Usage : spiflash_PlayWAV(SPI1, PA0);
004850  005249  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004851  005250  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004852  005251  //       : or writes.
004853  005252  //       : This function automatically grabs a chunk
004854  005253  //       : of memory for a file buffer, and a wave
004855  005254  //       : buffer. The minimum memory requirement is
004856  005255  //       : about 580 bytes for the disk io service and
004857  005256  //       : a minimum wave buffer size of 1024. The size
004858  005257  //       : of the wave buffer allocation
004859  005258  //       : can be increased by the snd_BufSize function.
004860  005259  //       : The default size 1024 bytes.
004861  005260  //       : NB the memory is only required during the
004862  005261  //       : duration of play, and is automatically
004863  005262  //       : released while not in use.
004864  005263  //       : See the Sound Class services for other associated controls.
004865  005264  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004866  005265  //       : If errors occured, the folling is returned
004867  005266  //       : -7  : Insufficient memory available for WAV buffer and file
004868  005267  //       : -6  : cant play this rate
004869  005268  //       : -5  : no data chunk found in first rsector
004870  005269  //       : -4  : no format data
004871  005270  //       : -3  : no wave chunk signature
004872  005271  //       : -2  : bad wave file format
004873  005272  //       : -1  : file not found
004874  005273        
004875  005274  //==============================================//
004876  005275  // more com functions                           //
004877  005276  //==============================================//
004878  005277        
004879  005278  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004880  005279  // Syntax   : com1_TXblock("buf", "bufsize");
004881  005280  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004882  005281  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004883  005282  //          : if a transmit buffer is active and space is available this function will return almost
004884  005283  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004885  005284        
004886  005285  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004887  005286  // Syntax   : com1_RXblock("buf", "bufsize");
004888  005287  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004889  005288  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004890  005289  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004891  005290  //          : immediately otherwise it will block until until the required bytes are received.
004892  005291        
004893  005292  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004894  005293  // Syntax   : com_TXblock("buf", "bufsize");
004895  005294  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004896  005295  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004897  005296  //          : if a transmit buffer is active and space is available this function will return almost
004898  005297  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004899  005298        
004900  005299  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004901  005300  // Syntax   : com_RXblock("buf", "bufsize");
004902  005301  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004903  005302  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004904  005303  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004905  005304  //          : immediately otherwise it will block until until the required bytes are received.
004906  005305        
004907  005306  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004908  005307  // Syntax   : com_TXblock("buf", "bufsize");
004909  005308  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004910  005309  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004911  005310  //          : if a transmit buffer is active and space is available this function will return almost
004912  005311  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004913  005312        
004914  005313  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004915  005314  // Syntax   : com_RXblock("buf", "bufsize");
004916  005315  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004917  005316  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004918  005317  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004919  005318  //          : immediately otherwise it will block until until the required bytes are received.
004920  005319        
004921  005320  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004922  005321  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004923  005322  // Usage : disp_BlitPixelsFromCOM1();
004924  005323  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004925  005324  //       : display from the specified com port.
004926  005325        
004927  005326  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004928  005327  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004929  005328  // Usage : disp_BlitPixelsFromCOM2();
004930  005329  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004931  005330  //       : display from the specified com port.
004932  005331        
004933  005332  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004934  005333  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004935  005334  // Usage : disp_BlitPixelsFromCOM3();
004936  005335  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004937  005336  //       : display from the specified com port.
004938  005337        
004939  005338        
004940  005339  //==============================================//
004941  005340  // crc generation functions                     //
004942  005341  //==============================================//
004943  005342        
004944  005343  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004945  005344  // *Notes   : (if you calculate all of the incoming data
004946  005345  //          : INCLUDING the CRC, the result should be 0x00
004947  005346  //          : This is equivalent to simple addition of all bytes
004948  005347  //          : and returning the negated sum an 8 bit value.
004949  005348  //          : For the standard test string "123456789",
004950  005349  //          : crc_CSUM_8 will return 0x0023.
004951  005350        
004952  005351        
004953  005352  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004954  005353  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004955  005354  //          : (if you calculate all of the incoming data
004956  005355  //          : INCLUDING the CRC, the result should be 0x0000
004957  005356  //          : For the standard test string "123456789",
004958  005357  //          : crc_16 will return 0xBB3D.
004959  005358        
004960  005359        
004961  005360  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004962  005361  // *Notes   : (if you calculate all of the incoming data
004963  005362  //          : INCLUDING the CRC, the result should be 0x0000
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_MODBUS will return 0x4B37.
004966  005365        
004967  005366        
004968  005367  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004969  005368  // *Notes   : (if you calculate all of the incoming data
004970  005369  //          : INCLUDING the CRC, the result should be 0x0000
004971  005370  //          : For the standard test string "123456789",
004972  005371  //          : crc_CCITT will return the following:-
004973  005372  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004974  005373  //          : seed = 0xFFFF, result = 0x29B1
004975  005374  //          : seed = 0x1D0F, result = 0xE5CC
004976  005375        
004977  005376  func __reserved87(), 0; // do not remove
004978  005377  func __reserved88(), 0; // do not remove
004979  005378  func __reserved89(), 0; // do not remove
004980  005379        
004981  005380  //----------------------------------------------------------------------------//
004982  005381  //  functions to support buffered transmission and reception of break signal  //
004983  005382  //----------------------------------------------------------------------------//
004984  005383        
004985  005384  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
004986  005385  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
004987  005386  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
004988  005387  // Notes : initialize a serial buffer for the COM0 output.
004989  005388  //       : The program must declare a var array as a circular buffer.
004990  005389  //       : When a TX buffer is declared for comms, the transmission
004991  005390  //       : of characters becomes non blocking. If the buffer has
004992  005391  //       : insufficient space to accept the next character from a
004993  005392  //       : serout_x() function, the excess characters will be ignored,
004994  005393  //       : and the com_Full_x() error will be asserted.   If the
004995  005394  //       : TX buffer is no longer required, just set the buffer pointer
004996  005395  //       : to zero, the size in this case doesnt matter and is ignored.
004997  005396  //       : The function can resize or reallocated to another buffer at
004998  005397  //       : any time. The buffer is flushed before any changes are made.
004999  005398  //       : "pin" designates an IO pin to control a bi-directional
005000  005399  //       : control device for half duplex mode. "pin" will go HI at the
005001  005400  //       : start of a transmission, and will return low after the final
005002  005401  //       : byte is transmitted. If not required, just set "pin" to zero.
005003  005402        
005004  005403  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005005  005404  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005006  005405  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005007  005406  // Notes : initialize a serial buffer for the COM0 output.
005008  005407  //       : The program must declare a var array as a circular buffer.
005009  005408  //       : When a TX buffer is declared for comms, the transmission
005010  005409  //       : of characters becomes non blocking. If the buffer has
005011  005410  //       : insufficient space to accept the next character from a
005012  005411  //       : serout_x() function, the excess characters will be ignored,
005013  005412  //       : and the com_Full_x() error will be asserted.   If the
005014  005413  //       : TX buffer is no longer required, just set the buffer pointer
005015  005414  //       : to zero, the size in this case doesnt matter and is ignored.
005016  005415  //       : The function can resize or reallocated to another buffer at
005017  005416  //       : any time. The buffer is flushed before any changes are made.
005018  005417  //       : "pin" designates an IO pin to control a bi-directional
005019  005418  //       : control device for half duplex mode. "pin" will go HI at the
005020  005419  //       : start of a transmission, and will return low after the final
005021  005420  //       : byte is transmitted. If not required, just set "pin" to zero.
005022  005421        
005023  005422  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005024  005423  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005025  005424  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005026  005425  // Notes : initialize a serial buffer for the COM0 output.
005027  005426  //       : The program must declare a var array as a circular buffer.
005028  005427  //       : When a TX buffer is declared for comms, the transmission
005029  005428  //       : of characters becomes non blocking. If the buffer has
005030  005429  //       : insufficient space to accept the next character from a
005031  005430  //       : serout_x() function, the excess characters will be ignored,
005032  005431  //       : and the com_Full_x() error will be asserted.   If the
005033  005432  //       : TX buffer is no longer required, just set the buffer pointer
005034  005433  //       : to zero, the size in this case doesnt matter and is ignored.
005035  005434  //       : The function can resize or reallocated to another buffer at
005036  005435  //       : any time. The buffer is flushed before any changes are made.
005037  005436  //       : "pin" designates an IO pin to control a bi-directional
005038  005437  //       : control device for half duplex mode. "pin" will go HI at the
005039  005438  //       : start of a transmission, and will return low after the final
005040  005439  //       : byte is transmitted. If not required, just set "pin" to zero.
005041  005440        
005042  005441  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005043  005442  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005044  005443  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005045  005444  // Notes : initialize a serial buffer for the COM0 output.
005046  005445  //       : The program must declare a var array as a circular buffer.
005047  005446  //       : When a TX buffer is declared for comms, the transmission
005048  005447  //       : of characters becomes non blocking. If the buffer has
005049  005448  //       : insufficient space to accept the next character from a
005050  005449  //       : serout_x() function, the excess characters will be ignored,
005051  005450  //       : and the com_Full_x() error will be asserted.   If the
005052  005451  //       : TX buffer is no longer required, just set the buffer pointer
005053  005452  //       : to zero, the size in this case doesnt matter and is ignored.
005054  005453  //       : The function can resize or reallocated to another buffer at
005055  005454  //       : any time. The buffer is flushed before any changes are made.
005056  005455  //       : "pin" designates an IO pin to control a bi-directional
005057  005456  //       : control device for half duplex mode. "pin" will go HI at the
005058  005457  //       : start of a transmission, and will return low after the final
005059  005458  //       : byte is transmitted. If not required, just set "pin" to zero.
005060  005459        
005061  005460  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005062  005461  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005063  005462  // Usage1: com_InitBrk(mybuf, 20, 0);
005064  005463  // Usage2: com_InitBrk(mybuf, 20, ':');
005065  005464  // Notes : initialize a serial capture buffer for the comms input
005066  005465  //       : The program must declare a var array as a circular buffer.
005067  005466  //       : Usage1 declares a circular buffer which will continually
005068  005467  //       : buffer characters.
005069  005468  //       : Usage2 must receive ':' before any characters will
005070  005469  //       : accumulate in the buffer.
005071  005470        
005072  005471  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005073  005472  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005074  005473  // Usage1: com1_InitBrk(mybuf, 20, 0);
005075  005474  // Usage2: com1_InitBrk(mybuf, 20, ':');
005076  005475  // Notes : initialize a serial capture buffer for the comms input
005077  005476  //       : The program must declare a var array as a circular buffer.
005078  005477  //       : Usage1 declares a circular buffer which will continually
005079  005478  //       : buffer characters.
005080  005479  //       : Usage2 must receive ':' before any characters will
005081  005480  //       : accumulate in the buffer.
005082  005481        
005083  005482  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005084  005483  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005085  005484  // Usage1: com2_InitBrk(mybuf, 20, 0);
005086  005485  // Usage2: com2_InitBrk(mybuf, 20, ':');
005087  005486  // Notes : initialize a serial capture buffer for the comms input
005088  005487  //       : The program must declare a var array as a circular buffer.
005089  005488  //       : Usage1 declares a circular buffer which will continually
005090  005489  //       : buffer characters.
005091  005490  //       : Usage2 must receive ':' before any characters will
005092  005491  //       : accumulate in the buffer.
005093  005492        
005094  005493  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005095  005494  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005096  005495  // Usage1: com3_InitBrk(mybuf, 20, 0);
005097  005496  // Usage2: com3_Init(mybuf, 20, ':');
005098  005497  // Notes : initialize a serial capture buffer for the comms input
005099  005498  //       : The program must declare a var array as a circular buffer.
005100  005499  //       : Usage1 declares a circular buffer which will continually
005101  005500  //       : buffer characters.
005102  005501  //       : Usage2 must receive ':' before any characters will
005103  005502  //       : accumulate in the buffer.
005104  005503        
005105  005504  //------------------------------------------------------------------//
005106  005505  //     break control constant                                       //
005107  005506  //------------------------------------------------------------------//
005108  005507  #constant BREAK      0xFFFD    // interpretation of the break signal
005109  005507  #constant BREAK      0xFFFD    // interpretation of the break signal
005110  005508        
005111  005509  //------------------------------------------------------------------//
005112  005510  // CONSTANTS
005113  005511  //------------------------------------------------------------------//
005114  005512        
005115  005513  #CONST
005116  005608  #END
005117  005609        
005118  005610  #CONST
005119  005614  #END
005120  005615        
005121  005616  // timebase constants for timebase_init
005122  005617  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005123  005618  #CONST
005124  005629  #END
005125  005630        
005126  005631        
005127  005632  // generic constants
005128  005633  #CONST
005129  005641  #END
005130  005642        
005131  005643        
005132  005644        
005133  005645  //gfx_Get() related constants
005134  005646  #CONST
005135  005655  #END
005136  005656        
005137  005657        
005138  005658        
005139  005659        
005140  005660  #CONST
005141  005673  #END
005142  005674        
005143  005675        
005144  005676  #CONST
005145  005701  #END
005146  005702        
005147  005703        
005148  005704        
005149  005705        
005150  005706  // timer control  related constants
005151  005707  #CONST
005152  005716  #END
005153  005717        
005154  005718        
005155  005719        
005156  005720  //------------------------------------------------------------------------------
005157  005721  // system WORD variables accesible with peekW and pokeW or pointer access
005158  005722  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005159  005723  // can also be accessed with peekW and pokeW
005160  005724  //------------------------------------------------------------------------------
005161  005725        
005162  005726  #CONST
005163  005821  #END
005164  005822        
005165  005823  #CONST
005166  005988  #END
005167  005989        
005168  005990        
005169  005991        
005170  005992  //==================================================================================================
005171  005993        
005172  005994        
005173  005995        
005174  000013      #ENDIF
005175  000014        
005176  000015        
005177  000016  //===========================================================================================
005178  000017        
005179  000018        
005180  000002        
005181  000003        
005182  000004  // generated 6/13/2020 11:09:00 AM
005183  000005  // uSDRequired:- 1   InternalRequired:- InternalRequired
005184  000006        
005185  000007  #MODE FLASHBANK_0
005186  000008        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005187  000009  #inherit "4DGL_16bitColours.fnc"
005188  000009  #inherit "4DGL_16bitColours.fnc"
005189  000004  */
005190  000005        
005191  000006        
005192  000007        
005193  000008  #CONST
005194  000149  #END
005195  000150        
005196  000010        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005197  000011  #inherit "VisualConst.inc"
005198  000011  #inherit "VisualConst.inc"
005199  000001  // Line Patterns
005200  000002  #constant  LPCOARSE    0xF0F0
005201  000002  #constant  LPCOARSE    0xF0F0
005202  000003  #constant  LPMEDIUM    0x3333
005203  000003  #constant  LPMEDIUM    0x3333
005204  000004  #constant  LPFINE      0xAAAA
005205  000004  #constant  LPFINE      0xAAAA
005206  000005  #constant  LPDASHDOT   0x03CF
005207  000005  #constant  LPDASHDOT   0x03CF
005208  000006  #constant  LPDASHDOTDOT 0x0333
005209  000006  #constant  LPDASHDOTDOT 0x0333
005210  000007  #constant  LPSOLID     0x0000
005211  000007  #constant  LPSOLID     0x0000
005212  000012        
005213  000013        
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\mainConst.inc

005214  000014  #inherit "mainConst.inc"
005215  000014  #inherit "mainConst.inc"
005216  000001  // File generated 6/13/2020 11:08:56 AM
005217  000002  // Warning! This is a generated file, any manual changes will be
005218  000003  // lost during the next generation.
005219  000004        
005220  000005  #constant  Strings1Count    4
005221  000005  #constant  Strings1Count    4
005222  000006  #constant  Strings1Size     14
005223  000006  #constant  Strings1Size     14
005224  000007  // object indexes into ImageControl
005225  000008  #CONST
005226  000026  #END
005227  000027        
005228  000028  #constant  Strings0Size     0
005229  000028  #constant  Strings0Size     0
005230  000029  #constant  Strings0StartH   0
005231  000029  #constant  Strings0StartH   0
005232  000030  #constant  Strings0StartL   0
005233  000030  #constant  Strings0StartL   0
005234  000031        
005235  000032  #constant  Strings1StartH   0x0
005236  000032  #constant  Strings1StartH   0x0
005237  000033  #constant  Strings1StartL   0x0
005238  000033  #constant  Strings1StartL   0x0
005239  000034        
005240  000035  #IFNOT EXISTS NOGLOBALS
005241  000036  var hndl ;
005242  000037  #ENDIF
005243  000015        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005244  000016  #inherit "CLPrintStrings.inc"
005245  000016  #inherit "CLPrintStrings.inc"
005246  000001  func PrintStrings(var ID, var *msgid, var String)
005247  000002      var StringID, i, ch, offs32[2], res32[2];
005248  000003      StringID := oStringss[1+ID] ;
005249  000004      if (String)
005250  000005          stringsCV[ID] := -1 ;
005251  000006      else
005252  000007          stringsCV[ID] := msgid ;
005253  000008      endif
005254  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005255  000010      txt_FontID(hFonts[ID]) ;
005256  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005257  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005258  000013        
005259  000014      if (*(StringID + Ofs_String_Transparent))
005260  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005261  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005262  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005263  000018      else
005264  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005265  000020          gfx_Clipping(ON) ;
005266  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005267  000022          gfx_Clipping(OFF) ;
005268  000023        
005269  000024      endif
005270  000025        
005271  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005272  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005273  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005274  000029        
005275  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005276  000031        
005277  000032      if (String)
005278  000033          i := 0 ;
005279  000034          ch := msgid[i++] ;
005280  000035          while (ch != 0)
005281  000036              putch(ch) ;
005282  000037              ch := msgid[i++] ;
005283  000038          wend
005284  000039      else
005285  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005286  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005287  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005288  000043          uadd_3232(res32,res32,offs32) ;
005289  000044          file_Seek(hstrings, res32[1], res32[0]);
005290  000045          repeat
005291  000046              if (*(StringID + Ofs_String_Ansi))
005292  000047                  ch := file_GetC(hstrings) ;
005293  000048              else
005294  000049                  ch := file_GetW(hstrings) ;
005295  000050              endif
005296  000051              putch(ch) ;
005297  000052          until (ch == 0) ;
005298  000053      endif
005299  000054        
005300  000055  endfunc
005301  000056        
005302  000017        
005303  000018        
005304  000019  #constant IPDatasize 22
005305  000019  #constant IPDatasize 22
005306  000020        
005307  000021  #CONST
005308  000025  #END
005309  000026        
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicCode0.inc

005310  000027  #inherit "MagicCode0.inc"
005311  000027  #inherit "MagicCode0.inc"
005312  000001  //
005313  000002  // Added 6/3/2020 4:55:10 PM
005314  000003  //
005315  000004  // MagicCode0
005316  000005  //  ----6.13---
005317  000006        
005318  000007  var values[10];
005319  000008  var gotMessage := 0;
005320  000009  var tempMessage[15];
005321  000010  var tMcount;
005322  000011  var combuf[4096];
005323  000012  var xTempSample[700];
005324  000013  var oldSample[700];
005325  000014  var processStatus;
005326  000015  var index;
005327  000016  var activeStatus:=0;
005328  000017  var agoStatus:=0;
005329  000018        
005330  000019  func getSerial()                 //new temp...
005331  000020      //print("getSerial precessing...");
005332  000021        
005333  000022      var recbyte, n, g;
005334  000023      while(com_Count() > 0)
005335  000024          if (activeStatus != agoStatus)
005336  000025              //txt_MoveCursor(4, 9);
005337  000026              //print("slider is changed to ", activeStatus,"processStatus:", processStatus);
005338  000027              break;
005339  000028          endif
005340  000029          recbyte := serin();
005341  000030          if(recbyte == 97) gotMessage := 1; // check for "a" and set message complete flag
005342  000031          if(recbyte == 98) gotMessage := 2;
005343  000032          if(gotMessage == 0) // if message not complete keep building
005344  000033              tempMessage[tMcount] := recbyte;
005345  000034              tMcount++;
005346  000035          endif
005347  000036      wend
005348  000037      if (activeStatus != agoStatus)
005349  000038          print("i'll goto break.");
005350  000039          goto p;
005351  000040      endif
005352  000041      if(gotMessage == 1)
005353  000042          //print("got1");
005354  000043          gotMessage := 0;
005355  000044          //var n;
005356  000045          var multiplier;
005357  000046          var tempval;
005358  000047          var tempdate[10];
005359  000048          tempval := 0;
005360  000049          multiplier := 1;
005361  000050          var kk := 0;
005362  000051          txt_MoveCursor(4, 33);
005363  000052          gfx_RectangleFilled(324, 68, 800, 100, BLACK);
005364  000053          print("Date:");
005365  000054          for(n := tMcount-1; n >= 0; n--)
005366  000055              if (kk<4)
005367  000056                  if(tempMessage[n] > 47 && tempMessage[n] < 58)
005368  000057                       tempval := tempval + ((tempMessage[n] - 48) * multiplier);
005369  000058                       multiplier := multiplier *10;
005370  000059                       //print("U:",tempMessage[n]);
005371  000060                  endif
005372  000061              else
005373  000062                  if(tempMessage[n] > 47 && tempMessage[n] < 58)
005374  000063                       tempdate[kk-4] := tempMessage[n] ;
005375  000064                       putchXY(695-(kk-4)*10, 80, tempMessage[n]);
005376  000065                       //print("U:", tempdate[kk-4]);
005377  000066                  else
005378  000067                      if (tempMessage[n] == 47) putchXY(695-(kk-4)*10, 80,'/');
005379  000068                  endif
005380  000069              endif
005381  000070              kk := kk + 1;
005382  000071          next
005383  000072         //if(tempMessage[0] == 97) values[0] := tempval; // if message starts with 'a' 97 being ASCII for a
005384  000073          // add morechecks here in the same format eg 'b600\r\n'
005385  000074          tMcount := 0;
005386  000075        
005387  000076          WriteObject(tLeddigits, 0, tempval);   //Is it right?
005388  000077         // WriteObject(tStrings, 0,"current temp date");
005389  000078          //if (tempval > 0 && tempval<3500)
005390  000079              for (n := 0; n<650; n++)   //mem_copy doesnt work correctly - move current data to old data
005391  000080                  oldSample[n] := xTempSample[n];
005392  000081              next
005393  000082        
005394  000083              for (n := 0; n<649; n++)  //shifting data to allow new reading
005395  000084                  xTempSample[n] := xTempSample[n+1];
005396  000085              next
005397  000086        
005398  000087              xTempSample[649] := ((tempval/10))*2;  //devide by 10 to make true integer temperature value
005399  000088              //print("xTempSample[649]:",  xTempSample[649]);
005400  000089              for (n := 0; n<650; n++) // print new pixels - old pixels blacked out or graticule color depending on location
005401  000090                  //g := 425 - oldSample[n];
005402  000091                  //(g == 425 || g == 375 || g == 325 || g == 275 || g == 225 || g == 175 || g == 125) ?  gfx_PutPixel((50+n),g ,0x0280): gfx_PutPixel((50+n),g ,BLACK);
005403  000092                  //gfx_PutPixel((55+n),(425 - xTempSample[n]) ,YELLOW);
005404  000093                  gfx_Vline((50+n),(450 - oldSample[n]),450,0x083C);   //
005405  000094                  gfx_Vline((50+n),480,450,BLACK);
005406  000095                  gfx_PutPixel((50+n),450, 0x0280);
005407  000096                  gfx_PutPixel((50+n),400, 0x0280);
005408  000097                  gfx_PutPixel((50+n),350, 0x0280);
005409  000098                  gfx_PutPixel((50+n),300, 0x0280);
005410  000099                  gfx_PutPixel((50+n),250, 0x0280);
005411  000100                  gfx_PutPixel((50+n),200, 0x0280);
005412  000101                  gfx_PutPixel((50+n),150, 0x0280);
005413  000102                  if ( activeStatus == 0 )
005414  000103                      gfx_Vline((50+n),(450 - xTempSample[n]),450,YELLOW);
005415  000104                  else
005416  000105                      gfx_Vline((50+n),(450 - xTempSample[n]),450,0x083C);
005417  000106                  endif
005418  000107                  //if (n==649)  gfx_Vline((50+n),(450 - xTempSample[n]),450,RED);
005419  000108              next
005420  000109          //endif
005421  000110      endif
005422  000111       if(gotMessage == 2)
005423  000112          print("got2");
005424  000113          gotMessage := 0;
005425  000114          //var n;
005426  000115          var tempDate:="";
005427  000116          //txt_MoveCursor(3, 3);
005428  000117          for(n := tMcount-1; n >= 0; n--)
005429  000118                  //tempval := tempval + tempMessage[n];
005430  000119                  // str_Copy(tempDate, tempMessage[n]);
005431  000120        
005432  000121          next
005433  000122          //WriteObject(tStrings, 0 ,tempDate);
005434  000123         //if(tempMessage[0] == 97) values[0] := tempval; // if message starts with 'a' 97 being ASCII for a
005435  000124          // add morechecks here in the same format eg 'b600\r\n'
005436  000125          tMcount := 0;
005437  000126        
005438  000127      p:endif
005439  000128        
005440  000129        
005441  000130        
005442  000131  endfunc
005443  000132        
005444  000133  func getSerialFrame()           //static...
005445  000134      //print("S_Frame");
005446  000135        
005447  000136      var recbyte, n, g;
005448  000137      index := 0;
005449  000138      tMcount := 0;
005450  000139      gotMessage := 0;
005451  000140      //if (activeStatus !=0 )   //clear the graph
005452  000141      for (n := 0; n<650; n++) // print new pixels - old pixels blacked out or graticule color depending on location
005453  000142          //g := 425 - oldSample[n];
005454  000143          //(g == 425 || g == 375 || g == 325 || g == 275 || g == 225 || g == 175 || g == 125) ?  gfx_PutPixel((50+n),g ,0x0280): gfx_PutPixel((50+n),g ,BLACK);
005455  000144          //gfx_PutPixel((55+n),(425 - xTempSample[n]) ,YELLOW);
005456  000145          gfx_Vline((50+n),(450 - xTempSample[n]),450,0x083C);   //
005457  000146          gfx_PutPixel((50+n),450, 0x0280);
005458  000147          gfx_PutPixel((50+n),400, 0x0280);
005459  000148          gfx_PutPixel((50+n),350, 0x0280);
005460  000149          gfx_PutPixel((50+n),300, 0x0280);
005461  000150          gfx_PutPixel((50+n),250, 0x0280);
005462  000151          gfx_PutPixel((50+n),200, 0x0280);
005463  000152          gfx_PutPixel((50+n),150, 0x0280);
005464  000153      next
005465  000154      //endif
005466  000155      while(com_Count() > 0)
005467  000156          //if (processStatus != 1 && processStatus != 3) break;
005468  000157          recbyte := serin();
005469  000158          if(recbyte == 69) gotMessage := 1; // check for "E" and set message complete flag
005470  000159        
005471  000160          if(gotMessage == 0) // if message not complete keep building
005472  000161              tempMessage[tMcount] := recbyte;
005473  000162              tMcount++;
005474  000163          endif
005475  000164        
005476  000165          if(gotMessage == 1)
005477  000166              gotMessage := 0;
005478  000167              //index := index+1;
005479  000168              var multiplier;
005480  000169              var tempval;
005481  000170              multiplier := 1;
005482  000171              tempval := 0;
005483  000172              for(n := tMcount-1; n >= 0; n--)
005484  000173                  if(tempMessage[n] > 47 && tempMessage[n] < 58)
005485  000174                      tempval := tempval + ((tempMessage[n] - 48) * multiplier);
005486  000175                      multiplier := multiplier *10;
005487  000176                  endif
005488  000177              next
005489  000178              tMcount := 0;
005490  000179              //if (activeStatus == 1 ) print("TV=", tempval,"\n");
005491  000180              if (tempval > 0 && tempval<3500)
005492  000181                  xTempSample[index] := ((tempval/10))*2;    //80 faren=160
005493  000182                  oldSample[index] := xTempSample[index];
005494  000183        
005495  000184                  gfx_Vline((50+index),(450 - xTempSample[index]),450,YELLOW);
005496  000185                  index := index+1;
005497  000186              endif
005498  000187              if (index == 650) break;
005499  000188          endif
005500  000189      wend
005501  000190      //ledDigitsDisplay(tempval, iLeddigits0+1, 340, 4, 2, 30, 1) ;
005502  000191  endfunc
005503  000192        
005504  000193        
005505  000194  func getTemp()
005506  000195      //print("getTemp");
005507  000196        
005508  000197      var recbyte, n, g;
005509  000198      index := 0;
005510  000199      tMcount := 0;
005511  000200      gotMessage := 0;
005512  000201      //print("Act_sta:", activeStatus,"ago_sta:", agoStatus, "\n");
005513  000202      if (activeStatus != agoStatus) goto q;
005514  000203      while(com_Count() > 0)
005515  000204          if (activeStatus != agoStatus) break;
005516  000205          recbyte := serin();
005517  000206          if(recbyte == 97) gotMessage := 1; // check for "a" and set message complete flag
005518  000207          //if(recbyte == 98) gotMessage := 2; // check for "b" and set message complete flag
005519  000208          if(gotMessage == 0) // if message not complete keep building
005520  000209              tempMessage[tMcount] := recbyte;
005521  000210              tMcount++;
005522  000211          endif
005523  000212      q:wend
005524  000213      if(gotMessage == 1)
005525  000214          gotMessage := 0;
005526  000215          //index := index+1;
005527  000216          var multiplier;
005528  000217          var tempval;
005529  000218          multiplier := 1;
005530  000219          tempval := 0;
005531  000220          var kk := 0;
005532  000221          var tempdate[10];
005533  000222        
005534  000223          gfx_RectangleFilled(324, 68, 800, 100, BLACK);
005535  000224          txt_MoveCursor(4, 33);
005536  000225          print("Date:");
005537  000226        
005538  000227          for(n := tMcount-1; n >= 0; n--)
005539  000228              if (kk<4)
005540  000229                  if(tempMessage[n] > 47 && tempMessage[n] < 58)
005541  000230                       tempval := tempval + ((tempMessage[n] - 48) * multiplier);
005542  000231                       multiplier := multiplier *10;
005543  000232                       //print("U:",tempMessage[n]);
005544  000233                  endif
005545  000234              else
005546  000235                  if(tempMessage[n] > 47 && tempMessage[n] < 58)
005547  000236                       tempdate[kk-4] := tempMessage[n] ;
005548  000237                       //print("I am in forloop");
005549  000238                       putchXY(695-(kk-4)*10, 80,tempdate[kk-4]);
005550  000239                  else
005551  000240                       if (tempMessage[n] == 47) putchXY(695-(kk-4)*10, 80,'/');
005552  000241                  endif
005553  000242              endif
005554  000243              kk := kk + 1;
005555  000244          next
005556  000245          //print("tempnow:", tempval);
005557  000246          WriteObject(tLeddigits, 0, tempval);   //Is it right?
005558  000247          //txt_MoveCursor(2, 25);
005559  000248          //print("tempdate:"   , tempdate[0],tempdate[1],' ',tempdate[2],tempdate[3],' ',tempdate[4],tempdate[5]);
005560  000249          tMcount := 0;
005561  000250      endif
005562  000251  endfunc
005563  000028        
005564  000029  #CONST
005565  000138  #END
005566  000139        
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicEvent0.inc

005567  000140  #inherit "MagicEvent0.inc"
005568  000140  #inherit "MagicEvent0.inc"
005569  000001  //
005570  000002  // Added 6/3/2020 4:52:04 PM
005571  000003  //
005572  000004  func MagicEvent0()
005573  000005      //activeStatus := 1;
005574  000006      if  (img_GetWord(hndl, iSlider0, IMAGE_INDEX) == 0)
005575  000007          txt_MoveCursor(4, 45);
005576  000008          //print("slider is pos0");
005577  000009          processStatus := 0;
005578  000010          activeStatus := 0;
005579  000011        
005580  000012      endif
005581  000013      if  (img_GetWord(hndl, iSlider0, IMAGE_INDEX) == 1)
005582  000014          txt_MoveCursor(4, 45);
005583  000015          //print("slider is pos1");
005584  000016          processStatus := 1;
005585  000017          activeStatus := 1;
005586  000018      endif
005587  000019      if  (img_GetWord(hndl, iSlider0, IMAGE_INDEX) == 2)
005588  000020          txt_MoveCursor(4, 45);
005589  000021          //print("slider is pos2");
005590  000022          processStatus := 2;
005591  000023          activeStatus := 2;
005592  000024      endif
005593  000025      if  (img_GetWord(hndl, iSlider0, IMAGE_INDEX) == 3)
005594  000026          txt_MoveCursor(4, 45);
005595  000027          //print("slider is pos3");
005596  000028          processStatus := 3;
005597  000029          activeStatus := 3;
005598  000030      endif
005599  000031  endfunc
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicEvent1.inc

005600  000141  #inherit "MagicEvent1.inc"
005601  000141  #inherit "MagicEvent1.inc"
005602  000001  //
005603  000002  // Added 6/4/2020 6:15:32 AM
005604  000003  //
005605  000004  func MagicEvent1(var newval)
005606  000005      //print("button0 newval:", newval);
005607  000006      processStatus := 10;
005608  000007      //activeStatus := 4;
005609  000008      //txt_MoveCursor(4,10);
005610  000009      //print("butt0 clicked.");
005611  000010  endfunc
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicEvent2.inc

005612  000142  #inherit "MagicEvent2.inc"
005613  000142  #inherit "MagicEvent2.inc"
005614  000001  //
005615  000002  // Added 6/4/2020 6:17:07 AM
005616  000003  //
005617  000004  func MagicEvent2(var newval)
005618  000005      processStatus := 11;
005619  000006      //activeStatus := 5;
005620  000007      //txt_MoveCursor(4,10);
005621  000008      //print("but1 newval:", newval,"clicked.");
005622  000009  endfunc
005623  000170  #END
5624  0158
5625  0159
5626  015A
5627  015B
5628  015C
5629  015D
5630  015E
5631  015F
5632  0160
5633  0161
5634  0162
5635  0163
5636  0164
5637  0165
5638  0166
5639  0167
5640  0168
5641  0169
5642  016A
5643  016B
5644  016C
5645  016D
5646  016E
5647  016F
5648  0170
5649  0171
5650  0172
5651  0173
5652  0174
5653  0175
5654  0176
5655  0177
5656  0178
5657  0179
5658  017A
5659  017B
5660  017C
5661  017D
5662  017E
5663  017F
5664  0180
5665  0181
5666  0182
5667  0183
5668  0184
5669  0185
5670  0186
5671  0187
5672  0188
5673  0189
5674  018A
5675  018B
5676  018C
5677  018D
5678  018E
5679  018F
5680  0190
5681  0191
5682  0192
5683  0193
5684  0194
5685  0195
5686  0196
5687  0197
5688  0198
5689  0199
5690  019A
5691  019B
5692  019C
5693  019D
5694  019E
5695  019F
5696  01A0
5697  01A1
5698  01A2
5699  01A3
5700  01A4
5701  01A5
5702  01A6
5703  01A7
5704  01A8
5705  01A9
5706  01AA
5707  01AB
5708  01AC
5709  01AD
5710  01AE
5711  01AF
5712  01B0
5713  01B1
5714  01B2
5715  01B3
5716  01B4
5717  01B5
5718  01B6
5719  01B7
5720  01B8
5721  01B9
5722  01BA
5723  01BB
5724  01BC
5725  01BD
5726  01BE
5727  01BF
5728  01C0
5729  01C1
5730  01C2
5731  01C3
5732  01C4
5733  01C5
5734  01C6
5735  01C7
5736  01C8
5737  01C9
5738  01CA
5739  01CB
5740  01CC
5741  01CD
5742  01CE
5743  01CF
5744  01D0
5745  01D1
5746  01D2
5747  01D3
5748  01D4
5749  01D5
5750  01D6
5751  01D7
5752  01D8
5753  01D9
5754  01DA
5755  01DB
5756  01DC
5757  01DD
5758  01DE
5759  01DF
5760  01E0
5761  01E1
5762  01E2
5763  01E3
5764  01E4
5765  01E5
5766  01E6
5767  01E7
5768  01E8
5769  01E9
5770  01EA
5771  01EB
5772  01EC
5773  01ED
5774  01EE
5775  01EF
5776  01F0
5777  01F1
5778  01F2
5779  01F3
5780  01F4
5781  01F5
5782  01F6
5783  01F7
5784  01F8
5785  01F9
5786  01FA
5787  01FB
5788  01FC
5789  01FD
5790  01FE
5791  01FF
5792  0200
5793  0201
5794  0202
5795  0203
5796  0204
5797  0205
5798  0206
5799  0207
5800  0208
5801  0209
5802  020A
5803  020B
5804  020C
5805  020D
5806  020E
5807  020F
5808  0210
5809  0211
5810  0212
5811  0213
5812  0214
5813  0215
5814  0216
5815  0217
5816  0218
5817  0219
5818  021A
5819  021B
5820  021C
5821  021D
5822  021E
5823  021F
5824  0220
5825  0221
5826  0222
5827  0223
5828  0224
5829  0225
5830  0226
5831  0227
5832  0228
5833  0229
5834  022A
5835  022B
5836  022C
5837  022D
5838  022E
5839  022F
5840  0230
5841  0231
5842  0232
5843  0233
5844  0234
5845  0235
5846  0236
5847  0237
5848  0238
5849  0239
5850  023A
5851  023B
5852  023C
5853  023D
5854  023E
5855  023F
5856  0240
5857  0241
5858  0242
5859  0243
5860  0244
5861  0245
5862  0246
5863  0247
5864  0248
5865  0249
5866  024A
5867  024B
5868  024C
5869  024D
5870  024E
5871  024F
5872  0250
5873  0251
5874  0252
5875  0253
5876  0254
5877  0255
5878  0256
5879  0257
5880  0258
5881  0259
5882  025A
5883  025B
5884  025C
5885  025D
5886  025E
5887  025F
5888  0260
5889  0261
5890  0262
5891  0263
5892  0264
5893  0265
5894  0266
5895  0267
5896  0268
5897  0269
5898  026A
5899  026B
5900  026C
5901  026D
5902  026E
5903  026F
5904  0270
5905  0271
5906  0272
5907  0273
5908  0274
5909  0275
5910  0276
5911  0277
5912  0278
5913  0279
5914  027A
5915  027B
5916  027C
5917  027D
5918  027E
5919  027F
5920  0280
5921  0281
5922  0282
5923  0283
5924  0284
5925  0285
5926  0286
5927  0287
5928  0288
5929  0289
5930  028A
5931  028B
5932  028C
5933  028D
5934  028E
5935  028F
5936  0290
5937  0291
5938  0292
5939  0293
5940  0294
5941  0295
5942  0296
5943  0297
5944  0298
5945  0299
5946  029A
5947  029B
5948  029C
5949  029D
5950  029E
5951  029F
5952  02A0
5953  02A1
5954  02A2
5955  02A3
5956  02A4
5957  02A5
5958  02A6
5959  02A7
5960  02A8
5961  02A9
005962  000171        
005963  000172  var hFonts[2] ;
005964  000173  var stringsCV[2] := [0, 0], hstrings ;
5965  015C
5966  015D
5967  015E
5968  015F
005969  000174  var scTracebuf[8] ;   // each scope has 8 entries
005970  000175  var scCurpos[1] := [0] ;
5971  015E
5972  015F
005973  000176  var sc0Oldval1[651], sc0Newval1[651]  ;
005974  000177  // Start P2.inc
005975  000178  var oObjects[MaxTotObjects+1] ;                 // address of objects
005976  000179  var CurrentForm, oldn, ImageTouched ;
005977  000180  var TouchXpos, TouchYpos ;
005978  000181  var GObjectType, TouchState, CurInputData, pInputIndex ;
005979  000182  var comRX[40], cmd[CMDLenMAX] ;
005980  000183        
005981  000184  var InputCS, OutputCS ;
005982  000185        
005983  000186  // > ? Constant/Global/Data ? <
005984  000187        
005985  000188        
005986  000189        
005987  000190  func seroutCS(var op)
005988  000191      serout(op) ;
005989  000192      OutputCS ^= op ;
005990  000193  endfunc
005991  000194        
005992  000195  func nak0()
005993  000196      serout(NAK) ;
005994  000197      InputCS := 0 ;
005995  000198  endfunc
005996  000199        
005997  000200  func seroutOcs()
005998  000201      serout(OutputCS) ;
005999  000202      OutputCS := 0 ;
006000  000203  endfunc
006001  000204        
006002  000205  func SendReport(var id, var objt, var objn, var val)
006003  000206      seroutCS(id) ;
006004  000207      seroutCS(objt) ;
006005  000208      seroutCS(objn) ;
006006  000209      seroutCS(val >> 8) ; // first 8 bits
006007  000210      seroutCS(val) ;
006008  000211      seroutOcs() ;
006009  000212  endfunc
006010  000213        
006011  000214  func TMul(var p1, var p2, var p3)
006012  000215      var var32[2], var322[2] ;
006013  000216      umul_1616(var32, p1, *(CurInputData+p2)) ;
006014  000217      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
006015  000218      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
006016  000219      return(var32[1] + var322[0]) ;
006017  000220  endfunc
006018  000221        
006019  000222        
006020  000223  func ReadObject(var ObjectType, var ObjectIdx)
006021  000224      var j, k, Objects ;
006022  000225      Objects := *(oObjects+ObjectType) ;
006023  000226        
006024  000227      j := 2 + ObjectIdx * 2 + Objects ;
006025  000228       if (ObjectType == tForm)
006026  000229          k := CurrentForm ;
006027  000230      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
006028  000231          k := img_GetWord(hndl, *j, IMAGE_TAG2);
006029  000232      else if (ObjectType == tStrings)
006030  000233          k := stringsCV[ObjectIdx];
006031  000234          else
006032  000235          k := img_GetWord(hndl, *j, IMAGE_INDEX);
006033  000236          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
006034  000237                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
006035  000238      endif
006036  000239      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
006037  000240  endfunc
006038  000241        
006039  000242        
006040  000243  func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
006041  000244      var TouchYpos ;
006042  000245      x1 += xinc ;
006043  000246      while (x1 < x2)
006044  000247          TouchYpos := y1 + yinc ;
006045  000248          while (TouchYpos < y2)
006046  000249              gfx_PutPixel(x1, TouchYpos, color) ;
006047  000250              TouchYpos += yinc ;
006048  000251          wend
006049  000252          x1 += xinc ;
006050  000253      wend
006051  000254  endfunc
006052  000255        
006053  000256  #CONST
006054  000282  #END
006055  000283  var told[4], tnew[4] ;
006056  000284        
006057  000285  func addressTraces(var ObjectIdx, var scopeIdx)
006058  000286      var i, j ;
006059  000287      j := ObjectIdx * 8 ;
006060  000288      for (i := 0; i < 4 ; i++)
006061  000289          if (i < oScopen[scopeIdx+scTraces])
006062  000290              told[i] := scTracebuf[2*i+j] ;
006063  000291              tnew[i] := scTracebuf[2*i+j+1] ;
006064  000292          else
006065  000293              told[i] := 0 ;
006066  000294              tnew[i] := 0 ;
006067  000295          endif
006068  000296      next
006069  000297  endfunc
006070  000298        
006071  000299  func drawScope(var j)
006072  000300      if (oScopen[j+scForm] == CurrentForm)
006073  000301          if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
006074  000302                                                    oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
006075  000303          gfx_Scope(oScopen[j+scLeft], oScopen[j+scWidth], oScopen[j+scYZero],
006076  000304                    oScopen[j+scDataPoints], oScopen[j+scXmag],oScopen[j+scYamp], oScopen[j+scColor],
006077  000305                    told[0],tnew[0],oScopen[j+scTrace1Col], told[1],tnew[1],oScopen[j+scTrace2Col],  told[2],tnew[2],oScopen[j+scTrace3Col],  told[3],tnew[3],oScopen[j+scTrace4Col]
006078  000306                    );
006079  000307          if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
006080  000308      endif
006081  000309  endfunc
006082  000310        
006083  000311  func doScope(var ObjectIdx, var NewVal)
006084  000312      var curarr, curtrace, i, j, *p ;
006085  000313      j := ObjectIdx * SCOPEENTS ;
006086  000314      curarr   := scCurpos[ObjectIdx] / oScopen[j+scTraces] ;
006087  000315      curtrace := scCurpos[ObjectIdx] % oScopen[j+scTraces] ;
006088  000316      addressTraces(ObjectIdx, j) ;
006089  000317      p := tnew[curtrace] ;
006090  000318      // move trace
006091  000319      mem_Copy(&p[1], &p[0], (oScopen[j+scDataPoints]-1)*2);    // this will only work in R35 and above PmmC
006092  000320      p[oScopen[j+scDataPoints]-1] := NewVal ;
006093  000321      if (   (curtrace == oScopen[j+scTraces]-1)
006094  000322          && (curarr == oScopen[j+scRefreshInc]-1 ) )
006095  000323          drawScope(j) ;
006096  000324          scCurpos[ObjectIdx] := 0 ;
006097  000325      else
006098  000326          scCurpos[ObjectIdx]++ ;
006099  000327      endif
006100  000328  endfunc
006101  000329        
006102  000330  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
006103  000331      var i, j, k, Objects ;
006104  000332  //    ObjectType &= 0x3f ; Why was his there? Anibuttons? Complex cascades?
006105  000333  //to(COM0) ; print("WriteObject ", ObjectType, " ", ObjectIdx, " ", NewVal, "\r\n") ;
006106  000334      if (ObjectType == tForm)
006107  000335          ActivateForm(ObjectIdx) ;
006108  000336          return ;
006109  000337      endif
006110  000338      if (ObjectType == tScope)
006111  000339          doScope(ObjectIdx, NewVal) ;
006112  000340          return ;
006113  000341      endif
006114  000342          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
006115  000343          i := *(Objects) ;
006116  000344          switch (ObjectType)
006117  000345              case t4Dbutton :
006118  000346                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
006119  000347                  break ;
006120  000348              default : j := -1 ;
006121  000349          endswitch
006122  000350          if (j != -1)
006123  000351              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
006124  000352              NewVal := NewVal << 1 ;
006125  000353              if (OVF())      // button group index change
006126  000354                  if (*(j+InputData+Ofs_IPD_P1))
006127  000355                      k &= 1 ;    // mask off old group index for momentary
006128  000356                  else
006129  000357                      k &= 3 ;    // mask off old group index for toggle
006130  000358                  endif
006131  000359              else            // normal set
006132  000360                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
006133  000361                  k &= 0xfffc ;    // retain only group index for state set
006134  000362              endif
006135  000363              NewVal |= k ;
006136  000364          endif
006137  000365          if (ObjectType == tLeddigits)
006138  000366              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
006139  000367              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
006140  000368              return ;
006141  000369          endif 
006142  000370          if (ObjectType == tStrings)
006143  000371              PrintStrings(ObjectIdx, NewVal, 0);
006144  000372              return ;
006145  000373          endif 
006146  000374              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
006147  000375              img_Show(hndl, i) ; // will only display if form is current
006148  000376  endfunc
006149  000377        
006150  000378  func TurnOffButtons(var group)
006151  000379      var j, k, l;
006152  000380      for (j := 0; j < nInputs; j++)
006153  000381          k := j*IPDatasize ;
006154  000382          if (*(InputData+k+Ofs_IPD_P2) == group)
006155  000383              l := -1 ;
006156  000384               if (*(InputData+k) == t4Dbutton)
006157  000385                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
006158  000386                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
006159  000387                  img_Show(hndl, l);      // only shows on current form
006160  000388        
006161  000389              endif
006162  000390          endif
006163  000391      next
006164  000392  endfunc
006165  000393        
006166  000394        
006167  000395  // WARNING, this code will crash if newval exceeds maximum displayable number
006168  000396  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
006169  000397      var i, j, k, l, lb, newval, num[4] ;
006170  000398      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
006171  000399      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
006172  000400      i := -1 ;
006173  000401      j := *(typeptr) ;
006174  000402      repeat
006175  000403          typeptr += 2 ;
006176  000404          i++ ;
006177  000405          until (*(typeptr) == imgidx);
006178  000406      j := setptr + i*10 ;
006179  000407        
006180  000408      l := 0x500a | (*(j+Ofs_Digits_Digits) << 8) ;       // UDECxZ
006181  000409      to(num) ;
006182  000410      putnum(l, newval) ;
006183  000411      imgidx++ ;
006184  000412      lb := *(j+Ofs_Digits_LeadingBlanks) ;
006185  000413      l := str_Ptr(num) ;
006186  000414      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
006187  000415          k := str_GetByte(l++) & 0x0f ;
006188  000416          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
006189  000417              if (k == 0)
006190  000418                  k := 10 ;
006191  000419              else
006192  000420                  lb := 0 ;
006193  000421              endif
006194  000422          endif
006195  000423          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
006196  000424          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
006197  000425          img_Show(hndl, imgidx);
006198  000426      next
006199  000427  endfunc
006200  000428        
006201  000429        
006202  000430  func ActivateForm(var newform)
006203  000431      var i, j, *p ;
006204  000432        
006205  000433      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
006206  000434          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
006207  000435              if (img_GetWord(hndl, i, IMAGE_TAG))
006208  000436                  img_Disable(hndl,i) ;
006209  000437              endif
006210  000438          next
006211  000439      endif
006212  000440      CurrentForm := newform ;
006213  000441      // display newform image or clear to image color
006214  000442      if (FormBGcolors[CurrentForm] != ColorBGimage)
006215  000443          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
006216  000444          gfx_Cls() ;
006217  000445          DoGFXObjects() ;                                    // display GFX 'widgets'
006218  000446      endif
006219  000447        
006220  000448      // enable inputs
006221  000449      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
006222  000450          j := img_GetWord(hndl, i, IMAGE_TAG) ;
006223  000451          if (j)
006224  000452              j-- ;
006225  000453              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
006226  000454              //if (j != tKeyboard)
006227  000455              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
006228  000456                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
006229  000457              endif
006230  000458              img_Show(hndl,i) ; // show initialy, if required
006231  000459              if (j == tForm)
006232  000460  // how to avoid doint this twice??
006233  000461                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
006234  000462              else if (j == tLeddigits)
006235  000463                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
006236  000464              endif
006237  000465          endif
006238  000466      next
006239  000467        
006240  000468        
006241  000469      for (i := 0; i < nStrings; i++)
006242  000470          if (stringsCV[i] != -1)
006243  000471              WriteObject(tStrings, i, stringsCV[i]) ;
006244  000472          endif
006245  000473      next
006246  000474      for (i := 0; i < nScopes; i++)
006247  000475          j := i * SCOPEENTS ;
006248  000476          if (oScopen[j+scForm] == CurrentForm)
006249  000477              addressTraces(i,j) ;
006250  000478              p := told[0] ;
006251  000479              p[0] := -1 ; // force init scope
006252  000480              gfx_RectangleFilled(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom], oScopen[j+scColor]) ;
006253  000481              if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
006254  000482                                                        oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
006255  000483              drawScope(i*SCOPEENTS) ;    // draw scope when activating form, may look a bit first time up....
006256  000484              if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
006257  000485          endif
006258  000486      next
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicCode2.inc

006259  000487  #inherit "MagicCode2.inc"
006260  000487  #inherit "MagicCode2.inc"
006261  000001  //
006262  000002  // Added 6/4/2020 9:27:44 AM
006263  000003  //
006264  000004  // MagicCode2
006265  000005        
006266  000006  //hFontx := file_LoadImageControl("WORKIN~1.dan", "WORKIN~1.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
006267  000007  //hstrings := file_Open("WORKIN~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
006268  000008  //hndl := file_LoadImageControl("MAIN~1.dat", "MAIN~1.gci", 1);
006269  000009        
006270  000010  com_SetBaud(COM0, 11520);
006271  000011  com_Init(combuf, 4096, 0);
006272  000012  processStatus := 0;
006273  000013  index :=-1;
006274  000488  endfunc
006275  000489        
006276  000490  func UpdateObjects(var newval)
006277  000491      var IPidx, otherOBJ, oldvalue ;
006278  000492      oldvalue := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ;
006279  000493      if ( ( oldvalue != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
006280  000494          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
006281  000495              img_Show(hndl, *(pInputIndex));      // only shows on current form
006282  000496          if ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))
006283  000497              if (*(CurInputData+Ofs_IPD_P1))
006284  000498                  newval &= 1;
006285  000499              else
006286  000500                  newval &= 3;
006287  000501              endif
006288  000502              if (newval > 1) newval := 1;
006289  000503          endif
006290  000504          IPidx := *(CurInputData+TouchState) ;
006291  000505          while(IPidx != 0)
006292  000506              otherOBJ := IPidx + InputData;
006293  000507              if (*(otherOBJ) == OT_REPORT)
006294  000508          SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
006295  000509              else if (*(otherOBJ) == OT_MAGIC)
006296  000510                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
006297  000511                  IPidx(newval) ;
006298  000512  //            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))  // test prior to Workshop 6.5.0.0
006299  000513              else if ((TouchState == *(otherOBJ+Ofs_IPD_P4)) || (*(CurInputData+Ofs_IPD_P1) && ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))))
006300  000514                  if (*(otherOBJ) == OT_ACTIVATE)
006301  000515                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
006302  000516                      GObjectType := tForm ;
006303  000517                  else if (*(otherOBJ) == OT_SETCONST)
006304  000518                      newval := *(otherOBJ+Ofs_IPD_P3) ;
006305  000519                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
006306  000520                  else if (*(otherOBJ) == OT_SETANOTHER)
006307  000521                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
006308  000522                  else if (*(otherOBJ) == OT_PREVFRAME)
006309  000523                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
006310  000524                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
006311  000525                      endif
006312  000526                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
006313  000527                  else if (*(otherOBJ) == OT_NEXTFRAME)
006314  000528                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
006315  000529                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
006316  000530                      endif
006317  000531                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
006318  000532                  else if (*(otherOBJ) == OT_PREVSTRING)
006319  000533                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
006320  000534                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
006321  000535                      endif
006322  000536                  else if (*(otherOBJ) == OT_NEXTSTRING)
006323  000537                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
006324  000538                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
006325  000539                      endif
006326  000540                  endif
006327  000541              endif
006328  000542              IPidx := *(otherOBJ+TouchState) ;
006329  000543          wend
006330  000544      endif
006331  000545  endfunc
006332  000546        
006333  000547  // End P2.inc
006334  000548  func DoGFXObjects()
006335  000549  endfunc
006336  000550        
006337  000551  // Start P3.inc
006338  000552  func main()
006339  000553      var comTX[50], cmdi, i, j, TouchStatus ;
006340  000554        
006341  000555        
006342  000556      gfx_ScreenMode(LANDSCAPE) ;
006343  000557        
006344  000558      putstr("Mounting...\n");
006345  000559      if (!(file_Mount()))
006346  000560          while(!(file_Mount()))
006347  000561              putstr("Drive not mounted...");
006348  000562              pause(200);
006349  000563              gfx_Cls();
006350  000564              pause(200);
006351  000565          wend
006352  000566      endif
006353  000567  //    gfx_MoveTo(0, 0);
006354  000568  //    print(mem_Heap()," ") ;
006355  000569  //    gfx_TransparentColour(0x0020);
006356  000570  //    gfx_Transparency(ON);
006357  000571        
006358  000572        
006359  000573      // open image control
006360  000574      hndl := file_LoadImageControl("MAIN~1.dat", "MAIN~1.gci", 1);
006361  000575        
006362  000576      // init 'constants'
006363  000577  // End P3.inc
006364  000578        
006365  000579      oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
006366  000580      oObjects[tKnob] := oDipSwitchs ; // dummy as no object there
006367  000581      oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
006368  000582      oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
006369  000583      oObjects[tGSlider] := oGSliders ;
006370  000584      oObjects[tTrackbar] := oDipSwitchs ; // dummy as no object there
006371  000585      oObjects[tWinButton] := oDipSwitchs ; // dummy as no object there
006372  000586      oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
006373  000587      oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
006374  000588      oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
006375  000589      oObjects[tForm] := oForms ;
006376  000590      oObjects[tGauge] := oDipSwitchs ; // dummy as no object there
006377  000591      oObjects[tImage] := oDipSwitchs ; // dummy as no object there
006378  000592      oObjects[tKeyboard] := oDipSwitchs ; // dummy as no object there
006379  000593      oObjects[tLed] := oDipSwitchs ; // dummy as no object there
006380  000594      oObjects[tLeddigits] := oLeddigitss ;
006381  000595      oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
006382  000596      oObjects[tStrings] := oStringss ;
006383  000597      oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
006384  000598      oObjects[tUserled] := oDipSwitchs ; // dummy as no object there
006385  000599      oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
006386  000600      oObjects[tStaticText] := oStaticTexts ;
006387  000601      oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
006388  000602      oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
006389  000603      oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
006390  000604      oObjects[tTank] := oDipSwitchs ; // dummy as no object there
006391  000605      oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
006392  000606      oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
006393  000607      oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
006394  000608      oObjects[t4Dbutton] := o4Dbuttons ;
006395  000609      oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
006396  000610      oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
006397  000611      oObjects[tUserButton] := oDipSwitchs ; // dummy as no object there
006398  000612      hFonts[1] := file_LoadImageControl("MAIN~1.d01", "MAIN~1.g01", 1)  ;
006399  000613      sc0Oldval1[0] := -1 ; // init scope, only needed for first trace
006400  000614      scTracebuf[0] := sc0Oldval1 ;
006401  000615      scTracebuf[1] := sc0Newval1 ;
006402  000616  // Start P4.inc
006403  000617      hstrings := file_Open("MAIN~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
006404  000618      // init comms
006405  000619      com_Init(comRX,CMDLenMAX,0);
006406  000620      com_SetBaud(COM0,11520);
006407  000621      com_TXbuffer(comTX, 100, 0);
006408  000622      // tag 'real' objects
006409  000623      for (i := 0; i <= MaxTotObjects; i++)
006410  000624          if (   (i != tSounds)
006411  000625              && (i != tTimer)
006412  000626              && (i != tPinOutput)
006413  000627              && (i != tPinInput) )
006414  000628              TouchXpos := oObjects[i] ;
006415  000629              TouchYpos := *(TouchXpos) ;
006416  000630              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
006417  000631                  oldn := *(TouchXpos+ImageTouched*2) ;
006418  000632                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
006419  000633                  if (oldn != -1)
006420  000634                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
006421  000635                      img_Disable(hndl, oldn) ;
006422  000636                  endif
006423  000637              next
006424  000638          endif
006425  000639      next
006426  000640        
006427  000641        
006428  000642      // display initial form
006429  000643      CurrentForm := -1 ;
006430  000644  // End P4.inc
006431  000645  // Start P5.inc
006432  000646      ActivateForm(0) ; // need to change this according to first actual form
006433  000647        
006434  000648  // End P5.inc
006435  000649  // Start P6.inc Diablo
006436  000650      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
006437  000651      oldn := -1 ;
006438  000652      repeat
file C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.ImgData\MagicCode1.inc

006439  000653  #inherit "MagicCode1.inc"
006440  000653  #inherit "MagicCode1.inc"
006441  000001  //
006442  000002  // Added 6/3/2020 4:58:03 PM
006443  000003  //
006444  000004  // MagicCode1
006445  000005  //
006446  000006  while (processStatus == 0)
006447  000007      agoStatus := 0;
006448  000008      index := 0;
006449  000009      txt_MoveCursor(4, 20);
006450  000010      print("Loading...");
006451  000011      serout('S');
006452  000012      serout('0');
006453  000013      pause(2000);
006454  000014      processStatus := 5;
006455  000015      //print(com_Count());
006456  000016      if (com_Count()>0)
006457  000017      //print("Started receiving init data\r\n");
006458  000018         while(1)
006459  000019           if (com_Count()>= 3250)
006460  000020             processStatus := 5;
006461  000021             //print("n-data received\r\n");
006462  000022             break;
006463  000023           endif
006464  000024         wend
006465  000025      endif
006466  000026      //pause(2000);
006467  000027        
006468  000028  wend
006469  000029        
006470  000030  if (processStatus == 5)
006471  000031      //pause(1000);
006472  000032      getSerialFrame();
006473  000033      //print('');
006474  000034      if (activeStatus == 0)
006475  000035          processStatus := 6;
006476  000036      else
006477  000037          processStatus :=7;
006478  000038      endif
006479  000039  endif
006480  000040        
006481  000041  if (processStatus == 6)
006482  000042      pause(1000);
006483  000043      //com_Init(combuf, 4096, 0);
006484  000044      getSerial();
006485  000045      //processStatus :=3;
006486  000046  endif
006487  000047        
006488  000048  if (processStatus == 7)
006489  000049      pause(1000);
006490  000050      //com_Init(combuf, 4096, 0);
006491  000051      getTemp();
006492  000052      //processStatus :=3;
006493  000053  endif
006494  000054        
006495  000055  while (processStatus == 1)
006496  000056      agoStatus := 1;
006497  000057      index := 0;
006498  000058      txt_MoveCursor(4, 20);
006499  000059      print("Loading...");
006500  000060      serout('S');
006501  000061      serout('D');
006502  000062      pause(25000);
006503  000063      processStatus := 5;
006504  000064      //print(com_Count());
006505  000065      if (com_Count()>0)
006506  000066      //print("Started receiving init data\r\n");
006507  000067         while(1)
006508  000068           if (com_Count()>= 3250)
006509  000069             processStatus := 5;
006510  000070             txt_MoveCursor(3, 30);
006511  000071             //print("daydata received\r\n");
006512  000072             //print("n-data received\r\n");
006513  000073             break;
006514  000074           endif
006515  000075         wend
006516  000076      endif
006517  000077  wend
006518  000078        
006519  000079        
006520  000080        
006521  000081  while (processStatus == 2)
006522  000082      agoStatus := 2;
006523  000083      index := 0;
006524  000084      txt_MoveCursor(4, 20);
006525  000085      print("Loading...");
006526  000086      serout('S');
006527  000087      serout('W');
006528  000088      pause(25000);
006529  000089      processStatus := 5;
006530  000090      //print(com_Count());
006531  000091      if (com_Count()>0)
006532  000092      //print("Started receiving init data\r\n");
006533  000093         while(1)
006534  000094           if (com_Count()>= 3250)
006535  000095             processStatus := 5;
006536  000096             txt_MoveCursor(5, 30);
006537  000097             //print("weekdata received\r\n");
006538  000098             break;
006539  000099           endif
006540  000100         wend
006541  000101      endif
006542  000102  wend
006543  000103        
006544  000104  while (processStatus == 3)
006545  000105      agoStatus := 3;
006546  000106      index := 0;
006547  000107      txt_MoveCursor(4, 20);
006548  000108      print("Loading...");
006549  000109      serout('S');
006550  000110      serout('M');
006551  000111      pause(25000);
006552  000112      processStatus := 5;
006553  000113      //print(com_Count());
006554  000114      if (com_Count()>0)
006555  000115      //print("Started receiving init data\r\n");
006556  000116         while(1)
006557  000117           if (com_Count()>= 3250)
006558  000118             processStatus := 5;
006559  000119             //print("n-data received\r\n");
006560  000120             break;
006561  000121           endif
006562  000122         wend
006563  000123      endif
006564  000124  wend
006565  000125        
006566  000126  while (processStatus == 10)
006567  000127     // agoStatus := 1;
006568  000128      index := 0;
006569  000129      txt_MoveCursor(4, 20);
006570  000130      print("Loading...");
006571  000131      serout('P');
006572  000132      serout('V');
006573  000133      pause(25000);
006574  000134      processStatus := 5;
006575  000135      //print(com_Count());
006576  000136      if (com_Count()>0)
006577  000137      //print("Started receiving init data\r\n");
006578  000138         while(1)
006579  000139           if (com_Count()>= 3250)
006580  000140             processStatus := 5;
006581  000141             //print("n-data received\r\n");
006582  000142             break;
006583  000143           endif
006584  000144         wend
006585  000145      endif
006586  000146  wend
006587  000147        
006588  000148  while (processStatus == 11)
006589  000149     //agoStatus := 1;
006590  000150      index := 0;
006591  000151      txt_MoveCursor(4, 20);
006592  000152      print("Loading...");
006593  000153      serout('N');
006594  000154      serout('X');
006595  000155      pause(25000);
006596  000156      processStatus := 5;
006597  000157      //print(com_Count());
006598  000158      if (com_Count()>0)
006599  000159      //print("Started receiving init data\r\n");
006600  000160         while(1)
006601  000161           if (com_Count()>= 3250)
006602  000162             processStatus := 5;
006603  000163             //print("n-data received\r\n");
006604  000164             break;
006605  000165           endif
006606  000166         wend
006607  000167      endif
006608  000168  wend
006609  000169        
006610  000654          // check comms for command, how to NAK invalid command
006611  000655          if (com_Count() != 0)
006612  000656              i := serin() ;
006613  000657              InputCS ^= i ;               // update checksum
006614  000658              if (   (cmdi > 2)
006615  000659                  && (cmd[0] == WRITE_STRU) )
006616  000660                  j := (cmdi-1) >> 1 + 2 ;
006617  000661                  if (j == CMDLenMAX)    // max length exceeded
006618  000662                      nak0() ;
006619  000663                      cmdi := -1 ;
006620  000664                  else if (cmdi & 1)
006621  000665                      cmd[j] := i ;
006622  000666                      if (cmd[2] == 0)    // if string complete
006623  000667                          if (InputCS)
006624  000668                              nak0() ;
006625  000669                          else
006626  000670                              if (cmd[0] == WRITE_STRU)
006627  000671                              cmd[j] := 0 ;                     // terminate it
006628  000672                              PrintStrings(cmd[1], &cmd[3], 1) ;
006629  000673                              serout(ACK) ;
006630  000674                              else
006631  000675                              endif
006632  000676                          endif
006633  000677                          cmdi := -1 ;
006634  000678                      endif
006635  000679                  else
006636  000680                      cmd[j] := cmd[j] << 8 + i ;
006637  000681                      cmd[2]-- ;          // dec length
006638  000682                  endif
006639  000683                  cmdi++ ;
006640  000684              else // not unicode string
006641  000685                  cmd[cmdi++] := i ;
006642  000686                   if ((cmd[0] == WRITE_STR) || (cmd[0] == WRITE_LABEL) )                  // Ansi String or Label
006643  000687                      if (cmdi == CMDLenMAX)      // max length exceeded
006644  000688                          nak0() ;
006645  000689                          cmdi := 0 ;
006646  000690                      else if (cmdi > 2)
006647  000691                          if (cmd[2] == -1)
006648  000692                              if (InputCS)
006649  000693                                  nak0() ;
006650  000694                              else
006651  000695                                  if ((cmd[0] == WRITE_STR) || (cmd[0] == WRITE_LABEL))
006652  000696                                  cmd[cmdi-1] := 0 ;                     // terminate it
006653  000697                                  PrintStrings(cmd[1], &cmd[3], 1) ;
006654  000698                                  serout(ACK) ;
006655  000699                                  else
006656  000700                                  endif
006657  000701                              endif
006658  000702                              cmdi := 0 ;
006659  000703                          else
006660  000704                              cmd[2]-- ;          // dec length
006661  000705                          endif
006662  000706                      endif
006663  000707                  else if (   (cmd[0] == READ_OBJ)
006664  000708                           && (cmdi == 4)         )
006665  000709                      if (InputCS)
006666  000710                          nak0() ;
006667  000711                      else
006668  000712                          ReadObject(cmd[1], cmd[2]) ;
006669  000713                      endif
006670  000714                      cmdi := 0 ;
006671  000715                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
006672  000716                           && (cmdi == 6)          )
006673  000717                      if (InputCS)
006674  000718                          nak0() ;
006675  000719                      else
006676  000720                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
006677  000721                          serout(ACK) ;
006678  000722                      endif
006679  000723                      cmdi := 0 ;
006680  000724                  else if (   (cmd[0] == WRITE_CONTRAST)
006681  000725                           && (cmdi == 3)         )
006682  000726                      if (InputCS)
006683  000727                          nak0() ;
006684  000728                      else
006685  000729                          gfx_Contrast(cmd[1]) ;
006686  000730                          serout(ACK) ;
006687  000731                      endif
006688  000732                      cmdi := 0 ;
006689  000733                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
006690  000734                      nak0() ;
006691  000735                      cmdi := 0 ;
006692  000736                  endif
006693  000737              endif   // not unicode string
006694  000738          endif   // a character is available
006695  000739        
006696  000740        
006697  000741      // touch code processing
006698  000742        
006699  000743          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
006700  000744          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
006701  000745              ImageTouched := img_Touched(hndl,-1) ;
006702  000746              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
006703  000747                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
006704  000748              endif
006705  000749              if (TouchStatus != TOUCH_RELEASED)        // if not released
006706  000750                  if (oldn != -1)
006707  000751                      ImageTouched := oldn ;
006708  000752                  else
006709  000753                      if (oldn != ImageTouched)
006710  000754                  oldn := ImageTouched ;
006711  000755                          TouchStatus := TOUCH_PRESSED ;
006712  000756                      endif
006713  000757                  endif
006714  000758                  TouchXpos  := touch_Get(TOUCH_GETX);
006715  000759                  TouchYpos  := touch_Get(TOUCH_GETY);
006716  000760                  TouchState := Ofs_IPD_DOWN ;
006717  000761              else
006718  000762                  ImageTouched := oldn ;                     // simulate release of what we touched
006719  000763                  oldn := -1 ;                    // prevent double release
006720  000764                  TouchState := Ofs_IPD_RELEASE ;
006721  000765              endif
006722  000766              if (ImageTouched >= 0)
006723  000767                          CurInputData := InputControls[ImageTouched] + InputData;
006724  000768                          GObjectType := *(CurInputData) ;
006725  000769                          i := GObjectType ;
006726  000770                          if (GObjectType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
006727  000771                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
006728  000772              endif
006729  000773          endif
006730  000774   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
006731  000775        
006732  000776          sys_EventsResume() ;
006733  000777      forever
006734  000778        
006735  000779  ciSwitch:
006736  000780  cDipswitch:
006737  000781        
006738  000782  cKnob:
006739  000783  ciDial:
006740  000784        
006741  000785  cRockerswitch:
006742  000786        
006743  000787  cRotaryswitch:
006744  000788        
006745  000789  cSlider:
006746  000790  cTrackbar:
006747  000791  ciSlider:
006748  000792      if (*(CurInputData+Ofs_IPD_P1))
006749  000793          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
006750  000794          if (i < 0)
006751  000795              i := 0 ;
006752  000796          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
006753  000797              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
006754  000798          else
006755  000799  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006756  000800              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006757  000801          endif
006758  000802      else
006759  000803          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
006760  000804          if (i < 0)
006761  000805              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
006762  000806          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
006763  000807              i := 0 ;
006764  000808          else
006765  000809  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006766  000810              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006767  000811          endif
006768  000812      endif
006769  000813      pInputIndex := oObjects[GObjectType]  + *(CurInputData+Ofs_IPD_OBJVIDX) ;
006770  000814      UpdateObjects(i) ;
006771  000815  endsub ;
006772  000816        
006773  000817  ciButton:
006774  000818        
006775  000819  c4DButton:
006776  000820  cUserButton:
006777  000821  cWinbutton:
006778  000822      pInputIndex := oObjects[GObjectType]  + *(CurInputData+Ofs_IPD_OBJVIDX) ;
006779  000823      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
006780  000824  CommonButtons:
006781  000825      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
006782  000826          if (TouchStatus == TOUCH_RELEASED)
006783  000827              i &= 0xfffe ;
006784  000828              TouchState == Ofs_IPD_DOWN ;
006785  000829          else
006786  000830              i |= 1 ;
006787  000831              TouchState == Ofs_IPD_RELEASE ;
006788  000832          endif
006789  000833      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
006790  000834          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
006791  000835              if ((i & 3) == 3)
006792  000836                  i &= 0xfffc ;
006793  000837              else
006794  000838                  i++ ;
006795  000839              endif
006796  000840          else
006797  000841              i |= 1 ;                                      // make down regardless of current state
006798  000842          endif
006799  000843      else                        // group action, up all other buttons on touch press, reports 0 for button down
006800  000844          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
006801  000845              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
006802  000846          endif
006803  000847          i := (i & 0xfffc) | 2 ;
006804  000848      endif
006805  000849        
006806  000850      UpdateObjects(i) ;
006807  000851  endsub ;
006808  000852        
006809  000853  cAniButton:
006810  000854        
006811  000855  cColorPicker:
006812  000856        
006813  000857  endfunc
006814  000858  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 511 file:main.4DGenieS)
Notice: local var 'i' in func 'doScope' is never used (line 312 file:main.4DGenieS)
Notice: function argument 'newval' in func 'MagicEvent2' is never used (line 4 file:MagicEvent2.inc)
Notice: function argument 'newval' in func 'MagicEvent1' is never used (line 4 file:MagicEvent1.inc)
Notice: local var 'g' in func 'getTemp' is never used (line 197 file:MagicCode0.inc)
Notice: local var 'g' in func 'getSerialFrame' is never used (line 136 file:MagicCode0.inc)
Notice: local var 'g' in func 'getSerial' is never used (line 22 file:MagicCode0.inc)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        4026  0x00000fba (User func) args[1] r=0  (usage 9)
activeStatus                       11052  0x00002b2c (mem) word (global)  (usage 31)
addressTraces                       6030  0x0000178e (User func) args[2] r=0  (usage 6)
agoStatus                          11054  0x00002b2e (mem) word (global)  (usage 25)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 12)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (usage 3)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                13854  0x0000361e (mem) word[80] (global)  (usage 90)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 6)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 6)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 48)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 6)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 6)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
combuf                                56  0x00000038 (mem) word[4096] (global)  (usage 3)
comRX                              13774  0x000035ce (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                       13770  0x000035ca (mem) word (global)  (usage 63)
CurrentForm                        13756  0x000035bc (mem) word (global)  (usage 48)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        3322  0x00000cfa (User func) args[0] r=0  (usage 6)
doScope                             5495  0x00001577 (User func) args[2] r=0  (usage 3)
DOWN                                   0  0x00000000 (const dword)  (not used)
drawScope                           5699  0x00001643 (User func) args[1] r=0  (usage 6)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 6)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (usage 3)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                         281  0x00000119FormBGcolors                         281  0x00000119 (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                           9  0x00000009FormEndIndex                           9  0x00000009 (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (usage 3)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
getSerial                           7646  0x00001dde (User func) args[0] r=0  (usage 3)
getSerialFrame                      7165  0x00001bfd (User func) args[0] r=0  (usage 3)
getTemp                             6755  0x00001a63 (User func) args[0] r=0  (usage 3)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (usage 6)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (usage 45)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 15)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (usage 3)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (usage 18)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GObjectType                        13766  0x000035c6 (mem) word (global)  (usage 39)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
gotMessage                            22  0x00000016 (mem) word (global)  (usage 52)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
Graticule                           6155  0x0000180b (User func) args[7] r=0  (usage 6)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                             11056  0x00002b30 (mem) word[2] (global)  (usage 6)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 117)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                           11064  0x00002b38 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i4Dbutton0                             4  0x00000004 (const ??? 0)  (usage 3)
i4Dbutton1                             5  0x00000005 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iiLeddigits0                           3  0x00000003 (const ??? 0)  (not used)
iLeddigits0                            2  0x00000002 (const ??? 0)  (usage 3)
ILINEARIP_COLOR1                      12  0x0000000c (const dword)  (not used)
ILINEARIP_COLOR2                      14  0x0000000e (const dword)  (not used)
ILINEARIP_COLOR3                      16  0x00000010 (const dword)  (not used)
ILINEARIP_COLOR4                      18  0x00000012 (const dword)  (not used)
ILINEARIP_COLOR5                      20  0x00000014 (const dword)  (not used)
ILINEARIP_COLOR6                      22  0x00000016 (const dword)  (not used)
ILINEARIP_H                            6  0x00000006 (const dword)  (not used)
ILINEARIP_INDEX                        8  0x00000008 (const dword)  (not used)
ILINEARIP_MAXVAL                      42  0x0000002a (const dword)  (not used)
ILINEARIP_MINVAL                      44  0x0000002c (const dword)  (not used)
ILINEARIP_OFFSET_BR                   46  0x0000002e (const dword)  (not used)
ILINEARIP_OFFSET_TL                   48  0x00000030 (const dword)  (not used)
ILINEARIP_ORIENTATION                 10  0x0000000a (const dword)  (not used)
ILINEARIP_TEXT1                       36  0x00000024 (const dword)  (not used)
ILINEARIP_TEXT2                       38  0x00000026 (const dword)  (not used)
ILINEARIP_TEXT3                       40  0x00000028 (const dword)  (not used)
ILINEARIP_VALUE1                      24  0x00000018 (const dword)  (not used)
ILINEARIP_VALUE2                      26  0x0000001a (const dword)  (not used)
ILINEARIP_VALUE3                      28  0x0000001c (const dword)  (not used)
ILINEARIP_VALUE4                      30  0x0000001e (const dword)  (not used)
ILINEARIP_VALUE5                      32  0x00000020 (const dword)  (not used)
ILINEARIP_VALUE6                      34  0x00000022 (const dword)  (not used)
ILINEARIP_W                            4  0x00000004 (const dword)  (not used)
ILINEARIP_X                            0  0x00000000 (const dword)  (not used)
ILINEARIP_Y                            2  0x00000002 (const dword)  (not used)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 54)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
ImageTouched                       13760  0x000035c0 (mem) word (global)  (usage 36)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 57)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 21)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 18)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
index                              11050  0x00002b2a (mem) word (global)  (usage 51)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                         11  0x0000000bInputControls                         11  0x0000000b (mem) word[6] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 6)
InputCS                            14014  0x000036be (mem) word (global)  (usage 21)
InputData                             23  0x00000017InputData                             23  0x00000017 (mem) word[88] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
IROTARYIP_COLOR1                      10  0x0000000a (const dword)  (not used)
IROTARYIP_COLOR2                      12  0x0000000c (const dword)  (not used)
IROTARYIP_COLOR3                      14  0x0000000e (const dword)  (not used)
IROTARYIP_COLOR4                      16  0x00000010 (const dword)  (not used)
IROTARYIP_COLOR5                      18  0x00000012 (const dword)  (not used)
IROTARYIP_COLOR6                      20  0x00000014 (const dword)  (not used)
IROTARYIP_H                            6  0x00000006 (const dword)  (not used)
IROTARYIP_INDEX                        8  0x00000008 (const dword)  (not used)
IROTARYIP_MAXANGLE                    40  0x00000028 (const dword)  (not used)
IROTARYIP_MAXVALUE                    42  0x0000002a (const dword)  (not used)
IROTARYIP_MINANGLE                    44  0x0000002c (const dword)  (not used)
IROTARYIP_MINVALUE                    46  0x0000002e (const dword)  (not used)
IROTARYIP_TEXT1                       34  0x00000022 (const dword)  (not used)
IROTARYIP_TEXT2                       36  0x00000024 (const dword)  (not used)
IROTARYIP_TEXT3                       38  0x00000026 (const dword)  (not used)
IROTARYIP_VALUE1                      22  0x00000016 (const dword)  (not used)
IROTARYIP_VALUE2                      24  0x00000018 (const dword)  (not used)
IROTARYIP_VALUE3                      26  0x0000001a (const dword)  (not used)
IROTARYIP_VALUE4                      28  0x0000001c (const dword)  (not used)
IROTARYIP_VALUE5                      30  0x0000001e (const dword)  (not used)
IROTARYIP_VALUE6                      32  0x00000020 (const dword)  (not used)
IROTARYIP_W                            4  0x00000004 (const dword)  (not used)
IROTARYIP_X                            0  0x00000000 (const dword)  (not used)
IROTARYIP_Y                            2  0x00000002 (const dword)  (not used)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
iSlider0                               0  0x00000000 (const ??? 0)  (usage 15)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                           1  0x00000001 (const ??? 0)  (usage 3)
iStatictext1                           6  0x00000006 (const ??? 0)  (usage 3)
iStatictext10                         15  0x0000000f (const ??? 0)  (usage 3)
iStatictext12                         16  0x00000010 (const ??? 0)  (usage 3)
iStatictext2                           7  0x00000007 (const ??? 0)  (usage 3)
iStatictext3                           8  0x00000008 (const ??? 0)  (usage 3)
iStatictext4                          13  0x0000000d (const ??? 0)  (usage 3)
iStatictext5                          12  0x0000000c (const ??? 0)  (usage 3)
iStatictext6                          11  0x0000000b (const ??? 0)  (usage 3)
iStatictext7                          10  0x0000000a (const ??? 0)  (usage 3)
iStatictext8                           9  0x00000009 (const ??? 0)  (usage 3)
iStatictext9                          14  0x0000000e (const ??? 0)  (usage 3)
iStrings1                            199  0x000000c7iStrings1                            199  0x000000c7 (mem) word[13] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
ITOGGLEIP_COLOR1                      10  0x0000000a (const dword)  (not used)
ITOGGLEIP_COLOR2                      12  0x0000000c (const dword)  (not used)
ITOGGLEIP_COLOR3                      14  0x0000000e (const dword)  (not used)
ITOGGLEIP_COLOR4                      16  0x00000010 (const dword)  (not used)
ITOGGLEIP_COLOR5                      18  0x00000012 (const dword)  (not used)
ITOGGLEIP_COLOR6                      20  0x00000014 (const dword)  (not used)
ITOGGLEIP_H                            6  0x00000006 (const dword)  (not used)
ITOGGLEIP_INDEX                        8  0x00000008 (const dword)  (not used)
ITOGGLEIP_MATRIX                      40  0x00000028 (const dword)  (not used)
ITOGGLEIP_MOMENTARY                   42  0x0000002a (const dword)  (not used)
ITOGGLEIP_TEXT1                       34  0x00000022 (const dword)  (not used)
ITOGGLEIP_TEXT2                       36  0x00000024 (const dword)  (not used)
ITOGGLEIP_TEXT3                       38  0x00000026 (const dword)  (not used)
ITOGGLEIP_VALUE1                      22  0x00000016 (const dword)  (not used)
ITOGGLEIP_VALUE2                      24  0x00000018 (const dword)  (not used)
ITOGGLEIP_VALUE3                      26  0x0000001a (const dword)  (not used)
ITOGGLEIP_VALUE4                      28  0x0000001c (const dword)  (not used)
ITOGGLEIP_VALUE5                      30  0x0000001e (const dword)  (not used)
ITOGGLEIP_VALUE6                      32  0x00000020 (const dword)  (not used)
ITOGGLEIP_W                            4  0x00000004 (const dword)  (not used)
ITOGGLEIP_X                            0  0x00000000 (const dword)  (not used)
ITOGGLEIP_Y                            2  0x00000002 (const dword)  (not used)
IUSERGAUGE_COLOR1                     10  0x0000000a (const dword)  (not used)
IUSERGAUGE_COLOR2                     12  0x0000000c (const dword)  (not used)
IUSERGAUGE_COLOR3                     14  0x0000000e (const dword)  (not used)
IUSERGAUGE_COLOR4                     16  0x00000010 (const dword)  (not used)
IUSERGAUGE_COLOR5                     18  0x00000012 (const dword)  (not used)
IUSERGAUGE_COLOR6                     20  0x00000014 (const dword)  (not used)
IUSERGAUGE_H                           6  0x00000006 (const dword)  (not used)
IUSERGAUGE_INDEX                       8  0x00000008 (const dword)  (not used)
IUSERGAUGE_TEXT1                      34  0x00000022 (const dword)  (not used)
IUSERGAUGE_TEXT2                      36  0x00000024 (const dword)  (not used)
IUSERGAUGE_TEXT3                      38  0x00000026 (const dword)  (not used)
IUSERGAUGE_VALUE1                     22  0x00000016 (const dword)  (not used)
IUSERGAUGE_VALUE2                     24  0x00000018 (const dword)  (not used)
IUSERGAUGE_VALUE3                     26  0x0000001a (const dword)  (not used)
IUSERGAUGE_VALUE4                     28  0x0000001c (const dword)  (not used)
IUSERGAUGE_VALUE5                     30  0x0000001e (const dword)  (not used)
IUSERGAUGE_VALUE6                     32  0x00000020 (const dword)  (not used)
IUSERGAUGE_W                           4  0x00000004 (const dword)  (not used)
IUSERGAUGE_X                           0  0x00000000 (const dword)  (not used)
IUSERGAUGE_Y                           2  0x00000002 (const dword)  (not used)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                  283  0x0000011bkKeyboardKeystrokes                  283  0x0000011b (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    4739  0x00001283 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (usage 3)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
MagicEvent0                         6590  0x000019be (User func) args[0] r=0  (usage 3)
MagicEvent1                         6582  0x000019b6 (User func) args[1] r=0  (usage 3)
MagicEvent2                         6574  0x000019ae (User func) args[1] r=0  (usage 3)
main                                 545  0x00000221 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (usage 3)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                                6539  0x0000198b (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                                8  0x00000008 (const dword)  (usage 3)
nObjects                              17  0x00000011 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nScopes                                1  0x00000001 (const dword)  (usage 3)
nStrings                               2  0x00000002 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                           275  0x00000113o4Dbuttons                           275  0x00000113 (mem) word[3] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 9)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oDipSwitchs                          225  0x000000e1oDipSwitchs                          225  0x000000e1 (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 81)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                               231  0x000000e7oForms                               231  0x000000e7 (mem) word[2] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 12)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 21)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 54)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 15)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 18)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 15)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGSliders                            227  0x000000e3oGSliders                            227  0x000000e3 (mem) word[2] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oldn                               13758  0x000035be (mem) word (global)  (usage 42)
oldSample                           9648  0x000025b0 (mem) word[700] (global)  (usage 9)
oLedDigitsn                          287  0x0000011foLedDigitsn                          287  0x0000011f (mem) word[5] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 6)
oLeddigitss                          235  0x000000eboLeddigitss                          235  0x000000eb (mem) word[2] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 9)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                           13688  0x00003578 (mem) word[34] (global)  (usage 114)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oScopen                              297  0x00000129oScopen                              297  0x00000129 (mem) word[24] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 153)
oScopes                              273  0x00000111oScopes                              273  0x00000111 (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (not used)
oStaticTexts                         245  0x000000f5oStaticTexts                         245  0x000000f5 (mem) word[14] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 3)
oStringss                            239  0x000000efoStringss                            239  0x000000ef (mem) word[3] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 3)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 12)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 6)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 6)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                           14016  0x000036c0 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
p                                 UNRESOLVED  (usage 2)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 30)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                        13772  0x000035cc (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                        8500  0x00002134 (User func) args[3] r=0  (usage 9)
processStatus                      11048  0x00002b28 (mem) word (global)  (usage 90)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (usage 12)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (usage 3)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
q                                 UNRESOLVED  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          6226  0x00001852 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (usage 3)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                    285  0x0000011drKeyboardRoutines                    285  0x0000011d (mem) word[1] (member of C:\Users\tomas\Dropbox\Tom-4dgl\6.9.1\to 6.9 0logic\main.4DWork\main.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
sc0Newval1                         12386  0x00003062 (mem) word[651] (global)  (usage 3)
sc0Oldval1                         11084  0x00002b4c (mem) word[651] (global)  (usage 6)
scBottom                              21  0x00000015 (const ??? 0)  (usage 9)
scColor                                0  0x00000000 (const ??? 0)  (usage 6)
scCurpos                           11082  0x00002b4a (mem) word[1] (global)  (usage 12)
scDataPoints                          22  0x00000016 (const ??? 0)  (usage 9)
scForm                                19  0x00000013 (const ??? 0)  (usage 6)
scGraticuleCol                         1  0x00000001 (const ??? 0)  (usage 6)
scGraticuleVis                         2  0x00000002 (const ??? 0)  (usage 6)
scGraticuleXinc                        3  0x00000003 (const ??? 0)  (usage 6)
scGraticuleYinc                        4  0x00000004 (const ??? 0)  (usage 6)
scLeft                                 5  0x00000005 (const ??? 0)  (usage 18)
SCOPEENTS                             24  0x00000018 (const ??? 0)  (usage 9)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
scRefreshInc                           6  0x00000006 (const ??? 0)  (usage 3)
scRight                               20  0x00000014 (const ??? 0)  (usage 15)
scTop                                  7  0x00000007 (const ??? 0)  (usage 9)
scTrace1Col                            8  0x00000008 (const ??? 0)  (usage 3)
scTrace2Col                            9  0x00000009 (const ??? 0)  (usage 3)
scTrace3Col                           10  0x0000000a (const ??? 0)  (usage 3)
scTrace4Col                           11  0x0000000b (const ??? 0)  (usage 3)
scTracebuf                         11066  0x00002b3a (mem) word[8] (global)  (usage 12)
scTraces                              12  0x0000000c (const ??? 0)  (usage 12)
scWidth                               13  0x0000000d (const ??? 0)  (usage 3)
scXmag                                14  0x0000000e (const ??? 0)  (usage 3)
scYamp                                15  0x0000000f (const ??? 0)  (usage 3)
scYLineCol                            17  0x00000011 (const ??? 0)  (usage 6)
scYLineForm                           16  0x00000010 (const ??? 0)  (usage 6)
scYLineVis                            18  0x00000012 (const ??? 0)  (usage 6)
scYZero                               23  0x00000017 (const ??? 0)  (usage 3)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                          6472  0x00001948 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 12)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 57)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                            6555  0x0000199b (User func) args[1] r=0  (usage 15)
seroutOcs                           6522  0x0000197a (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (not used)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (usage 3)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (usage 3)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Size                           0  0x00000000 (const dword)  (not used)
Strings0StartH                         0  0x00000000 (const dword)  (not used)
Strings0StartL                         0  0x00000000 (const dword)  (not used)
Strings1Count                          4  0x00000004 (const dword)  (not used)
Strings1Size                          14  0x0000000e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
stringsCV                          11060  0x00002b34 (mem) word[2] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 30)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
tempMessage                           24  0x00000018 (mem) word[15] (global)  (usage 63)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 6)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 18)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMcount                               54  0x00000036 (mem) word (global)  (usage 48)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                                6415  0x0000190f (User func) args[3] r=0  (usage 6)
tnew                               14026  0x000036ca (mem) word[4] (global)  (usage 21)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (usage 3)
told                               14018  0x000036c2 (mem) word[4] (global)  (usage 21)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                         13768  0x000035c8 (mem) word (global)  (usage 24)
TouchXpos                          13762  0x000035c2 (mem) word (global)  (usage 15)
TouchYpos                          13764  0x000035c4 (mem) word (global)  (usage 13)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (usage 3)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      5035  0x000013ab (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 12)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 15)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (usage 42)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_90DT                              0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 12)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       3323  0x00000cfb (User func) args[1] r=0  (usage 6)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
values                                 2  0x00000002 (mem) word[10] (global)Notice: global var 'values' is never used
  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 3)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_LABEL                           12  0x0000000c (const dword)  (usage 6)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         5158  0x00001426 (User func) args[3] r=0  (usage 30)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
xTempSample                         8248  0x00002038 (mem) word[700] (global)  (usage 30)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (usage 9)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
